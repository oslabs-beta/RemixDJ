{"version":3,"file":"router.umd.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","optional","param","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","createRouter","dataRoutes","inFlightDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","resolvedLocation","protocol","isSameBasename","contentType","text","deferred","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;;EAEA;EACA;EACA;AACYA,0BAAZ;EAwBA;EACA;EACA;;aA1BYA;IAAAA;IAAAA;IAAAA;EAAAA,CAAAA,EAAAA,mBAAAA;;EAwLZ,MAAMC,iBAAiB,GAAG,UAA1B;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAqBA;EACA;EACA;EACA;EACO,SAASC,mBAAT,CACLC,OADK,EAEU;EAAA,EAAA,IADfA,OACe,KAAA,KAAA,CAAA,EAAA;EADfA,IAAAA,OACe,GADiB,EACjB,CAAA;EAAA,GAAA;;IACf,IAAI;MAAEC,cAAc,GAAG,CAAC,GAAD,CAAnB;MAA0BC,YAA1B;EAAwCC,IAAAA,QAAQ,GAAG,KAAA;EAAnD,GAAA,GAA6DH,OAAjE,CAAA;IACA,IAAII,OAAJ,CAFe;;EAGfA,EAAAA,OAAO,GAAGH,cAAc,CAACI,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAC3BC,oBAAoB,CAClBF,KADkB,EAElB,OAAOA,KAAP,KAAiB,QAAjB,GAA4B,IAA5B,GAAmCA,KAAK,CAACG,KAFvB,EAGlBF,KAAK,KAAK,CAAV,GAAc,SAAd,GAA0BG,SAHR,CADZ,CAAV,CAAA;EAOA,EAAA,IAAIH,KAAK,GAAGI,UAAU,CACpBT,YAAY,IAAI,IAAhB,GAAuBE,OAAO,CAACQ,MAAR,GAAiB,CAAxC,GAA4CV,YADxB,CAAtB,CAAA;EAGA,EAAA,IAAIW,MAAM,GAAGhB,cAAM,CAACiB,GAApB,CAAA;IACA,IAAIC,QAAyB,GAAG,IAAhC,CAAA;;IAEA,SAASJ,UAAT,CAAoBK,CAApB,EAAuC;EACrC,IAAA,OAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,CAAT,EAAY,CAAZ,CAAT,EAAyBZ,OAAO,CAACQ,MAAR,GAAiB,CAA1C,CAAP,CAAA;EACD,GAAA;;EACD,EAAA,SAASQ,kBAAT,GAAwC;MACtC,OAAOhB,OAAO,CAACG,KAAD,CAAd,CAAA;EACD,GAAA;;EACD,EAAA,SAASC,oBAAT,CACEa,EADF,EAEEZ,KAFF,EAGEa,GAHF,EAIY;EAAA,IAAA,IAFVb,KAEU,KAAA,KAAA,CAAA,EAAA;EAFVA,MAAAA,KAEU,GAFG,IAEH,CAAA;EAAA,KAAA;;EACV,IAAA,IAAIc,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGgB,kBAAkB,EAAA,CAAGK,QAAxB,GAAmC,GADf,EAE3BJ,EAF2B,EAG3BZ,KAH2B,EAI3Ba,GAJ2B,CAA7B,CAAA;EAMAI,IAAAA,SAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,KAAA,GAD3B,+DAEsDC,IAAI,CAACC,SAAL,CACzDR,EADyD,CAFtD,CAAP,CAAA;EAMA,IAAA,OAAOE,QAAP,CAAA;EACD,GAAA;;IAED,SAASO,UAAT,CAAoBT,EAApB,EAA4B;MAC1B,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C,CAAA;EACD,GAAA;;EAED,EAAA,IAAIW,OAAsB,GAAG;EAC3B,IAAA,IAAIzB,KAAJ,GAAY;EACV,MAAA,OAAOA,KAAP,CAAA;OAFyB;;EAI3B,IAAA,IAAIM,MAAJ,GAAa;EACX,MAAA,OAAOA,MAAP,CAAA;OALyB;;EAO3B,IAAA,IAAIU,QAAJ,GAAe;EACb,MAAA,OAAOH,kBAAkB,EAAzB,CAAA;OARyB;;MAU3BU,UAV2B;;MAW3BG,SAAS,CAACZ,EAAD,EAAK;QACZ,OAAO,IAAIa,GAAJ,CAAQJ,UAAU,CAACT,EAAD,CAAlB,EAAwB,kBAAxB,CAAP,CAAA;OAZyB;;MAc3Bc,cAAc,CAACd,EAAD,EAAS;EACrB,MAAA,IAAIe,IAAI,GAAG,OAAOf,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAApD,CAAA;QACA,OAAO;EACLI,QAAAA,QAAQ,EAAEW,IAAI,CAACX,QAAL,IAAiB,EADtB;EAELa,QAAAA,MAAM,EAAEF,IAAI,CAACE,MAAL,IAAe,EAFlB;EAGLC,QAAAA,IAAI,EAAEH,IAAI,CAACG,IAAL,IAAa,EAAA;SAHrB,CAAA;OAhByB;;EAsB3BC,IAAAA,IAAI,CAACnB,EAAD,EAAKZ,KAAL,EAAY;QACdI,MAAM,GAAGhB,cAAM,CAAC4C,IAAhB,CAAA;EACA,MAAA,IAAIC,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC,CAAA;EACAF,MAAAA,KAAK,IAAI,CAAT,CAAA;QACAH,OAAO,CAACuC,MAAR,CAAepC,KAAf,EAAsBH,OAAO,CAACQ,MAA9B,EAAsC8B,YAAtC,CAAA,CAAA;;QACA,IAAIvC,QAAQ,IAAIY,QAAhB,EAA0B;EACxBA,QAAAA,QAAQ,CAAC;YAAEF,MAAF;EAAUU,UAAAA,QAAQ,EAAEmB,YAApB;EAAkCE,UAAAA,KAAK,EAAE,CAAA;EAAzC,SAAD,CAAR,CAAA;EACD,OAAA;OA7BwB;;EA+B3BC,IAAAA,OAAO,CAACxB,EAAD,EAAKZ,KAAL,EAAY;QACjBI,MAAM,GAAGhB,cAAM,CAACiD,OAAhB,CAAA;EACA,MAAA,IAAIJ,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC,CAAA;EACAL,MAAAA,OAAO,CAACG,KAAD,CAAP,GAAiBmC,YAAjB,CAAA;;QACA,IAAIvC,QAAQ,IAAIY,QAAhB,EAA0B;EACxBA,QAAAA,QAAQ,CAAC;YAAEF,MAAF;EAAUU,UAAAA,QAAQ,EAAEmB,YAApB;EAAkCE,UAAAA,KAAK,EAAE,CAAA;EAAzC,SAAD,CAAR,CAAA;EACD,OAAA;OArCwB;;MAuC3BG,EAAE,CAACH,KAAD,EAAQ;QACR/B,MAAM,GAAGhB,cAAM,CAACiB,GAAhB,CAAA;EACA,MAAA,IAAIkC,SAAS,GAAGrC,UAAU,CAACJ,KAAK,GAAGqC,KAAT,CAA1B,CAAA;EACA,MAAA,IAAIF,YAAY,GAAGtC,OAAO,CAAC4C,SAAD,CAA1B,CAAA;EACAzC,MAAAA,KAAK,GAAGyC,SAAR,CAAA;;EACA,MAAA,IAAIjC,QAAJ,EAAc;EACZA,QAAAA,QAAQ,CAAC;YAAEF,MAAF;EAAUU,UAAAA,QAAQ,EAAEmB,YAApB;EAAkCE,UAAAA,KAAAA;EAAlC,SAAD,CAAR,CAAA;EACD,OAAA;OA9CwB;;MAgD3BK,MAAM,CAACC,EAAD,EAAe;EACnBnC,MAAAA,QAAQ,GAAGmC,EAAX,CAAA;EACA,MAAA,OAAO,MAAM;EACXnC,QAAAA,QAAQ,GAAG,IAAX,CAAA;SADF,CAAA;EAGD,KAAA;;KArDH,CAAA;EAwDA,EAAA,OAAOiB,OAAP,CAAA;EACD;EAGD;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASmB,oBAAT,CACLnD,OADK,EAEW;EAAA,EAAA,IADhBA,OACgB,KAAA,KAAA,CAAA,EAAA;EADhBA,IAAAA,OACgB,GADiB,EACjB,CAAA;EAAA,GAAA;;EAChB,EAAA,SAASoD,qBAAT,CACEC,MADF,EAEEC,aAFF,EAGE;MACA,IAAI;QAAE7B,QAAF;QAAYa,MAAZ;EAAoBC,MAAAA,IAAAA;OAASc,GAAAA,MAAM,CAAC9B,QAAxC,CAAA;MACA,OAAOC,cAAc,CACnB,EADmB,EAEnB;QAAEC,QAAF;QAAYa,MAAZ;EAAoBC,MAAAA,IAAAA;EAApB,KAFmB;MAIlBe,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoB8C,GAA5C,IAAoD,IAJjC,EAKlBD,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoBa,GAA5C,IAAoD,SALjC,CAArB,CAAA;EAOD,GAAA;;EAED,EAAA,SAASkC,iBAAT,CAA2BH,MAA3B,EAA2ChC,EAA3C,EAAmD;MACjD,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C,CAAA;EACD,GAAA;;IAED,OAAOoC,kBAAkB,CACvBL,qBADuB,EAEvBI,iBAFuB,EAGvB,IAHuB,EAIvBxD,OAJuB,CAAzB,CAAA;EAMD;EAGD;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAAS0D,iBAAT,CACL1D,OADK,EAEQ;EAAA,EAAA,IADbA,OACa,KAAA,KAAA,CAAA,EAAA;EADbA,IAAAA,OACa,GADiB,EACjB,CAAA;EAAA,GAAA;;EACb,EAAA,SAAS2D,kBAAT,CACEN,MADF,EAEEC,aAFF,EAGE;MACA,IAAI;EACF7B,MAAAA,QAAQ,GAAG,GADT;EAEFa,MAAAA,MAAM,GAAG,EAFP;EAGFC,MAAAA,IAAI,GAAG,EAAA;EAHL,KAAA,GAIAF,SAAS,CAACgB,MAAM,CAAC9B,QAAP,CAAgBgB,IAAhB,CAAqBqB,MAArB,CAA4B,CAA5B,CAAD,CAJb,CAAA;MAKA,OAAOpC,cAAc,CACnB,EADmB,EAEnB;QAAEC,QAAF;QAAYa,MAAZ;EAAoBC,MAAAA,IAAAA;EAApB,KAFmB;MAIlBe,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoB8C,GAA5C,IAAoD,IAJjC,EAKlBD,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoBa,GAA5C,IAAoD,SALjC,CAArB,CAAA;EAOD,GAAA;;EAED,EAAA,SAASuC,cAAT,CAAwBR,MAAxB,EAAwChC,EAAxC,EAAgD;MAC9C,IAAIyC,IAAI,GAAGT,MAAM,CAACU,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAX,CAAA;MACA,IAAIC,IAAI,GAAG,EAAX,CAAA;;MAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAL,CAAkB,MAAlB,CAAZ,EAAuC;EACrC,MAAA,IAAIC,GAAG,GAAGd,MAAM,CAAC9B,QAAP,CAAgB0C,IAA1B,CAAA;EACA,MAAA,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAhB,CAAA;EACAJ,MAAAA,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAf,GAAmBD,GAAnB,GAAyBA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,SAAb,CAAhC,CAAA;EACD,KAAA;;EAED,IAAA,OAAOH,IAAI,GAAG,GAAP,IAAc,OAAO5C,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAtD,CAAP,CAAA;EACD,GAAA;;EAED,EAAA,SAASkD,oBAAT,CAA8BhD,QAA9B,EAAkDF,EAAlD,EAA0D;EACxDK,IAAAA,SAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,KAAA,GAD3B,iEAEwDC,IAAI,CAACC,SAAL,CAC3DR,EAD2D,CAFxD,GAAP,GAAA,CAAA,CAAA;EAMD,GAAA;;IAED,OAAOoC,kBAAkB,CACvBE,kBADuB,EAEvBE,cAFuB,EAGvBU,oBAHuB,EAIvBvE,OAJuB,CAAzB,CAAA;EAMD;EAGD;EACA;EACA;;EAEA;EACA;EACA;;EAMO,SAASwE,SAAT,CAAmBC,KAAnB,EAA+BC,OAA/B,EAAiD;EACtD,EAAA,IAAID,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,IAA7B,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;EACrE,IAAA,MAAM,IAAIE,KAAJ,CAAUD,OAAV,CAAN,CAAA;EACD,GAAA;EACF,CAAA;;EAED,SAAShD,SAAT,CAAiBkD,IAAjB,EAA4BF,OAA5B,EAA6C;IAC3C,IAAI,CAACE,IAAL,EAAW;EACT;MACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaJ,OAAb,CAAA,CAAA;;MAEpC,IAAI;EACF;EACA;EACA;EACA;EACA;EACA,MAAA,MAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN,CANE;EAQH,KARD,CAQE,OAAOK,CAAP,EAAU,EAAE;EACf,GAAA;EACF,CAAA;;EAED,SAASC,SAAT,GAAqB;EACnB,EAAA,OAAO/D,IAAI,CAACgE,MAAL,EAAA,CAAcC,QAAd,CAAuB,EAAvB,CAAA,CAA2BtB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP,CAAA;EACD,CAAA;EAED;EACA;EACA;;;EACA,SAASuB,eAAT,CAAyB5D,QAAzB,EAA6ChB,KAA7C,EAA0E;IACxE,OAAO;MACLgD,GAAG,EAAEhC,QAAQ,CAACd,KADT;MAELa,GAAG,EAAEC,QAAQ,CAACD,GAFT;EAGL8D,IAAAA,GAAG,EAAE7E,KAAAA;KAHP,CAAA;EAKD,CAAA;EAED;EACA;EACA;;;EACO,SAASiB,cAAT,CACL6D,OADK,EAELhE,EAFK,EAGLZ,KAHK,EAILa,GAJK,EAKe;EAAA,EAAA,IAFpBb,KAEoB,KAAA,KAAA,CAAA,EAAA;EAFpBA,IAAAA,KAEoB,GAFP,IAEO,CAAA;EAAA,GAAA;;EACpB,EAAA,IAAIc,QAA4B,GAAA,QAAA,CAAA;MAC9BE,QAAQ,EAAE,OAAO4D,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAAC5D,QAD5B;EAE9Ba,IAAAA,MAAM,EAAE,EAFsB;EAG9BC,IAAAA,IAAI,EAAE,EAAA;KACF,EAAA,OAAOlB,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJf,EAAA;MAK9BZ,KAL8B;EAM9B;EACA;EACA;EACA;MACAa,GAAG,EAAGD,EAAE,IAAKA,EAAD,CAAiBC,GAAxB,IAAgCA,GAAhC,IAAuC0D,SAAS,EAAA;KAVvD,CAAA,CAAA;;EAYA,EAAA,OAAOzD,QAAP,CAAA;EACD,CAAA;EAED;EACA;EACA;;EACO,SAASQ,UAAT,CAIW,IAAA,EAAA;IAAA,IAJS;EACzBN,IAAAA,QAAQ,GAAG,GADc;EAEzBa,IAAAA,MAAM,GAAG,EAFgB;EAGzBC,IAAAA,IAAI,GAAG,EAAA;KACS,GAAA,IAAA,CAAA;EAChB,EAAA,IAAID,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACEb,QAAQ,IAAIa,MAAM,CAACX,MAAP,CAAc,CAAd,CAAqB,KAAA,GAArB,GAA2BW,MAA3B,GAAoC,MAAMA,MAAtD,CAAA;EACF,EAAA,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEd,QAAQ,IAAIc,IAAI,CAACZ,MAAL,CAAY,CAAZ,CAAmB,KAAA,GAAnB,GAAyBY,IAAzB,GAAgC,MAAMA,IAAlD,CAAA;EACF,EAAA,OAAOd,QAAP,CAAA;EACD,CAAA;EAED;EACA;EACA;;EACO,SAASY,SAAT,CAAmBD,IAAnB,EAAgD;IACrD,IAAIkD,UAAyB,GAAG,EAAhC,CAAA;;EAEA,EAAA,IAAIlD,IAAJ,EAAU;EACR,IAAA,IAAIgC,SAAS,GAAGhC,IAAI,CAACiC,OAAL,CAAa,GAAb,CAAhB,CAAA;;MACA,IAAID,SAAS,IAAI,CAAjB,EAAoB;QAClBkB,UAAU,CAAC/C,IAAX,GAAkBH,IAAI,CAACwB,MAAL,CAAYQ,SAAZ,CAAlB,CAAA;QACAhC,IAAI,GAAGA,IAAI,CAACwB,MAAL,CAAY,CAAZ,EAAeQ,SAAf,CAAP,CAAA;EACD,KAAA;;EAED,IAAA,IAAImB,WAAW,GAAGnD,IAAI,CAACiC,OAAL,CAAa,GAAb,CAAlB,CAAA;;MACA,IAAIkB,WAAW,IAAI,CAAnB,EAAsB;QACpBD,UAAU,CAAChD,MAAX,GAAoBF,IAAI,CAACwB,MAAL,CAAY2B,WAAZ,CAApB,CAAA;QACAnD,IAAI,GAAGA,IAAI,CAACwB,MAAL,CAAY,CAAZ,EAAe2B,WAAf,CAAP,CAAA;EACD,KAAA;;EAED,IAAA,IAAInD,IAAJ,EAAU;QACRkD,UAAU,CAAC7D,QAAX,GAAsBW,IAAtB,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAOkD,UAAP,CAAA;EACD,CAAA;;EASD,SAAS7B,kBAAT,CACE+B,WADF,EAEE1D,UAFF,EAGE2D,gBAHF,EAIEzF,OAJF,EAKc;EAAA,EAAA,IADZA,OACY,KAAA,KAAA,CAAA,EAAA;EADZA,IAAAA,OACY,GADiB,EACjB,CAAA;EAAA,GAAA;;IACZ,IAAI;MAAEqD,MAAM,GAAGU,QAAQ,CAAC2B,WAApB;EAAkCvF,IAAAA,QAAQ,GAAG,KAAA;EAA7C,GAAA,GAAuDH,OAA3D,CAAA;EACA,EAAA,IAAIsD,aAAa,GAAGD,MAAM,CAACrB,OAA3B,CAAA;EACA,EAAA,IAAInB,MAAM,GAAGhB,cAAM,CAACiB,GAApB,CAAA;IACA,IAAIC,QAAyB,GAAG,IAAhC,CAAA;EAEA,EAAA,IAAIR,KAAK,GAAGoF,QAAQ,EAApB,CANY;EAQZ;EACA;;IACA,IAAIpF,KAAK,IAAI,IAAb,EAAmB;EACjBA,IAAAA,KAAK,GAAG,CAAR,CAAA;EACA+C,IAAAA,aAAa,CAACsC,YAAd,CAAgCtC,QAAAA,CAAAA,EAAAA,EAAAA,aAAa,CAAC7C,KAA9C,EAAA;EAAqD2E,MAAAA,GAAG,EAAE7E,KAAAA;EAA1D,KAAA,CAAA,EAAmE,EAAnE,CAAA,CAAA;EACD,GAAA;;EAED,EAAA,SAASoF,QAAT,GAA4B;EAC1B,IAAA,IAAIlF,KAAK,GAAG6C,aAAa,CAAC7C,KAAd,IAAuB;EAAE2E,MAAAA,GAAG,EAAE,IAAA;OAA1C,CAAA;MACA,OAAO3E,KAAK,CAAC2E,GAAb,CAAA;EACD,GAAA;;EAED,EAAA,SAASS,SAAT,GAAqB;MACnBhF,MAAM,GAAGhB,cAAM,CAACiB,GAAhB,CAAA;MACA,IAAIkC,SAAS,GAAG2C,QAAQ,EAAxB,CAAA;MACA,IAAI/C,KAAK,GAAGI,SAAS,IAAI,IAAb,GAAoB,IAApB,GAA2BA,SAAS,GAAGzC,KAAnD,CAAA;EACAA,IAAAA,KAAK,GAAGyC,SAAR,CAAA;;EACA,IAAA,IAAIjC,QAAJ,EAAc;EACZA,MAAAA,QAAQ,CAAC;UAAEF,MAAF;UAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;EAAsCqB,QAAAA,KAAAA;EAAtC,OAAD,CAAR,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,SAASJ,IAAT,CAAcnB,EAAd,EAAsBZ,KAAtB,EAAmC;MACjCI,MAAM,GAAGhB,cAAM,CAAC4C,IAAhB,CAAA;MACA,IAAIlB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B,CAAA;EACA,IAAA,IAAIgF,gBAAJ,EAAsBA,gBAAgB,CAAClE,QAAD,EAAWF,EAAX,CAAhB,CAAA;MAEtBd,KAAK,GAAGoF,QAAQ,EAAA,GAAK,CAArB,CAAA;EACA,IAAA,IAAIG,YAAY,GAAGX,eAAe,CAAC5D,QAAD,EAAWhB,KAAX,CAAlC,CAAA;MACA,IAAI4D,GAAG,GAAGnC,OAAO,CAACF,UAAR,CAAmBP,QAAnB,CAAV,CAPiC;;MAUjC,IAAI;EACF+B,MAAAA,aAAa,CAACyC,SAAd,CAAwBD,YAAxB,EAAsC,EAAtC,EAA0C3B,GAA1C,CAAA,CAAA;OADF,CAEE,OAAO6B,KAAP,EAAc;EACd;EACA;EACA3C,MAAAA,MAAM,CAAC9B,QAAP,CAAgB0E,MAAhB,CAAuB9B,GAAvB,CAAA,CAAA;EACD,KAAA;;MAED,IAAIhE,QAAQ,IAAIY,QAAhB,EAA0B;EACxBA,MAAAA,QAAQ,CAAC;UAAEF,MAAF;UAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;EAAsCqB,QAAAA,KAAK,EAAE,CAAA;EAA7C,OAAD,CAAR,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,SAASC,OAAT,CAAiBxB,EAAjB,EAAyBZ,KAAzB,EAAsC;MACpCI,MAAM,GAAGhB,cAAM,CAACiD,OAAhB,CAAA;MACA,IAAIvB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B,CAAA;EACA,IAAA,IAAIgF,gBAAJ,EAAsBA,gBAAgB,CAAClE,QAAD,EAAWF,EAAX,CAAhB,CAAA;MAEtBd,KAAK,GAAGoF,QAAQ,EAAhB,CAAA;EACA,IAAA,IAAIG,YAAY,GAAGX,eAAe,CAAC5D,QAAD,EAAWhB,KAAX,CAAlC,CAAA;EACA,IAAA,IAAI4D,GAAG,GAAGnC,OAAO,CAACF,UAAR,CAAmBP,QAAnB,CAAV,CAAA;EACA+B,IAAAA,aAAa,CAACsC,YAAd,CAA2BE,YAA3B,EAAyC,EAAzC,EAA6C3B,GAA7C,CAAA,CAAA;;MAEA,IAAIhE,QAAQ,IAAIY,QAAhB,EAA0B;EACxBA,MAAAA,QAAQ,CAAC;UAAEF,MAAF;UAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;EAAsCqB,QAAAA,KAAK,EAAE,CAAA;EAA7C,OAAD,CAAR,CAAA;EACD,KAAA;EACF,GAAA;;IAED,SAASX,SAAT,CAAmBZ,EAAnB,EAAgC;EAC9B;EACA;EACA;MACA,IAAIyC,IAAI,GACNT,MAAM,CAAC9B,QAAP,CAAgB2E,MAAhB,KAA2B,MAA3B,GACI7C,MAAM,CAAC9B,QAAP,CAAgB2E,MADpB,GAEI7C,MAAM,CAAC9B,QAAP,CAAgB0C,IAHtB,CAAA;EAKA,IAAA,IAAIA,IAAI,GAAG,OAAO5C,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAnD,CAAA;EACAmD,IAAAA,SAAS,CACPV,IADO,EAE+DG,qEAAAA,GAAAA,IAF/D,CAAT,CAAA;EAIA,IAAA,OAAO,IAAI/B,GAAJ,CAAQ+B,IAAR,EAAcH,IAAd,CAAP,CAAA;EACD,GAAA;;EAED,EAAA,IAAI9B,OAAgB,GAAG;EACrB,IAAA,IAAInB,MAAJ,GAAa;EACX,MAAA,OAAOA,MAAP,CAAA;OAFmB;;EAIrB,IAAA,IAAIU,QAAJ,GAAe;EACb,MAAA,OAAOiE,WAAW,CAACnC,MAAD,EAASC,aAAT,CAAlB,CAAA;OALmB;;MAOrBL,MAAM,CAACC,EAAD,EAAe;EACnB,MAAA,IAAInC,QAAJ,EAAc;EACZ,QAAA,MAAM,IAAI4D,KAAJ,CAAU,4CAAV,CAAN,CAAA;EACD,OAAA;;EACDtB,MAAAA,MAAM,CAAC8C,gBAAP,CAAwBrG,iBAAxB,EAA2C+F,SAA3C,CAAA,CAAA;EACA9E,MAAAA,QAAQ,GAAGmC,EAAX,CAAA;EAEA,MAAA,OAAO,MAAM;EACXG,QAAAA,MAAM,CAAC+C,mBAAP,CAA2BtG,iBAA3B,EAA8C+F,SAA9C,CAAA,CAAA;EACA9E,QAAAA,QAAQ,GAAG,IAAX,CAAA;SAFF,CAAA;OAdmB;;MAmBrBe,UAAU,CAACT,EAAD,EAAK;EACb,MAAA,OAAOS,UAAU,CAACuB,MAAD,EAAShC,EAAT,CAAjB,CAAA;OApBmB;;MAsBrBY,SAtBqB;;MAuBrBE,cAAc,CAACd,EAAD,EAAK;EACjB;EACA,MAAA,IAAI8C,GAAG,GAAGlC,SAAS,CAACZ,EAAD,CAAnB,CAAA;QACA,OAAO;UACLI,QAAQ,EAAE0C,GAAG,CAAC1C,QADT;UAELa,MAAM,EAAE6B,GAAG,CAAC7B,MAFP;UAGLC,IAAI,EAAE4B,GAAG,CAAC5B,IAAAA;SAHZ,CAAA;OA1BmB;;MAgCrBC,IAhCqB;MAiCrBK,OAjCqB;;MAkCrBE,EAAE,CAAC/B,CAAD,EAAI;EACJ,MAAA,OAAOsC,aAAa,CAACP,EAAd,CAAiB/B,CAAjB,CAAP,CAAA;EACD,KAAA;;KApCH,CAAA;EAuCA,EAAA,OAAOgB,OAAP,CAAA;EACD;;EC3sBD;EACA;EACA;;EAKA,IAAYqE,UAAZ,CAAA;EAOA;EACA;EACA;;aATYA;IAAAA;IAAAA;IAAAA;IAAAA;EAAAA,CAAAA,EAAAA,eAAAA;;EAmQZ,SAASC,YAAT,CACEC,KADF,EAEqC;EACnC,EAAA,OAAOA,KAAK,CAAChG,KAAN,KAAgB,IAAvB,CAAA;EACD;EAGD;;;EACO,SAASiG,yBAAT,CACLC,MADK,EAELC,UAFK,EAGLC,MAHK,EAIsB;EAAA,EAAA,IAF3BD,UAE2B,KAAA,KAAA,CAAA,EAAA;EAF3BA,IAAAA,UAE2B,GAFJ,EAEI,CAAA;EAAA,GAAA;;EAAA,EAAA,IAD3BC,MAC2B,KAAA,KAAA,CAAA,EAAA;MAD3BA,MAC2B,GADL,IAAIC,GAAJ,EACK,CAAA;EAAA,GAAA;;IAC3B,OAAOH,MAAM,CAACpG,GAAP,CAAW,CAACkG,KAAD,EAAQhG,KAAR,KAAkB;EAClC,IAAA,IAAIsG,QAAQ,GAAG,CAAC,GAAGH,UAAJ,EAAgBnG,KAAhB,CAAf,CAAA;EACA,IAAA,IAAIuG,EAAE,GAAG,OAAOP,KAAK,CAACO,EAAb,KAAoB,QAApB,GAA+BP,KAAK,CAACO,EAArC,GAA0CD,QAAQ,CAACE,IAAT,CAAc,GAAd,CAAnD,CAAA;MACAvC,SAAS,CACP+B,KAAK,CAAChG,KAAN,KAAgB,IAAhB,IAAwB,CAACgG,KAAK,CAACS,QADxB,EAAT,2CAAA,CAAA,CAAA;EAIAxC,IAAAA,SAAS,CACP,CAACmC,MAAM,CAACM,GAAP,CAAWH,EAAX,CADM,EAEP,qCAAA,GAAqCA,EAArC,GAAA,aAAA,GACE,wDAHK,CAAT,CAAA;MAKAH,MAAM,CAACO,GAAP,CAAWJ,EAAX,CAAA,CAAA;;EAEA,IAAA,IAAIR,YAAY,CAACC,KAAD,CAAhB,EAAyB;QACvB,IAAIY,UAAwC,gBAAQZ,KAAR,EAAA;EAAeO,QAAAA,EAAAA;SAA3D,CAAA,CAAA;;EACA,MAAA,OAAOK,UAAP,CAAA;EACD,KAHD,MAGO;QACL,IAAIC,iBAAkD,gBACjDb,KADiD,EAAA;UAEpDO,EAFoD;EAGpDE,QAAAA,QAAQ,EAAET,KAAK,CAACS,QAAN,GACNR,yBAAyB,CAACD,KAAK,CAACS,QAAP,EAAiBH,QAAjB,EAA2BF,MAA3B,CADnB,GAENjG,SAAAA;SALN,CAAA,CAAA;;EAOA,MAAA,OAAO0G,iBAAP,CAAA;EACD,KAAA;EACF,GA3BM,CAAP,CAAA;EA4BD,CAAA;EAED;EACA;EACA;EACA;EACA;;EACO,SAASC,WAAT,CAGLZ,MAHK,EAILa,WAJK,EAKLC,QALK,EAMiD;EAAA,EAAA,IADtDA,QACsD,KAAA,KAAA,CAAA,EAAA;EADtDA,IAAAA,QACsD,GAD3C,GAC2C,CAAA;EAAA,GAAA;;EACtD,EAAA,IAAIhG,QAAQ,GACV,OAAO+F,WAAP,KAAuB,QAAvB,GAAkCjF,SAAS,CAACiF,WAAD,CAA3C,GAA2DA,WAD7D,CAAA;IAGA,IAAI7F,QAAQ,GAAG+F,aAAa,CAACjG,QAAQ,CAACE,QAAT,IAAqB,GAAtB,EAA2B8F,QAA3B,CAA5B,CAAA;;IAEA,IAAI9F,QAAQ,IAAI,IAAhB,EAAsB;EACpB,IAAA,OAAO,IAAP,CAAA;EACD,GAAA;;EAED,EAAA,IAAIgG,QAAQ,GAAGC,aAAa,CAACjB,MAAD,CAA5B,CAAA;IACAkB,iBAAiB,CAACF,QAAD,CAAjB,CAAA;IAEA,IAAIG,OAAO,GAAG,IAAd,CAAA;;EACA,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAX,IAAmBC,CAAC,GAAGJ,QAAQ,CAAC7G,MAAhD,EAAwD,EAAEiH,CAA1D,EAA6D;EAC3DD,IAAAA,OAAO,GAAGE,gBAAgB,CACxBL,QAAQ,CAACI,CAAD,CADgB;EAGxB;EACA;EACA;EACA;EACA;MACAE,eAAe,CAACtG,QAAD,CARS,CAA1B,CAAA;EAUD,GAAA;;EAED,EAAA,OAAOmG,OAAP,CAAA;EACD,CAAA;;EAmBD,SAASF,aAAT,CAGEjB,MAHF,EAIEgB,QAJF,EAKEO,WALF,EAMEtB,UANF,EAOkC;EAAA,EAAA,IAHhCe,QAGgC,KAAA,KAAA,CAAA,EAAA;EAHhCA,IAAAA,QAGgC,GAHW,EAGX,CAAA;EAAA,GAAA;;EAAA,EAAA,IAFhCO,WAEgC,KAAA,KAAA,CAAA,EAAA;EAFhCA,IAAAA,WAEgC,GAFY,EAEZ,CAAA;EAAA,GAAA;;EAAA,EAAA,IADhCtB,UACgC,KAAA,KAAA,CAAA,EAAA;EADhCA,IAAAA,UACgC,GADnB,EACmB,CAAA;EAAA,GAAA;;IAChC,IAAIuB,YAAY,GAAG,CACjB1B,KADiB,EAEjBhG,KAFiB,EAGjB2H,YAHiB,KAId;EACH,IAAA,IAAIC,IAAgC,GAAG;QACrCD,YAAY,EACVA,YAAY,KAAKxH,SAAjB,GAA6B6F,KAAK,CAACnE,IAAN,IAAc,EAA3C,GAAgD8F,YAFb;EAGrCE,MAAAA,aAAa,EAAE7B,KAAK,CAAC6B,aAAN,KAAwB,IAHF;EAIrCC,MAAAA,aAAa,EAAE9H,KAJsB;EAKrCgG,MAAAA,KAAAA;OALF,CAAA;;MAQA,IAAI4B,IAAI,CAACD,YAAL,CAAkBI,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;EACrC9D,MAAAA,SAAS,CACP2D,IAAI,CAACD,YAAL,CAAkBI,UAAlB,CAA6B5B,UAA7B,CADO,EAEP,2BAAwByB,IAAI,CAACD,YAA7B,GACMxB,uBAAAA,IAAAA,IAAAA,GAAAA,UADN,oHAFO,CAAT,CAAA;EAOAyB,MAAAA,IAAI,CAACD,YAAL,GAAoBC,IAAI,CAACD,YAAL,CAAkB5D,KAAlB,CAAwBoC,UAAU,CAAC9F,MAAnC,CAApB,CAAA;EACD,KAAA;;MAED,IAAIwB,IAAI,GAAGmG,SAAS,CAAC,CAAC7B,UAAD,EAAayB,IAAI,CAACD,YAAlB,CAAD,CAApB,CAAA;MACA,IAAIM,UAAU,GAAGR,WAAW,CAACS,MAAZ,CAAmBN,IAAnB,CAAjB,CArBG;EAwBH;EACA;;MACA,IAAI5B,KAAK,CAACS,QAAN,IAAkBT,KAAK,CAACS,QAAN,CAAepG,MAAf,GAAwB,CAA9C,EAAiD;EAC/C4D,MAAAA,SAAS;EAEP;QACA+B,KAAK,CAAChG,KAAN,KAAgB,IAHT,EAIP,yDACuC6B,IAAAA,qCAAAA,GAAAA,IADvC,SAJO,CAAT,CAAA;QAQAsF,aAAa,CAACnB,KAAK,CAACS,QAAP,EAAiBS,QAAjB,EAA2Be,UAA3B,EAAuCpG,IAAvC,CAAb,CAAA;EACD,KApCE;EAuCH;;;MACA,IAAImE,KAAK,CAACnE,IAAN,IAAc,IAAd,IAAsB,CAACmE,KAAK,CAAChG,KAAjC,EAAwC;EACtC,MAAA,OAAA;EACD,KAAA;;MAEDkH,QAAQ,CAACjF,IAAT,CAAc;QACZJ,IADY;QAEZsG,KAAK,EAAEC,YAAY,CAACvG,IAAD,EAAOmE,KAAK,CAAChG,KAAb,CAFP;EAGZiI,MAAAA,UAAAA;OAHF,CAAA,CAAA;KAhDF,CAAA;;EAsDA/B,EAAAA,MAAM,CAACmC,OAAP,CAAe,CAACrC,KAAD,EAAQhG,KAAR,KAAkB;EAAA,IAAA,IAAA,WAAA,CAAA;;EAC/B;EACA,IAAA,IAAIgG,KAAK,CAACnE,IAAN,KAAe,EAAf,IAAqB,EAACmE,CAAAA,WAAAA,GAAAA,KAAK,CAACnE,IAAP,aAAC,WAAYyG,CAAAA,QAAZ,CAAqB,GAArB,CAAD,CAAzB,EAAqD;EACnDZ,MAAAA,YAAY,CAAC1B,KAAD,EAAQhG,KAAR,CAAZ,CAAA;EACD,KAFD,MAEO;QACL,KAAK,IAAIuI,QAAT,IAAqBC,uBAAuB,CAACxC,KAAK,CAACnE,IAAP,CAA5C,EAA0D;EACxD6F,QAAAA,YAAY,CAAC1B,KAAD,EAAQhG,KAAR,EAAeuI,QAAf,CAAZ,CAAA;EACD,OAAA;EACF,KAAA;KARH,CAAA,CAAA;EAWA,EAAA,OAAOrB,QAAP,CAAA;EACD,CAAA;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAASsB,uBAAT,CAAiC3G,IAAjC,EAAyD;EACvD,EAAA,IAAI4G,QAAQ,GAAG5G,IAAI,CAAC6G,KAAL,CAAW,GAAX,CAAf,CAAA;EACA,EAAA,IAAID,QAAQ,CAACpI,MAAT,KAAoB,CAAxB,EAA2B,OAAO,EAAP,CAAA;IAE3B,IAAI,CAACsI,KAAD,EAAQ,GAAGC,IAAX,CAAmBH,GAAAA,QAAvB,CAJuD;;IAOvD,IAAII,UAAU,GAAGF,KAAK,CAACG,QAAN,CAAe,GAAf,CAAjB,CAPuD;;IASvD,IAAIC,QAAQ,GAAGJ,KAAK,CAACrG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAf,CAAA;;EAEA,EAAA,IAAIsG,IAAI,CAACvI,MAAL,KAAgB,CAApB,EAAuB;EACrB;EACA;MACA,OAAOwI,UAAU,GAAG,CAACE,QAAD,EAAW,EAAX,CAAH,GAAoB,CAACA,QAAD,CAArC,CAAA;EACD,GAAA;;IAED,IAAIC,YAAY,GAAGR,uBAAuB,CAACI,IAAI,CAACpC,IAAL,CAAU,GAAV,CAAD,CAA1C,CAAA;EAEA,EAAA,IAAIyC,MAAgB,GAAG,EAAvB,CAnBuD;EAsBvD;EACA;EACA;EACA;EACA;EACA;;IACAA,MAAM,CAAChH,IAAP,CACE,GAAG+G,YAAY,CAAClJ,GAAb,CAAkBoJ,OAAD,IAClBA,OAAO,KAAK,EAAZ,GAAiBH,QAAjB,GAA4B,CAACA,QAAD,EAAWG,OAAX,CAAA,CAAoB1C,IAApB,CAAyB,GAAzB,CAD3B,CADL,CAAA,CA5BuD;;EAmCvD,EAAA,IAAIqC,UAAJ,EAAgB;EACdI,IAAAA,MAAM,CAAChH,IAAP,CAAY,GAAG+G,YAAf,CAAA,CAAA;EACD,GArCsD;;;EAwCvD,EAAA,OAAOC,MAAM,CAACnJ,GAAP,CAAYyI,QAAD,IAChB1G,IAAI,CAACkG,UAAL,CAAgB,GAAhB,CAAA,IAAwBQ,QAAQ,KAAK,EAArC,GAA0C,GAA1C,GAAgDA,QAD3C,CAAP,CAAA;EAGD,CAAA;;EAED,SAASnB,iBAAT,CAA2BF,QAA3B,EAA0D;IACxDA,QAAQ,CAACiC,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KACZD,CAAC,CAACjB,KAAF,KAAYkB,CAAC,CAAClB,KAAd,GACIkB,CAAC,CAAClB,KAAF,GAAUiB,CAAC,CAACjB,KADhB;MAEImB,cAAc,CACZF,CAAC,CAACnB,UAAF,CAAanI,GAAb,CAAkB8H,IAAD,IAAUA,IAAI,CAACE,aAAhC,CADY,EAEZuB,CAAC,CAACpB,UAAF,CAAanI,GAAb,CAAkB8H,IAAD,IAAUA,IAAI,CAACE,aAAhC,CAFY,CAHpB,CAAA,CAAA;EAQD,CAAA;;EAED,MAAMyB,OAAO,GAAG,QAAhB,CAAA;EACA,MAAMC,mBAAmB,GAAG,CAA5B,CAAA;EACA,MAAMC,eAAe,GAAG,CAAxB,CAAA;EACA,MAAMC,iBAAiB,GAAG,CAA1B,CAAA;EACA,MAAMC,kBAAkB,GAAG,EAA3B,CAAA;EACA,MAAMC,YAAY,GAAG,CAAC,CAAtB,CAAA;;EACA,MAAMC,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAK,GAArC,CAAA;;EAEA,SAAS1B,YAAT,CAAsBvG,IAAtB,EAAoC7B,KAApC,EAAwE;EACtE,EAAA,IAAIyI,QAAQ,GAAG5G,IAAI,CAAC6G,KAAL,CAAW,GAAX,CAAf,CAAA;EACA,EAAA,IAAIqB,YAAY,GAAGtB,QAAQ,CAACpI,MAA5B,CAAA;;EACA,EAAA,IAAIoI,QAAQ,CAACuB,IAAT,CAAcH,OAAd,CAAJ,EAA4B;EAC1BE,IAAAA,YAAY,IAAIH,YAAhB,CAAA;EACD,GAAA;;EAED,EAAA,IAAI5J,KAAJ,EAAW;EACT+J,IAAAA,YAAY,IAAIN,eAAhB,CAAA;EACD,GAAA;;EAED,EAAA,OAAOhB,QAAQ,CACZwB,MADI,CACIH,CAAD,IAAO,CAACD,OAAO,CAACC,CAAD,CADlB,CAEJI,CAAAA,MAFI,CAGH,CAAC/B,KAAD,EAAQgC,OAAR,KACEhC,KAAK,IACJoB,OAAO,CAACa,IAAR,CAAaD,OAAb,CAAA,GACGX,mBADH,GAEGW,OAAO,KAAK,EAAZ,GACAT,iBADA,GAEAC,kBALC,CAJJ,EAUHI,YAVG,CAAP,CAAA;EAYD,CAAA;;EAED,SAAST,cAAT,CAAwBF,CAAxB,EAAqCC,CAArC,EAA0D;EACxD,EAAA,IAAIgB,QAAQ,GACVjB,CAAC,CAAC/I,MAAF,KAAagJ,CAAC,CAAChJ,MAAf,IAAyB+I,CAAC,CAACrF,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAeuG,CAAAA,KAAf,CAAqB,CAAC7J,CAAD,EAAI6G,CAAJ,KAAU7G,CAAC,KAAK4I,CAAC,CAAC/B,CAAD,CAAtC,CAD3B,CAAA;EAGA,EAAA,OAAO+C,QAAQ;EAEX;EACA;EACA;EACAjB,EAAAA,CAAC,CAACA,CAAC,CAAC/I,MAAF,GAAW,CAAZ,CAAD,GAAkBgJ,CAAC,CAACA,CAAC,CAAChJ,MAAF,GAAW,CAAZ,CALR;EAOX;IACA,CARJ,CAAA;EASD,CAAA;;EAED,SAASkH,gBAAT,CAIEgD,MAJF,EAKErJ,QALF,EAM0D;IACxD,IAAI;EAAE+G,IAAAA,UAAAA;EAAF,GAAA,GAAiBsC,MAArB,CAAA;IAEA,IAAIC,aAAa,GAAG,EAApB,CAAA;IACA,IAAIC,eAAe,GAAG,GAAtB,CAAA;IACA,IAAIpD,OAAwD,GAAG,EAA/D,CAAA;;EACA,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,UAAU,CAAC5H,MAA/B,EAAuC,EAAEiH,CAAzC,EAA4C;EAC1C,IAAA,IAAIM,IAAI,GAAGK,UAAU,CAACX,CAAD,CAArB,CAAA;MACA,IAAIoD,GAAG,GAAGpD,CAAC,KAAKW,UAAU,CAAC5H,MAAX,GAAoB,CAApC,CAAA;EACA,IAAA,IAAIsK,iBAAiB,GACnBF,eAAe,KAAK,GAApB,GACIvJ,QADJ,GAEIA,QAAQ,CAAC6C,KAAT,CAAe0G,eAAe,CAACpK,MAA/B,KAA0C,GAHhD,CAAA;MAIA,IAAIuK,KAAK,GAAGC,SAAS,CACnB;QAAEhJ,IAAI,EAAE+F,IAAI,CAACD,YAAb;QAA2BE,aAAa,EAAED,IAAI,CAACC,aAA/C;EAA8D6C,MAAAA,GAAAA;OAD3C,EAEnBC,iBAFmB,CAArB,CAAA;EAKA,IAAA,IAAI,CAACC,KAAL,EAAY,OAAO,IAAP,CAAA;EAEZE,IAAAA,MAAM,CAACpF,MAAP,CAAc8E,aAAd,EAA6BI,KAAK,CAACG,MAAnC,CAAA,CAAA;EAEA,IAAA,IAAI/E,KAAK,GAAG4B,IAAI,CAAC5B,KAAjB,CAAA;MAEAqB,OAAO,CAACpF,IAAR,CAAa;EACX;EACA8I,MAAAA,MAAM,EAAEP,aAFG;QAGXtJ,QAAQ,EAAE8G,SAAS,CAAC,CAACyC,eAAD,EAAkBG,KAAK,CAAC1J,QAAxB,CAAD,CAHR;EAIX8J,MAAAA,YAAY,EAAEC,iBAAiB,CAC7BjD,SAAS,CAAC,CAACyC,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CADoB,CAJpB;EAOXhF,MAAAA,KAAAA;OAPF,CAAA,CAAA;;EAUA,IAAA,IAAI4E,KAAK,CAACI,YAAN,KAAuB,GAA3B,EAAgC;QAC9BP,eAAe,GAAGzC,SAAS,CAAC,CAACyC,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CAA3B,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAO3D,OAAP,CAAA;EACD,CAAA;EAED;EACA;EACA;EACA;EACA;;;EACO,SAAS6D,YAAT,CACLC,YADK,EAELJ,MAFK,EAKG;EAAA,EAAA,IAHRA,MAGQ,KAAA,KAAA,CAAA,EAAA;EAHRA,IAAAA,MAGQ,GADJ,EACI,CAAA;EAAA,GAAA;;IACR,IAAIlJ,IAAI,GAAGsJ,YAAX,CAAA;;EACA,EAAA,IAAItJ,IAAI,CAACiH,QAAL,CAAc,GAAd,KAAsBjH,IAAI,KAAK,GAA/B,IAAsC,CAACA,IAAI,CAACiH,QAAL,CAAc,IAAd,CAA3C,EAAgE;MAC9D3H,OAAO,CACL,KADK,EAEL,eAAeU,GAAAA,IAAf,iDACMA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,GAAA,oCAAA,CAAA,GAAA,kEAAA,IAAA,oCAAA,GAGsCT,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,GAAA,KAAA,CAFK,CAAP,CAAA;MAOAT,IAAI,GAAGA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAP,CAAA;EACD,GAAA;;EAED,EAAA,OACET,IAAI,CACDS,OADH,CAEI,eAFJ,EAGI,CAAC8I,CAAD,EAAIrK,GAAJ,EAA0BsK,QAA1B,KAA2D;EACzD,IAAA,IAAIC,KAAK,GAAGP,MAAM,CAAChK,GAAD,CAAlB,CAAA;;MACA,IAAIsK,QAAQ,KAAK,GAAjB,EAAsB;EACpB,MAAA,OAAOC,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAA5B,CAAA;EACD,KAAA;;MACD,IAAIA,KAAK,IAAI,IAAb,EAAmB;EACjBrH,MAAAA,SAAS,CAAC,KAAD,EAAqBlD,aAAAA,GAAAA,GAArB,GAAT,UAAA,CAAA,CAAA;EACD,KAAA;;EACD,IAAA,OAAOuK,KAAP,CAAA;KAXN,CAAA,CAcGhJ,OAdH,CAeI,gBAfJ,EAgBI,CAAC8I,CAAD,EAAIrK,GAAJ,EAA0BsK,QAA1B,KAA2D;EACzD,IAAA,IAAIC,KAAK,GAAGP,MAAM,CAAChK,GAAD,CAAlB,CAAA;;MACA,IAAIsK,QAAQ,KAAK,GAAjB,EAAsB;EACpB,MAAA,OAAOC,KAAK,IAAI,IAAT,GAAgB,EAAhB,SAAyBA,KAAhC,CAAA;EACD,KAAA;;MACD,IAAIA,KAAK,IAAI,IAAb,EAAmB;EACjBrH,MAAAA,SAAS,CAAC,KAAD,EAAqBlD,aAAAA,GAAAA,GAArB,GAAT,UAAA,CAAA,CAAA;EACD,KAAA;;EACD,IAAA,OAAA,GAAA,GAAWuK,KAAX,CAAA;EACD,GAzBL,CA2BE;EA3BF,GA4BGhJ,OA5BH,CA4BW,KA5BX,EA4BkB,EA5BlB,CAAA,CA6BGA,OA7BH,CA6BW,SA7BX,EA6BsB,CAAC8I,CAAD,EAAIG,MAAJ,EAAYC,EAAZ,EAAgBC,GAAhB,KAAwB;MAC1C,MAAMC,IAAI,GAAG,GAAb,CAAA;;EAEA,IAAA,IAAIX,MAAM,CAACW,IAAD,CAAN,IAAgB,IAApB,EAA0B;EACxB;EACA;EACA,MAAA,OAAOD,GAAG,KAAK,IAAR,GAAe,GAAf,GAAqB,EAA5B,CAAA;EACD,KAPyC;;;EAU1C,IAAA,OAAA,EAAA,GAAUF,MAAV,GAAmBR,MAAM,CAACW,IAAD,CAAzB,CAAA;EACD,GAxCH,CADF,CAAA;EA2CD,CAAA;EAED;EACA;EACA;;EA6CA;EACA;EACA;EACA;EACA;EACA;EACO,SAASb,SAAT,CAILc,OAJK,EAKLzK,QALK,EAMuB;EAC5B,EAAA,IAAI,OAAOyK,OAAP,KAAmB,QAAvB,EAAiC;EAC/BA,IAAAA,OAAO,GAAG;EAAE9J,MAAAA,IAAI,EAAE8J,OAAR;EAAiB9D,MAAAA,aAAa,EAAE,KAAhC;EAAuC6C,MAAAA,GAAG,EAAE,IAAA;OAAtD,CAAA;EACD,GAAA;;EAED,EAAA,IAAI,CAACkB,OAAD,EAAUC,UAAV,CAAwBC,GAAAA,WAAW,CACrCH,OAAO,CAAC9J,IAD6B,EAErC8J,OAAO,CAAC9D,aAF6B,EAGrC8D,OAAO,CAACjB,GAH6B,CAAvC,CAAA;EAMA,EAAA,IAAIE,KAAK,GAAG1J,QAAQ,CAAC0J,KAAT,CAAegB,OAAf,CAAZ,CAAA;EACA,EAAA,IAAI,CAAChB,KAAL,EAAY,OAAO,IAAP,CAAA;EAEZ,EAAA,IAAIH,eAAe,GAAGG,KAAK,CAAC,CAAD,CAA3B,CAAA;IACA,IAAII,YAAY,GAAGP,eAAe,CAACnI,OAAhB,CAAwB,SAAxB,EAAmC,IAAnC,CAAnB,CAAA;EACA,EAAA,IAAIyJ,aAAa,GAAGnB,KAAK,CAAC7G,KAAN,CAAY,CAAZ,CAApB,CAAA;EACA,EAAA,IAAIgH,MAAc,GAAGc,UAAU,CAAC3B,MAAX,CACnB,CAAC8B,IAAD,EAAOC,SAAP,EAAkBjM,KAAlB,KAA4B;EAC1B;EACA;MACA,IAAIiM,SAAS,KAAK,GAAlB,EAAuB;EACrB,MAAA,IAAIC,UAAU,GAAGH,aAAa,CAAC/L,KAAD,CAAb,IAAwB,EAAzC,CAAA;QACAgL,YAAY,GAAGP,eAAe,CAC3B1G,KADY,CACN,CADM,EACH0G,eAAe,CAACpK,MAAhB,GAAyB6L,UAAU,CAAC7L,MADjC,CAEZiC,CAAAA,OAFY,CAEJ,SAFI,EAEO,IAFP,CAAf,CAAA;EAGD,KAAA;;EAED0J,IAAAA,IAAI,CAACC,SAAD,CAAJ,GAAkBE,wBAAwB,CACxCJ,aAAa,CAAC/L,KAAD,CAAb,IAAwB,EADgB,EAExCiM,SAFwC,CAA1C,CAAA;EAIA,IAAA,OAAOD,IAAP,CAAA;KAfiB,EAiBnB,EAjBmB,CAArB,CAAA;IAoBA,OAAO;MACLjB,MADK;EAEL7J,IAAAA,QAAQ,EAAEuJ,eAFL;MAGLO,YAHK;EAILW,IAAAA,OAAAA;KAJF,CAAA;EAMD,CAAA;;EAED,SAASG,WAAT,CACEjK,IADF,EAEEgG,aAFF,EAGE6C,GAHF,EAIsB;EAAA,EAAA,IAFpB7C,aAEoB,KAAA,KAAA,CAAA,EAAA;EAFpBA,IAAAA,aAEoB,GAFJ,KAEI,CAAA;EAAA,GAAA;;EAAA,EAAA,IADpB6C,GACoB,KAAA,KAAA,CAAA,EAAA;EADpBA,IAAAA,GACoB,GADd,IACc,CAAA;EAAA,GAAA;;EACpBvJ,EAAAA,OAAO,CACLU,IAAI,KAAK,GAAT,IAAgB,CAACA,IAAI,CAACiH,QAAL,CAAc,GAAd,CAAjB,IAAuCjH,IAAI,CAACiH,QAAL,CAAc,IAAd,CADlC,EAEL,eAAejH,GAAAA,IAAf,iDACMA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCT,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP,CAAA;IAQA,IAAIuJ,UAAoB,GAAG,EAA3B,CAAA;IACA,IAAIO,YAAY,GACd,GAAA,GACAvK,IAAI,CACDS,OADH,CACW,SADX,EACsB,EADtB,CAC0B;EAD1B,GAEGA,OAFH,CAEW,MAFX,EAEmB,GAFnB,CAEwB;EAFxB,GAGGA,OAHH,CAGW,qBAHX,EAGkC,MAHlC,CAG0C;KACvCA,OAJH,CAIW,WAJX,EAIwB,CAAC8I,CAAD,EAAYa,SAAZ,KAAkC;MACtDJ,UAAU,CAAC5J,IAAX,CAAgBgK,SAAhB,CAAA,CAAA;EACA,IAAA,OAAO,YAAP,CAAA;EACD,GAPH,CAFF,CAAA;;EAWA,EAAA,IAAIpK,IAAI,CAACiH,QAAL,CAAc,GAAd,CAAJ,EAAwB;MACtB+C,UAAU,CAAC5J,IAAX,CAAgB,GAAhB,CAAA,CAAA;MACAmK,YAAY,IACVvK,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,GACI,OADJ;QAEI,mBAHN,CAFsB;KAAxB,MAMO,IAAI6I,GAAJ,EAAS;EACd;EACA0B,IAAAA,YAAY,IAAI,OAAhB,CAAA;KAFK,MAGA,IAAIvK,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;EACtC;EACA;EACA;EACA;EACA;EACA;EACA;EACAuK,IAAAA,YAAY,IAAI,eAAhB,CAAA;EACD,GATM,MASA,CAEN;;EAED,EAAA,IAAIR,OAAO,GAAG,IAAIS,MAAJ,CAAWD,YAAX,EAAyBvE,aAAa,GAAG1H,SAAH,GAAe,GAArD,CAAd,CAAA;EAEA,EAAA,OAAO,CAACyL,OAAD,EAAUC,UAAV,CAAP,CAAA;EACD,CAAA;;EAED,SAASrE,eAAT,CAAyBtD,KAAzB,EAAwC;IACtC,IAAI;MACF,OAAOoI,SAAS,CAACpI,KAAD,CAAhB,CAAA;KADF,CAEE,OAAOuB,KAAP,EAAc;MACdtE,OAAO,CACL,KADK,EAEL,iBAAA,GAAiB+C,KAAjB,GAEeuB,6CAAAA,GAAAA,+DAAAA,IAAAA,YAAAA,GAAAA,KAFf,QAFK,CAAP,CAAA;EAOA,IAAA,OAAOvB,KAAP,CAAA;EACD,GAAA;EACF,CAAA;;EAED,SAASiI,wBAAT,CAAkCjI,KAAlC,EAAiD+H,SAAjD,EAAoE;IAClE,IAAI;MACF,OAAOM,kBAAkB,CAACrI,KAAD,CAAzB,CAAA;KADF,CAEE,OAAOuB,KAAP,EAAc;MACdtE,OAAO,CACL,KADK,EAEL,gCAAgC8K,GAAAA,SAAhC,0DACkB/H,KADlB,GAAA,iDAAA,CAAA,IAAA,kCAAA,GAEqCuB,KAFrC,GAAA,IAAA,CAFK,CAAP,CAAA;EAOA,IAAA,OAAOvB,KAAP,CAAA;EACD,GAAA;EACF,CAAA;EAED;EACA;EACA;;;EACO,SAAS+C,aAAT,CACL/F,QADK,EAEL8F,QAFK,EAGU;EACf,EAAA,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAO9F,QAAP,CAAA;;EAEtB,EAAA,IAAI,CAACA,QAAQ,CAACsL,WAAT,EAAuBzE,CAAAA,UAAvB,CAAkCf,QAAQ,CAACwF,WAAT,EAAlC,CAAL,EAAgE;EAC9D,IAAA,OAAO,IAAP,CAAA;EACD,GALc;EAQf;;;EACA,EAAA,IAAIC,UAAU,GAAGzF,QAAQ,CAAC8B,QAAT,CAAkB,GAAlB,CAAA,GACb9B,QAAQ,CAAC3G,MAAT,GAAkB,CADL,GAEb2G,QAAQ,CAAC3G,MAFb,CAAA;EAGA,EAAA,IAAIqM,QAAQ,GAAGxL,QAAQ,CAACE,MAAT,CAAgBqL,UAAhB,CAAf,CAAA;;EACA,EAAA,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;EAChC;EACA,IAAA,OAAO,IAAP,CAAA;EACD,GAAA;;EAED,EAAA,OAAOxL,QAAQ,CAAC6C,KAAT,CAAe0I,UAAf,KAA8B,GAArC,CAAA;EACD,CAAA;EAED;EACA;EACA;;EACO,SAAStL,OAAT,CAAiBkD,IAAjB,EAA4BF,OAA5B,EAAmD;IACxD,IAAI,CAACE,IAAL,EAAW;EACT;MACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaJ,OAAb,CAAA,CAAA;;MAEpC,IAAI;EACF;EACA;EACA;EACA;EACA;EACA,MAAA,MAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN,CANE;EAQH,KARD,CAQE,OAAOK,CAAP,EAAU,EAAE;EACf,GAAA;EACF,CAAA;EAED;EACA;EACA;EACA;EACA;;EACO,SAASmI,WAAT,CAAqB7L,EAArB,EAA6B8L,YAA7B,EAAuD;EAAA,EAAA,IAA1BA,YAA0B,KAAA,KAAA,CAAA,EAAA;EAA1BA,IAAAA,YAA0B,GAAX,GAAW,CAAA;EAAA,GAAA;;IAC5D,IAAI;EACF1L,IAAAA,QAAQ,EAAE2L,UADR;EAEF9K,IAAAA,MAAM,GAAG,EAFP;EAGFC,IAAAA,IAAI,GAAG,EAAA;KACL,GAAA,OAAOlB,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJ7C,CAAA;EAMA,EAAA,IAAII,QAAQ,GAAG2L,UAAU,GACrBA,UAAU,CAAC9E,UAAX,CAAsB,GAAtB,IACE8E,UADF,GAEEC,eAAe,CAACD,UAAD,EAAaD,YAAb,CAHI,GAIrBA,YAJJ,CAAA;IAMA,OAAO;MACL1L,QADK;EAELa,IAAAA,MAAM,EAAEgL,eAAe,CAAChL,MAAD,CAFlB;MAGLC,IAAI,EAAEgL,aAAa,CAAChL,IAAD,CAAA;KAHrB,CAAA;EAKD,CAAA;;EAED,SAAS8K,eAAT,CAAyBnF,YAAzB,EAA+CiF,YAA/C,EAA6E;EAC3E,EAAA,IAAInE,QAAQ,GAAGmE,YAAY,CAACtK,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAA,CAAiCoG,KAAjC,CAAuC,GAAvC,CAAf,CAAA;EACA,EAAA,IAAIuE,gBAAgB,GAAGtF,YAAY,CAACe,KAAb,CAAmB,GAAnB,CAAvB,CAAA;EAEAuE,EAAAA,gBAAgB,CAAC5E,OAAjB,CAA0B8B,OAAD,IAAa;MACpC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;EACpB;QACA,IAAI1B,QAAQ,CAACpI,MAAT,GAAkB,CAAtB,EAAyBoI,QAAQ,CAACyE,GAAT,EAAA,CAAA;EAC1B,KAHD,MAGO,IAAI/C,OAAO,KAAK,GAAhB,EAAqB;QAC1B1B,QAAQ,CAACxG,IAAT,CAAckI,OAAd,CAAA,CAAA;EACD,KAAA;KANH,CAAA,CAAA;EASA,EAAA,OAAO1B,QAAQ,CAACpI,MAAT,GAAkB,CAAlB,GAAsBoI,QAAQ,CAACjC,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAAlD,CAAA;EACD,CAAA;;EAED,SAAS2G,mBAAT,CACEC,IADF,EAEEC,KAFF,EAGEC,IAHF,EAIEzL,IAJF,EAKE;EACA,EAAA,OACE,oBAAqBuL,GAAAA,IAArB,GACQC,sCAAAA,IAAAA,MAAAA,GAAAA,KADR,GAC0BhM,WAAAA,GAAAA,IAAI,CAACC,SAAL,CACxBO,IADwB,CAD1B,GAAA,oCAAA,CAAA,IAAA,MAAA,GAIQyL,IAJR,GADF,0DAAA,CAAA,GAAA,qEAAA,CAAA;EAQD,CAAA;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACO,SAASC,0BAAT,CAELlG,OAFK,EAES;EACd,EAAA,OAAOA,OAAO,CAAC4C,MAAR,CACL,CAACW,KAAD,EAAQ5K,KAAR,KACEA,KAAK,KAAK,CAAV,IAAgB4K,KAAK,CAAC5E,KAAN,CAAYnE,IAAZ,IAAoB+I,KAAK,CAAC5E,KAAN,CAAYnE,IAAZ,CAAiBxB,MAAjB,GAA0B,CAF3D,CAAP,CAAA;EAID,CAAA;EAED;EACA;EACA;;EACO,SAASmN,SAAT,CACLC,KADK,EAELC,cAFK,EAGLC,gBAHK,EAILC,cAJK,EAKC;EAAA,EAAA,IADNA,cACM,KAAA,KAAA,CAAA,EAAA;EADNA,IAAAA,cACM,GADW,KACX,CAAA;EAAA,GAAA;;EACN,EAAA,IAAI9M,EAAJ,CAAA;;EACA,EAAA,IAAI,OAAO2M,KAAP,KAAiB,QAArB,EAA+B;EAC7B3M,IAAAA,EAAE,GAAGgB,SAAS,CAAC2L,KAAD,CAAd,CAAA;EACD,GAFD,MAEO;MACL3M,EAAE,GAAA,QAAA,CAAA,EAAA,EAAQ2M,KAAR,CAAF,CAAA;MAEAxJ,SAAS,CACP,CAACnD,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAH,CAAYoH,QAAZ,CAAqB,GAArB,CADV,EAEP6E,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,QAAlB,EAA4BrM,EAA5B,CAFZ,CAAT,CAAA;MAIAmD,SAAS,CACP,CAACnD,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAH,CAAYoH,QAAZ,CAAqB,GAArB,CADV,EAEP6E,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,MAAlB,EAA0BrM,EAA1B,CAFZ,CAAT,CAAA;MAIAmD,SAAS,CACP,CAACnD,EAAE,CAACiB,MAAJ,IAAc,CAACjB,EAAE,CAACiB,MAAH,CAAUuG,QAAV,CAAmB,GAAnB,CADR,EAEP6E,mBAAmB,CAAC,GAAD,EAAM,QAAN,EAAgB,MAAhB,EAAwBrM,EAAxB,CAFZ,CAAT,CAAA;EAID,GAAA;;IAED,IAAI+M,WAAW,GAAGJ,KAAK,KAAK,EAAV,IAAgB3M,EAAE,CAACI,QAAH,KAAgB,EAAlD,CAAA;IACA,IAAI2L,UAAU,GAAGgB,WAAW,GAAG,GAAH,GAAS/M,EAAE,CAACI,QAAxC,CAAA;IAEA,IAAI4M,IAAJ,CAxBM;EA2BN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,EAAA,IAAIF,cAAc,IAAIf,UAAU,IAAI,IAApC,EAA0C;EACxCiB,IAAAA,IAAI,GAAGH,gBAAP,CAAA;EACD,GAFD,MAEO;EACL,IAAA,IAAII,kBAAkB,GAAGL,cAAc,CAACrN,MAAf,GAAwB,CAAjD,CAAA;;EAEA,IAAA,IAAIwM,UAAU,CAAC9E,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;QAC/B,IAAIiG,UAAU,GAAGnB,UAAU,CAACnE,KAAX,CAAiB,GAAjB,CAAjB,CAD+B;EAI/B;EACA;;EACA,MAAA,OAAOsF,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAzB,EAA+B;EAC7BA,QAAAA,UAAU,CAACC,KAAX,EAAA,CAAA;EACAF,QAAAA,kBAAkB,IAAI,CAAtB,CAAA;EACD,OAAA;;QAEDjN,EAAE,CAACI,QAAH,GAAc8M,UAAU,CAACxH,IAAX,CAAgB,GAAhB,CAAd,CAAA;EACD,KAfI;EAkBL;;;MACAsH,IAAI,GAAGC,kBAAkB,IAAI,CAAtB,GAA0BL,cAAc,CAACK,kBAAD,CAAxC,GAA+D,GAAtE,CAAA;EACD,GAAA;;IAED,IAAIlM,IAAI,GAAG8K,WAAW,CAAC7L,EAAD,EAAKgN,IAAL,CAAtB,CA3DM;;EA8DN,EAAA,IAAII,wBAAwB,GAC1BrB,UAAU,IAAIA,UAAU,KAAK,GAA7B,IAAoCA,UAAU,CAAC/D,QAAX,CAAoB,GAApB,CADtC,CA9DM;;EAiEN,EAAA,IAAIqF,uBAAuB,GACzB,CAACN,WAAW,IAAIhB,UAAU,KAAK,GAA/B,KAAuCc,gBAAgB,CAAC7E,QAAjB,CAA0B,GAA1B,CADzC,CAAA;;EAEA,EAAA,IACE,CAACjH,IAAI,CAACX,QAAL,CAAc4H,QAAd,CAAuB,GAAvB,CAAD,KACCoF,wBAAwB,IAAIC,uBAD7B,CADF,EAGE;MACAtM,IAAI,CAACX,QAAL,IAAiB,GAAjB,CAAA;EACD,GAAA;;EAED,EAAA,OAAOW,IAAP,CAAA;EACD,CAAA;EAED;EACA;EACA;;EACO,SAASuM,aAAT,CAAuBtN,EAAvB,EAAmD;EACxD;IACA,OAAOA,EAAE,KAAK,EAAP,IAAcA,EAAD,CAAaI,QAAb,KAA0B,EAAvC,GACH,GADG,GAEH,OAAOJ,EAAP,KAAc,QAAd,GACAgB,SAAS,CAAChB,EAAD,CAAT,CAAcI,QADd,GAEAJ,EAAE,CAACI,QAJP,CAAA;EAKD,CAAA;EAED;EACA;EACA;;QACa8G,SAAS,GAAIqG,KAAD,IACvBA,KAAK,CAAC7H,IAAN,CAAW,GAAX,EAAgBlE,OAAhB,CAAwB,QAAxB,EAAkC,GAAlC,EADK;EAGP;EACA;EACA;;QACa2I,iBAAiB,GAAI/J,QAAD,IAC/BA,QAAQ,CAACoB,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAA6BA,CAAAA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,EADK;EAGP;EACA;EACA;;EACO,MAAMyK,eAAe,GAAIhL,MAAD,IAC7B,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACgG,UAAP,CAAkB,GAAlB,CACAhG,GAAAA,MADA,GAEA,GAAA,GAAMA,MALL,CAAA;EAOP;EACA;EACA;;EACO,MAAMiL,aAAa,GAAIhL,IAAD,IAC3B,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAAC+F,UAAL,CAAgB,GAAhB,CAAuB/F,GAAAA,IAAvB,GAA8B,GAAA,GAAMA,IAD5D,CAAA;;EAQP;EACA;EACA;EACA;AACO,QAAMsM,IAAkB,GAAG,SAArBA,IAAqB,CAACC,IAAD,EAAOC,IAAP,EAAqB;EAAA,EAAA,IAAdA,IAAc,KAAA,KAAA,CAAA,EAAA;EAAdA,IAAAA,IAAc,GAAP,EAAO,CAAA;EAAA,GAAA;;EACrD,EAAA,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;EAAEE,IAAAA,MAAM,EAAEF,IAAAA;EAAV,GAA3B,GAA8CA,IAAjE,CAAA;IAEA,IAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd,CAAA;;EACA,EAAA,IAAI,CAACA,OAAO,CAACjI,GAAR,CAAY,cAAZ,CAAL,EAAkC;EAChCiI,IAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,iCAA5B,CAAA,CAAA;EACD,GAAA;;IAED,OAAO,IAAIC,QAAJ,CAAazN,IAAI,CAACC,SAAL,CAAeiN,IAAf,CAAb,EAAA,QAAA,CAAA,EAAA,EACFE,YADE,EAAA;EAELE,IAAAA,OAAAA;KAFF,CAAA,CAAA,CAAA;EAID,EAZM;EAoBA,MAAMI,oBAAN,SAAmC3K,KAAnC,CAAyC,EAAA;EAEzC,MAAM4K,YAAN,CAAmB;EAWxBC,EAAAA,WAAW,CAACV,IAAD,EAAgCE,YAAhC,EAA6D;EAAA,IAAA,IAAA,CAVhES,cAUgE,GAVlC,IAAI7I,GAAJ,EAUkC,CAAA;EAAA,IAAA,IAAA,CANhE8I,WAMgE,GALtE,IAAI9I,GAAJ,EAKsE,CAAA;MAAA,IAFxE+I,CAAAA,YAEwE,GAF/C,EAE+C,CAAA;EACtEnL,IAAAA,SAAS,CACPsK,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACc,KAAK,CAACC,OAAN,CAAcf,IAAd,CAD9B,EAEP,oCAFO,CAAT,CADsE;EAOtE;;EACA,IAAA,IAAIgB,MAAJ,CAAA;EACA,IAAA,IAAA,CAAKC,YAAL,GAAoB,IAAIC,OAAJ,CAAY,CAACrE,CAAD,EAAIsE,CAAJ,KAAWH,MAAM,GAAGG,CAAhC,CAApB,CAAA;EACA,IAAA,IAAA,CAAKC,UAAL,GAAkB,IAAIC,eAAJ,EAAlB,CAAA;;MACA,IAAIC,OAAO,GAAG,MACZN,MAAM,CAAC,IAAIR,oBAAJ,CAAyB,uBAAzB,CAAD,CADR,CAAA;;EAEA,IAAA,IAAA,CAAKe,mBAAL,GAA2B,MACzB,IAAA,CAAKH,UAAL,CAAgBI,MAAhB,CAAuBlK,mBAAvB,CAA2C,OAA3C,EAAoDgK,OAApD,CADF,CAAA;;MAEA,IAAKF,CAAAA,UAAL,CAAgBI,MAAhB,CAAuBnK,gBAAvB,CAAwC,OAAxC,EAAiDiK,OAAjD,CAAA,CAAA;MAEA,IAAKtB,CAAAA,IAAL,GAAYzD,MAAM,CAACjL,OAAP,CAAe0O,IAAf,CAAqBrE,CAAAA,MAArB,CACV,CAAC8F,GAAD,EAAA,IAAA,KAAA;EAAA,MAAA,IAAM,CAACjP,GAAD,EAAMmD,KAAN,CAAN,GAAA,IAAA,CAAA;EAAA,MAAA,OACE4G,MAAM,CAACpF,MAAP,CAAcsK,GAAd,EAAmB;EACjB,QAAA,CAACjP,GAAD,GAAO,IAAA,CAAKkP,YAAL,CAAkBlP,GAAlB,EAAuBmD,KAAvB,CAAA;EADU,OAAnB,CADF,CAAA;OADU,EAKV,EALU,CAAZ,CAAA;;MAQA,IAAI,IAAA,CAAKgM,IAAT,EAAe;EACb;EACA,MAAA,IAAA,CAAKJ,mBAAL,EAAA,CAAA;EACD,KAAA;;MAED,IAAKtB,CAAAA,IAAL,GAAYC,YAAZ,CAAA;EACD,GAAA;;EAEOwB,EAAAA,YAAY,CAClBlP,GADkB,EAElBmD,KAFkB,EAGQ;EAC1B,IAAA,IAAI,EAAEA,KAAK,YAAYuL,OAAnB,CAAJ,EAAiC;EAC/B,MAAA,OAAOvL,KAAP,CAAA;EACD,KAAA;;EAED,IAAA,IAAA,CAAKkL,YAAL,CAAkBnN,IAAlB,CAAuBlB,GAAvB,CAAA,CAAA;EACA,IAAA,IAAA,CAAKmO,cAAL,CAAoBvI,GAApB,CAAwB5F,GAAxB,EAN0B;EAS1B;;EACA,IAAA,IAAIoP,OAAuB,GAAGV,OAAO,CAACW,IAAR,CAAa,CAAClM,KAAD,EAAQ,KAAKsL,YAAb,CAAb,EAAyCa,IAAzC,CAC3B9B,IAAD,IAAU,IAAA,CAAK+B,QAAL,CAAcH,OAAd,EAAuBpP,GAAvB,EAA4B,IAA5B,EAAkCwN,IAAlC,CADkB,EAE3B9I,KAAD,IAAW,IAAA,CAAK6K,QAAL,CAAcH,OAAd,EAAuBpP,GAAvB,EAA4B0E,KAA5B,CAFiB,CAA9B,CAV0B;EAgB1B;;EACA0K,IAAAA,OAAO,CAACI,KAAR,CAAc,MAAM,EAApB,CAAA,CAAA;EAEAzF,IAAAA,MAAM,CAAC0F,cAAP,CAAsBL,OAAtB,EAA+B,UAA/B,EAA2C;EAAEM,MAAAA,GAAG,EAAE,MAAM,IAAA;OAAxD,CAAA,CAAA;EACA,IAAA,OAAON,OAAP,CAAA;EACD,GAAA;;IAEOG,QAAQ,CACdH,OADc,EAEdpP,GAFc,EAGd0E,KAHc,EAId8I,IAJc,EAKL;MACT,IACE,IAAA,CAAKoB,UAAL,CAAgBI,MAAhB,CAAuBW,OAAvB,IACAjL,KAAK,YAAYsJ,oBAFnB,EAGE;EACA,MAAA,IAAA,CAAKe,mBAAL,EAAA,CAAA;EACAhF,MAAAA,MAAM,CAAC0F,cAAP,CAAsBL,OAAtB,EAA+B,QAA/B,EAAyC;EAAEM,QAAAA,GAAG,EAAE,MAAMhL,KAAAA;SAAtD,CAAA,CAAA;EACA,MAAA,OAAOgK,OAAO,CAACF,MAAR,CAAe9J,KAAf,CAAP,CAAA;EACD,KAAA;;EAED,IAAA,IAAA,CAAKyJ,cAAL,CAAoByB,MAApB,CAA2B5P,GAA3B,CAAA,CAAA;;MAEA,IAAI,IAAA,CAAKmP,IAAT,EAAe;EACb;EACA,MAAA,IAAA,CAAKJ,mBAAL,EAAA,CAAA;EACD,KAAA;;EAED,IAAA,IAAIrK,KAAJ,EAAW;EACTqF,MAAAA,MAAM,CAAC0F,cAAP,CAAsBL,OAAtB,EAA+B,QAA/B,EAAyC;EAAEM,QAAAA,GAAG,EAAE,MAAMhL,KAAAA;SAAtD,CAAA,CAAA;EACA,MAAA,IAAA,CAAKmL,IAAL,CAAU,KAAV,EAAiB7P,GAAjB,CAAA,CAAA;EACA,MAAA,OAAO0O,OAAO,CAACF,MAAR,CAAe9J,KAAf,CAAP,CAAA;EACD,KAAA;;EAEDqF,IAAAA,MAAM,CAAC0F,cAAP,CAAsBL,OAAtB,EAA+B,OAA/B,EAAwC;EAAEM,MAAAA,GAAG,EAAE,MAAMlC,IAAAA;OAArD,CAAA,CAAA;EACA,IAAA,IAAA,CAAKqC,IAAL,CAAU,KAAV,EAAiB7P,GAAjB,CAAA,CAAA;EACA,IAAA,OAAOwN,IAAP,CAAA;EACD,GAAA;;EAEOqC,EAAAA,IAAI,CAACF,OAAD,EAAmBG,UAAnB,EAAwC;MAClD,IAAK1B,CAAAA,WAAL,CAAiB9G,OAAjB,CAA0ByI,UAAD,IAAgBA,UAAU,CAACJ,OAAD,EAAUG,UAAV,CAAnD,CAAA,CAAA;EACD,GAAA;;IAEDE,SAAS,CAACpO,EAAD,EAAsD;EAC7D,IAAA,IAAA,CAAKwM,WAAL,CAAiBxI,GAAjB,CAAqBhE,EAArB,CAAA,CAAA;EACA,IAAA,OAAO,MAAM,IAAKwM,CAAAA,WAAL,CAAiBwB,MAAjB,CAAwBhO,EAAxB,CAAb,CAAA;EACD,GAAA;;EAEDqO,EAAAA,MAAM,GAAG;MACP,IAAKrB,CAAAA,UAAL,CAAgBsB,KAAhB,EAAA,CAAA;EACA,IAAA,IAAA,CAAK/B,cAAL,CAAoB7G,OAApB,CAA4B,CAAC6I,CAAD,EAAIC,CAAJ,KAAU,KAAKjC,cAAL,CAAoByB,MAApB,CAA2BQ,CAA3B,CAAtC,CAAA,CAAA;MACA,IAAKP,CAAAA,IAAL,CAAU,IAAV,CAAA,CAAA;EACD,GAAA;;IAEgB,MAAXQ,WAAW,CAACrB,MAAD,EAAsB;MACrC,IAAIW,OAAO,GAAG,KAAd,CAAA;;MACA,IAAI,CAAC,IAAKR,CAAAA,IAAV,EAAgB;EACd,MAAA,IAAIL,OAAO,GAAG,MAAM,IAAA,CAAKmB,MAAL,EAApB,CAAA;;EACAjB,MAAAA,MAAM,CAACnK,gBAAP,CAAwB,OAAxB,EAAiCiK,OAAjC,CAAA,CAAA;EACAa,MAAAA,OAAO,GAAG,MAAM,IAAIjB,OAAJ,CAAa4B,OAAD,IAAa;UACvC,IAAKN,CAAAA,SAAL,CAAgBL,OAAD,IAAa;EAC1BX,UAAAA,MAAM,CAAClK,mBAAP,CAA2B,OAA3B,EAAoCgK,OAApC,CAAA,CAAA;;EACA,UAAA,IAAIa,OAAO,IAAI,IAAKR,CAAAA,IAApB,EAA0B;cACxBmB,OAAO,CAACX,OAAD,CAAP,CAAA;EACD,WAAA;WAJH,CAAA,CAAA;EAMD,OAPe,CAAhB,CAAA;EAQD,KAAA;;EACD,IAAA,OAAOA,OAAP,CAAA;EACD,GAAA;;EAEO,EAAA,IAAJR,IAAI,GAAG;EACT,IAAA,OAAO,IAAKhB,CAAAA,cAAL,CAAoBoC,IAApB,KAA6B,CAApC,CAAA;EACD,GAAA;;EAEgB,EAAA,IAAbC,aAAa,GAAG;MAClBtN,SAAS,CACP,IAAKsK,CAAAA,IAAL,KAAc,IAAd,IAAsB,IAAK2B,CAAAA,IADpB,EAEP,2DAFO,CAAT,CAAA;MAKA,OAAOpF,MAAM,CAACjL,OAAP,CAAe,IAAA,CAAK0O,IAApB,CAA0BrE,CAAAA,MAA1B,CACL,CAAC8F,GAAD,EAAA,KAAA,KAAA;EAAA,MAAA,IAAM,CAACjP,GAAD,EAAMmD,KAAN,CAAN,GAAA,KAAA,CAAA;EAAA,MAAA,OACE4G,MAAM,CAACpF,MAAP,CAAcsK,GAAd,EAAmB;EACjB,QAAA,CAACjP,GAAD,GAAOyQ,oBAAoB,CAACtN,KAAD,CAAA;EADV,OAAnB,CADF,CAAA;OADK,EAKL,EALK,CAAP,CAAA;EAOD,GAAA;;EAEc,EAAA,IAAXuN,WAAW,GAAG;EAChB,IAAA,OAAOpC,KAAK,CAACvB,IAAN,CAAW,IAAA,CAAKoB,cAAhB,CAAP,CAAA;EACD,GAAA;;EA5JuB,CAAA;;EA+J1B,SAASwC,gBAAT,CAA0BxN,KAA1B,EAA+D;IAC7D,OACEA,KAAK,YAAYuL,OAAjB,IAA6BvL,KAAD,CAA0ByN,QAA1B,KAAuC,IADrE,CAAA;EAGD,CAAA;;EAED,SAASH,oBAAT,CAA8BtN,KAA9B,EAA0C;EACxC,EAAA,IAAI,CAACwN,gBAAgB,CAACxN,KAAD,CAArB,EAA8B;EAC5B,IAAA,OAAOA,KAAP,CAAA;EACD,GAAA;;IAED,IAAIA,KAAK,CAAC0N,MAAV,EAAkB;MAChB,MAAM1N,KAAK,CAAC0N,MAAZ,CAAA;EACD,GAAA;;IACD,OAAO1N,KAAK,CAAC2N,KAAb,CAAA;EACD,CAAA;;AAOM,QAAMC,KAAoB,GAAG,SAAvBA,KAAuB,CAACvD,IAAD,EAAOC,IAAP,EAAqB;EAAA,EAAA,IAAdA,IAAc,KAAA,KAAA,CAAA,EAAA;EAAdA,IAAAA,IAAc,GAAP,EAAO,CAAA;EAAA,GAAA;;EACvD,EAAA,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;EAAEE,IAAAA,MAAM,EAAEF,IAAAA;EAAV,GAA3B,GAA8CA,IAAjE,CAAA;EAEA,EAAA,OAAO,IAAIQ,YAAJ,CAAiBT,IAAjB,EAAuBE,YAAvB,CAAP,CAAA;EACD,EAJM;;EAWP;EACA;EACA;EACA;AACO,QAAMsD,QAA0B,GAAG,SAA7BA,QAA6B,CAACnO,GAAD,EAAM4K,IAAN,EAAqB;EAAA,EAAA,IAAfA,IAAe,KAAA,KAAA,CAAA,EAAA;EAAfA,IAAAA,IAAe,GAAR,GAAQ,CAAA;EAAA,GAAA;;IAC7D,IAAIC,YAAY,GAAGD,IAAnB,CAAA;;EACA,EAAA,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;EACpCA,IAAAA,YAAY,GAAG;EAAEC,MAAAA,MAAM,EAAED,YAAAA;OAAzB,CAAA;KADF,MAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;MACrDD,YAAY,CAACC,MAAb,GAAsB,GAAtB,CAAA;EACD,GAAA;;IAED,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd,CAAA;EACAA,EAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwBjL,GAAxB,CAAA,CAAA;EAEA,EAAA,OAAO,IAAIkL,QAAJ,CAAa,IAAb,eACFL,YADE,EAAA;EAELE,IAAAA,OAAAA;KAFF,CAAA,CAAA,CAAA;EAID,EAfM;EAiBP;EACA;EACA;EACA;;EACO,MAAMqD,aAAN,CAAoB;IAOzB/C,WAAW,CACTP,MADS,EAETuD,UAFS,EAGT1D,IAHS,EAIT2D,QAJS,EAKT;EAAA,IAAA,IADAA,QACA,KAAA,KAAA,CAAA,EAAA;EADAA,MAAAA,QACA,GADW,KACX,CAAA;EAAA,KAAA;;MACA,IAAKxD,CAAAA,MAAL,GAAcA,MAAd,CAAA;EACA,IAAA,IAAA,CAAKuD,UAAL,GAAkBA,UAAU,IAAI,EAAhC,CAAA;MACA,IAAKC,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;;MACA,IAAI3D,IAAI,YAAYnK,KAApB,EAA2B;EACzB,MAAA,IAAA,CAAKmK,IAAL,GAAYA,IAAI,CAAC5J,QAAL,EAAZ,CAAA;QACA,IAAKc,CAAAA,KAAL,GAAa8I,IAAb,CAAA;EACD,KAHD,MAGO;QACL,IAAKA,CAAAA,IAAL,GAAYA,IAAZ,CAAA;EACD,KAAA;EACF,GAAA;;EAtBwB,CAAA;EAyB3B;EACA;EACA;EACA;;EACO,SAAS4D,oBAAT,CAA8B1M,KAA9B,EAAkE;IACvE,OACEA,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAACiJ,MAAb,KAAwB,QADxB,IAEA,OAAOjJ,KAAK,CAACwM,UAAb,KAA4B,QAF5B,IAGA,OAAOxM,KAAK,CAACyM,QAAb,KAA0B,SAH1B,IAIA,MAAA,IAAUzM,KALZ,CAAA;EAOD;;EC51CD;EACA;;EAEA;EACA;EACA;;EAgiBA,MAAM2M,uBAA6C,GAAG,CACpD,MADoD,EAEpD,KAFoD,EAGpD,OAHoD,EAIpD,QAJoD,CAAtD,CAAA;EAMA,MAAMC,oBAAoB,GAAG,IAAIhM,GAAJ,CAC3B+L,uBAD2B,CAA7B,CAAA;EAIA,MAAME,sBAAoC,GAAG,CAC3C,KAD2C,EAE3C,GAAGF,uBAFwC,CAA7C,CAAA;EAIA,MAAMG,mBAAmB,GAAG,IAAIlM,GAAJ,CAAoBiM,sBAApB,CAA5B,CAAA;EAEA,MAAME,mBAAmB,GAAG,IAAInM,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAR,CAA5B,CAAA;EACA,MAAMoM,iCAAiC,GAAG,IAAIpM,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,CAA1C,CAAA;AAEO,QAAMqM,eAAyC,GAAG;EACvDxS,EAAAA,KAAK,EAAE,MADgD;EAEvDc,EAAAA,QAAQ,EAAEb,SAF6C;EAGvDwS,EAAAA,UAAU,EAAExS,SAH2C;EAIvDyS,EAAAA,UAAU,EAAEzS,SAJ2C;EAKvD0S,EAAAA,WAAW,EAAE1S,SAL0C;EAMvD2S,EAAAA,QAAQ,EAAE3S,SAAAA;EAN6C,EAAlD;AASA,QAAM4S,YAAmC,GAAG;EACjD7S,EAAAA,KAAK,EAAE,MAD0C;EAEjDqO,EAAAA,IAAI,EAAEpO,SAF2C;EAGjDwS,EAAAA,UAAU,EAAExS,SAHqC;EAIjDyS,EAAAA,UAAU,EAAEzS,SAJqC;EAKjD0S,EAAAA,WAAW,EAAE1S,SALoC;EAMjD2S,EAAAA,QAAQ,EAAE3S,SAAAA;EANuC,EAA5C;AASA,QAAM6S,YAA8B,GAAG;EAC5C9S,EAAAA,KAAK,EAAE,WADqC;EAE5C+S,EAAAA,OAAO,EAAE9S,SAFmC;EAG5C+S,EAAAA,KAAK,EAAE/S,SAHqC;EAI5Ca,EAAAA,QAAQ,EAAEb,SAAAA;EAJkC,EAAvC;EAOP,MAAMgT,kBAAkB,GAAG,+BAA3B,CAAA;EAEA,MAAMC,SAAS,GACb,OAAOtQ,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACU,QAAd,KAA2B,WAD3B,IAEA,OAAOV,MAAM,CAACU,QAAP,CAAgB6P,aAAvB,KAAyC,WAH3C,CAAA;EAIA,MAAMC,QAAQ,GAAG,CAACF,SAAlB;EAGA;EACA;EACA;;EAEA;EACA;EACA;;EACO,SAASG,YAAT,CAAsB/E,IAAtB,EAAgD;IACrDvK,SAAS,CACPuK,IAAI,CAACtI,MAAL,CAAY7F,MAAZ,GAAqB,CADd,EAEP,2DAFO,CAAT,CAAA;EAKA,EAAA,IAAImT,UAAU,GAAGvN,yBAAyB,CAACuI,IAAI,CAACtI,MAAN,CAA1C,CAAA;IACA,IAAIuN,kBAAJ,CAPqD;;EASrD,EAAA,IAAIC,eAAoC,GAAG,IAA3C,CATqD;;EAWrD,EAAA,IAAIvE,WAAW,GAAG,IAAI9I,GAAJ,EAAlB,CAXqD;;EAarD,EAAA,IAAIsN,oBAAmD,GAAG,IAA1D,CAbqD;;EAerD,EAAA,IAAIC,uBAA+D,GAAG,IAAtE,CAfqD;;EAiBrD,EAAA,IAAIC,iBAAmD,GAAG,IAA1D,CAjBqD;EAmBrD;EACA;EACA;EACA;EACA;;EACA,EAAA,IAAIC,qBAAqB,GAAGtF,IAAI,CAACuF,aAAL,IAAsB,IAAlD,CAAA;EAEA,EAAA,IAAIC,cAAc,GAAGlN,WAAW,CAC9B0M,UAD8B,EAE9BhF,IAAI,CAAC/M,OAAL,CAAaT,QAFiB,EAG9BwN,IAAI,CAACxH,QAHyB,CAAhC,CAAA;IAKA,IAAIiN,aAA+B,GAAG,IAAtC,CAAA;;IAEA,IAAID,cAAc,IAAI,IAAtB,EAA4B;EAC1B;EACA;EACA,IAAA,IAAIvO,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;EACtChT,MAAAA,QAAQ,EAAEsN,IAAI,CAAC/M,OAAL,CAAaT,QAAb,CAAsBE,QAAAA;EADM,KAAN,CAAlC,CAAA;MAGA,IAAI;QAAEmG,OAAF;EAAWrB,MAAAA,KAAAA;OAAUmO,GAAAA,sBAAsB,CAACX,UAAD,CAA/C,CAAA;EACAQ,IAAAA,cAAc,GAAG3M,OAAjB,CAAA;EACA4M,IAAAA,aAAa,GAAG;QAAE,CAACjO,KAAK,CAACO,EAAP,GAAYd,KAAAA;OAA9B,CAAA;EACD,GAAA;;IAED,IAAI2O,WAAW,GACb,CAACJ,cAAc,CAAChK,IAAf,CAAqBqK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQsO,MAAnC,CAAD,IAA+C9F,IAAI,CAACuF,aAAL,IAAsB,IADvE,CAAA;EAGA,EAAA,IAAIQ,MAAJ,CAAA;EACA,EAAA,IAAIrU,KAAkB,GAAG;EACvBsU,IAAAA,aAAa,EAAEhG,IAAI,CAAC/M,OAAL,CAAanB,MADL;EAEvBU,IAAAA,QAAQ,EAAEwN,IAAI,CAAC/M,OAAL,CAAaT,QAFA;EAGvBqG,IAAAA,OAAO,EAAE2M,cAHc;MAIvBI,WAJuB;EAKvBK,IAAAA,UAAU,EAAE/B,eALW;EAMvB;MACAgC,qBAAqB,EAAElG,IAAI,CAACuF,aAAL,IAAsB,IAAtB,GAA6B,KAA7B,GAAqC,IAPrC;EAQvBY,IAAAA,kBAAkB,EAAE,KARG;EASvBC,IAAAA,YAAY,EAAE,MATS;MAUvBC,UAAU,EAAGrG,IAAI,CAACuF,aAAL,IAAsBvF,IAAI,CAACuF,aAAL,CAAmBc,UAA1C,IAAyD,EAV9C;MAWvBC,UAAU,EAAGtG,IAAI,CAACuF,aAAL,IAAsBvF,IAAI,CAACuF,aAAL,CAAmBe,UAA1C,IAAyD,IAX9C;MAYvBC,MAAM,EAAGvG,IAAI,CAACuF,aAAL,IAAsBvF,IAAI,CAACuF,aAAL,CAAmBgB,MAA1C,IAAqDd,aAZtC;MAavBe,QAAQ,EAAE,IAAIC,GAAJ,EAba;MAcvBC,QAAQ,EAAE,IAAID,GAAJ,EAAA;EAda,GAAzB,CAhDqD;EAkErD;;EACA,EAAA,IAAIE,aAA4B,GAAGC,cAAa,CAAC7U,GAAjD,CAnEqD;EAsErD;;EACA,EAAA,IAAI8U,yBAAyB,GAAG,KAAhC,CAvEqD;;IA0ErD,IAAIC,2BAAJ,CA1EqD;EA6ErD;;EACA,EAAA,IAAIC,2BAA2B,GAAG,KAAlC,CA9EqD;EAiFrD;EACA;EACA;;EACA,EAAA,IAAIC,sBAAsB,GAAG,KAA7B,CApFqD;EAuFrD;;EACA,EAAA,IAAIC,uBAAiC,GAAG,EAAxC,CAxFqD;EA2FrD;;EACA,EAAA,IAAIC,qBAA+B,GAAG,EAAtC,CA5FqD;;EA+FrD,EAAA,IAAIC,gBAAgB,GAAG,IAAIV,GAAJ,EAAvB,CA/FqD;;EAkGrD,EAAA,IAAIW,kBAAkB,GAAG,CAAzB,CAlGqD;EAqGrD;EACA;;EACA,EAAA,IAAIC,uBAAuB,GAAG,CAAC,CAA/B,CAvGqD;;EA0GrD,EAAA,IAAIC,cAAc,GAAG,IAAIb,GAAJ,EAArB,CA1GqD;;EA6GrD,EAAA,IAAIc,gBAAgB,GAAG,IAAI1P,GAAJ,EAAvB,CA7GqD;;EAgHrD,EAAA,IAAI2P,gBAAgB,GAAG,IAAIf,GAAJ,EAAvB,CAhHqD;EAmHrD;EACA;EACA;;EACA,EAAA,IAAIgB,eAAe,GAAG,IAAIhB,GAAJ,EAAtB,CAtHqD;EAyHrD;;EACA,EAAA,IAAIiB,gBAAgB,GAAG,IAAIjB,GAAJ,EAAvB,CA1HqD;EA6HrD;;EACA,EAAA,IAAIkB,uBAAuB,GAAG,KAA9B,CA9HqD;EAiIrD;EACA;;EACA,EAAA,SAASC,UAAT,GAAsB;EACpB;EACA;EACA1C,IAAAA,eAAe,GAAGlF,IAAI,CAAC/M,OAAL,CAAaiB,MAAb,CAChB,IAAgD,IAAA;QAAA,IAA/C;EAAEpC,QAAAA,MAAM,EAAEkU,aAAV;UAAyBxT,QAAzB;EAAmCqB,QAAAA,KAAAA;SAAY,GAAA,IAAA,CAAA;;EAC9C;EACA;EACA,MAAA,IAAI8T,uBAAJ,EAA6B;EAC3BA,QAAAA,uBAAuB,GAAG,KAA1B,CAAA;EACA,QAAA,OAAA;EACD,OAAA;;QAEDhV,OAAO,CACL+U,gBAAgB,CAAC5E,IAAjB,KAA0B,CAA1B,IAA+BjP,KAAK,IAAI,IADnC,EAEL,oEACE,GAAA,wEADF,GAEE,uEAFF,GAGE,yEAHF,GAIE,iEAJF,GAKE,yDAPG,CAAP,CAAA;QAUA,IAAIgU,UAAU,GAAGC,qBAAqB,CAAC;UACrCC,eAAe,EAAErW,KAAK,CAACc,QADc;EAErCmB,QAAAA,YAAY,EAAEnB,QAFuB;EAGrCwT,QAAAA,aAAAA;EAHqC,OAAD,CAAtC,CAAA;;EAMA,MAAA,IAAI6B,UAAU,IAAIhU,KAAK,IAAI,IAA3B,EAAiC;EAC/B;EACA8T,QAAAA,uBAAuB,GAAG,IAA1B,CAAA;UACA3H,IAAI,CAAC/M,OAAL,CAAae,EAAb,CAAgBH,KAAK,GAAG,CAAC,CAAzB,CAAA,CAH+B;;UAM/BmU,aAAa,CAACH,UAAD,EAAa;EACxBnW,UAAAA,KAAK,EAAE,SADiB;YAExBc,QAFwB;;EAGxBiS,UAAAA,OAAO,GAAG;cACRuD,aAAa,CAACH,UAAD,EAAc;EACzBnW,cAAAA,KAAK,EAAE,YADkB;EAEzB+S,cAAAA,OAAO,EAAE9S,SAFgB;EAGzB+S,cAAAA,KAAK,EAAE/S,SAHkB;EAIzBa,cAAAA,QAAAA;eAJW,CAAb,CADQ;;EAQRwN,YAAAA,IAAI,CAAC/M,OAAL,CAAae,EAAb,CAAgBH,KAAhB,CAAA,CAAA;aAXsB;;EAaxB6Q,UAAAA,KAAK,GAAG;cACNuD,aAAa,CAACJ,UAAD,CAAb,CAAA;EACAK,YAAAA,WAAW,CAAC;gBAAExB,QAAQ,EAAE,IAAID,GAAJ,CAAQV,MAAM,CAACrU,KAAP,CAAagV,QAArB,CAAA;EAAZ,aAAD,CAAX,CAAA;EACD,WAAA;;EAhBuB,SAAb,CAAb,CAAA;EAkBA,QAAA,OAAA;EACD,OAAA;;EAED,MAAA,OAAOyB,eAAe,CAACnC,aAAD,EAAgBxT,QAAhB,CAAtB,CAAA;OApDc,CAAlB,CAHoB;;EA4DpB,IAAA,IAAI,CAACd,KAAK,CAACkU,WAAX,EAAwB;QACtBuC,eAAe,CAACvB,cAAa,CAAC7U,GAAf,EAAoBL,KAAK,CAACc,QAA1B,CAAf,CAAA;EACD,KAAA;;EAED,IAAA,OAAOuT,MAAP,CAAA;EACD,GApMoD;;;EAuMrD,EAAA,SAASqC,OAAT,GAAmB;EACjB,IAAA,IAAIlD,eAAJ,EAAqB;QACnBA,eAAe,EAAA,CAAA;EAChB,KAAA;;EACDvE,IAAAA,WAAW,CAAC0H,KAAZ,EAAA,CAAA;EACAvB,IAAAA,2BAA2B,IAAIA,2BAA2B,CAACrE,KAA5B,EAA/B,CAAA;EACA/Q,IAAAA,KAAK,CAAC8U,QAAN,CAAe3M,OAAf,CAAuB,CAAC+C,CAAD,EAAIrK,GAAJ,KAAY+V,aAAa,CAAC/V,GAAD,CAAhD,CAAA,CAAA;EACAb,IAAAA,KAAK,CAACgV,QAAN,CAAe7M,OAAf,CAAuB,CAAC+C,CAAD,EAAIrK,GAAJ,KAAY0V,aAAa,CAAC1V,GAAD,CAAhD,CAAA,CAAA;EACD,GA/MoD;;;IAkNrD,SAASgQ,SAAT,CAAmBpO,EAAnB,EAAyC;MACvCwM,WAAW,CAACxI,GAAZ,CAAgBhE,EAAhB,CAAA,CAAA;EACA,IAAA,OAAO,MAAMwM,WAAW,CAACwB,MAAZ,CAAmBhO,EAAnB,CAAb,CAAA;EACD,GArNoD;;;IAwNrD,SAAS+T,WAAT,CAAqBK,QAArB,EAA2D;EACzD7W,IAAAA,KAAK,GACAA,QAAAA,CAAAA,EAAAA,EAAAA,KADA,EAEA6W,QAFA,CAAL,CAAA;MAIA5H,WAAW,CAAC9G,OAAZ,CAAqByI,UAAD,IAAgBA,UAAU,CAAC5Q,KAAD,CAA9C,CAAA,CAAA;EACD,GA9NoD;EAiOrD;EACA;EACA;EACA;;;EACA,EAAA,SAAS8W,kBAAT,CACEhW,QADF,EAEE+V,QAFF,EAGQ;EAAA,IAAA,IAAA,eAAA,EAAA,gBAAA,CAAA;;EACN;EACA;EACA;EACA;EACA;EACA,IAAA,IAAIE,cAAc,GAChB/W,KAAK,CAAC4U,UAAN,IAAoB,IAApB,IACA5U,KAAK,CAACuU,UAAN,CAAiB9B,UAAjB,IAA+B,IAD/B,IAEAuE,gBAAgB,CAAChX,KAAK,CAACuU,UAAN,CAAiB9B,UAAlB,CAFhB,IAGAzS,KAAK,CAACuU,UAAN,CAAiBvU,KAAjB,KAA2B,SAH3B,IAIA,oBAAAc,QAAQ,CAACd,KAAT,KAAgBiX,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAAA,CAAAA,WAAhB,MAAgC,IALlC,CAAA;EAOA,IAAA,IAAIrC,UAAJ,CAAA;;MACA,IAAIiC,QAAQ,CAACjC,UAAb,EAAyB;QACvB,IAAIhK,MAAM,CAACsM,IAAP,CAAYL,QAAQ,CAACjC,UAArB,CAAiCzU,CAAAA,MAAjC,GAA0C,CAA9C,EAAiD;UAC/CyU,UAAU,GAAGiC,QAAQ,CAACjC,UAAtB,CAAA;EACD,OAFD,MAEO;EACL;EACAA,QAAAA,UAAU,GAAG,IAAb,CAAA;EACD,OAAA;OANH,MAOO,IAAImC,cAAJ,EAAoB;EACzB;QACAnC,UAAU,GAAG5U,KAAK,CAAC4U,UAAnB,CAAA;EACD,KAHM,MAGA;EACL;EACAA,MAAAA,UAAU,GAAG,IAAb,CAAA;EACD,KA3BK;;;EA8BN,IAAA,IAAID,UAAU,GAAGkC,QAAQ,CAAClC,UAAT,GACbwC,eAAe,CACbnX,KAAK,CAAC2U,UADO,EAEbkC,QAAQ,CAAClC,UAFI,EAGbkC,QAAQ,CAAC1P,OAAT,IAAoB,EAHP,EAIb0P,QAAQ,CAAChC,MAJI,CADF,GAOb7U,KAAK,CAAC2U,UAPV,CA9BM;EAwCN;;EACA,IAAA,KAAK,IAAI,CAAC9T,GAAD,CAAT,IAAkBmV,gBAAlB,EAAoC;QAClCO,aAAa,CAAC1V,GAAD,CAAb,CAAA;EACD,KA3CK;EA8CN;;;EACA,IAAA,IAAI4T,kBAAkB,GACpBU,yBAAyB,KAAK,IAA9B,IACCnV,KAAK,CAACuU,UAAN,CAAiB9B,UAAjB,IAA+B,IAA/B,IACCuE,gBAAgB,CAAChX,KAAK,CAACuU,UAAN,CAAiB9B,UAAlB,CADjB,IAEC,CAAA3R,CAAAA,gBAAAA,GAAAA,QAAQ,CAACd,KAAT,KAAgBiX,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAAA,CAAAA,WAAhB,MAAgC,IAJpC,CAAA;;EAMA,IAAA,IAAI1D,kBAAJ,EAAwB;EACtBD,MAAAA,UAAU,GAAGC,kBAAb,CAAA;EACAA,MAAAA,kBAAkB,GAAGtT,SAArB,CAAA;EACD,KAAA;;EAEDuW,IAAAA,WAAW,cACNK,QADM,EAAA;EACI;QACbjC,UAFS;QAGTD,UAHS;EAITL,MAAAA,aAAa,EAAEW,aAJN;QAKTnU,QALS;EAMToT,MAAAA,WAAW,EAAE,IANJ;EAOTK,MAAAA,UAAU,EAAE/B,eAPH;EAQTkC,MAAAA,YAAY,EAAE,MARL;EASTF,MAAAA,qBAAqB,EAAE4C,sBAAsB,CAC3CtW,QAD2C,EAE3C+V,QAAQ,CAAC1P,OAAT,IAAoBnH,KAAK,CAACmH,OAFiB,CATpC;QAaTsN,kBAbS;EAcTO,MAAAA,QAAQ,EAAE,IAAID,GAAJ,CAAQ/U,KAAK,CAACgV,QAAd,CAAA;OAdZ,CAAA,CAAA,CAAA;;MAiBA,IAAIK,2BAAJ,EAAiC,CAAjC,MAEO,IAAIJ,aAAa,KAAKC,cAAa,CAAC7U,GAApC,EAAyC,CAAzC,MAEA,IAAI4U,aAAa,KAAKC,cAAa,CAAClT,IAApC,EAA0C;QAC/CsM,IAAI,CAAC/M,OAAL,CAAaQ,IAAb,CAAkBjB,QAAlB,EAA4BA,QAAQ,CAACd,KAArC,CAAA,CAAA;EACD,KAFM,MAEA,IAAIiV,aAAa,KAAKC,cAAa,CAAC7S,OAApC,EAA6C;QAClDiM,IAAI,CAAC/M,OAAL,CAAaa,OAAb,CAAqBtB,QAArB,EAA+BA,QAAQ,CAACd,KAAxC,CAAA,CAAA;EACD,KAnFK;;;MAsFNiV,aAAa,GAAGC,cAAa,CAAC7U,GAA9B,CAAA;EACA8U,IAAAA,yBAAyB,GAAG,KAA5B,CAAA;EACAE,IAAAA,2BAA2B,GAAG,KAA9B,CAAA;EACAC,IAAAA,sBAAsB,GAAG,KAAzB,CAAA;EACAC,IAAAA,uBAAuB,GAAG,EAA1B,CAAA;EACAC,IAAAA,qBAAqB,GAAG,EAAxB,CAAA;EACD,GApUoD;EAuUrD;;;EACA,EAAA,eAAe6B,QAAf,CACEzW,EADF,EAEE0W,IAFF,EAGiB;EACf,IAAA,IAAI,OAAO1W,EAAP,KAAc,QAAlB,EAA4B;EAC1B0N,MAAAA,IAAI,CAAC/M,OAAL,CAAae,EAAb,CAAgB1B,EAAhB,CAAA,CAAA;EACA,MAAA,OAAA;EACD,KAAA;;MAED,IAAI;QAAEe,IAAF;QAAQ4V,UAAR;EAAoBhS,MAAAA,KAAAA;EAApB,KAAA,GAA8BiS,wBAAwB,CAAC5W,EAAD,EAAK0W,IAAL,CAA1D,CAAA;EAEA,IAAA,IAAIjB,eAAe,GAAGrW,KAAK,CAACc,QAA5B,CAAA;EACA,IAAA,IAAImB,YAAY,GAAGlB,cAAc,CAACf,KAAK,CAACc,QAAP,EAAiBa,IAAjB,EAAuB2V,IAAI,IAAIA,IAAI,CAACtX,KAApC,CAAjC,CATe;EAYf;EACA;EACA;EACA;;MACAiC,YAAY,GAAA,QAAA,CAAA,EAAA,EACPA,YADO,EAEPqM,IAAI,CAAC/M,OAAL,CAAaG,cAAb,CAA4BO,YAA5B,CAFO,CAAZ,CAAA;EAKA,IAAA,IAAIwV,WAAW,GAAGH,IAAI,IAAIA,IAAI,CAAClV,OAAL,IAAgB,IAAxB,GAA+BkV,IAAI,CAAClV,OAApC,GAA8CnC,SAAhE,CAAA;EAEA,IAAA,IAAIqU,aAAa,GAAGY,cAAa,CAAClT,IAAlC,CAAA;;MAEA,IAAIyV,WAAW,KAAK,IAApB,EAA0B;QACxBnD,aAAa,GAAGY,cAAa,CAAC7S,OAA9B,CAAA;EACD,KAFD,MAEO,IAAIoV,WAAW,KAAK,KAApB,EAA2B,CAA3B,MAEA,IACLF,UAAU,IAAI,IAAd,IACAP,gBAAgB,CAACO,UAAU,CAAC9E,UAAZ,CADhB,IAEA8E,UAAU,CAAC7E,UAAX,KAA0B1S,KAAK,CAACc,QAAN,CAAeE,QAAf,GAA0BhB,KAAK,CAACc,QAAN,CAAee,MAH9D,EAIL;EACA;EACA;EACA;EACA;QACAyS,aAAa,GAAGY,cAAa,CAAC7S,OAA9B,CAAA;EACD,KAAA;;EAED,IAAA,IAAIoS,kBAAkB,GACpB6C,IAAI,IAAI,oBAAwBA,IAAAA,IAAhC,GACIA,IAAI,CAAC7C,kBAAL,KAA4B,IADhC,GAEIxU,SAHN,CAAA;MAKA,IAAIkW,UAAU,GAAGC,qBAAqB,CAAC;QACrCC,eADqC;QAErCpU,YAFqC;EAGrCqS,MAAAA,aAAAA;EAHqC,KAAD,CAAtC,CAAA;;EAKA,IAAA,IAAI6B,UAAJ,EAAgB;EACd;QACAG,aAAa,CAACH,UAAD,EAAa;EACxBnW,QAAAA,KAAK,EAAE,SADiB;EAExBc,QAAAA,QAAQ,EAAEmB,YAFc;;EAGxB8Q,QAAAA,OAAO,GAAG;YACRuD,aAAa,CAACH,UAAD,EAAc;EACzBnW,YAAAA,KAAK,EAAE,YADkB;EAEzB+S,YAAAA,OAAO,EAAE9S,SAFgB;EAGzB+S,YAAAA,KAAK,EAAE/S,SAHkB;EAIzBa,YAAAA,QAAQ,EAAEmB,YAAAA;aAJC,CAAb,CADQ;;EAQRoV,UAAAA,QAAQ,CAACzW,EAAD,EAAK0W,IAAL,CAAR,CAAA;WAXsB;;EAaxBtE,QAAAA,KAAK,GAAG;YACNuD,aAAa,CAACJ,UAAD,CAAb,CAAA;EACAK,UAAAA,WAAW,CAAC;EAAExB,YAAAA,QAAQ,EAAE,IAAID,GAAJ,CAAQ/U,KAAK,CAACgV,QAAd,CAAA;EAAZ,WAAD,CAAX,CAAA;EACD,SAAA;;EAhBuB,OAAb,CAAb,CAAA;EAkBA,MAAA,OAAA;EACD,KAAA;;EAED,IAAA,OAAO,MAAMyB,eAAe,CAACnC,aAAD,EAAgBrS,YAAhB,EAA8B;QACxDsV,UADwD;EAExD;EACA;EACAG,MAAAA,YAAY,EAAEnS,KAJ0C;QAKxDkP,kBALwD;EAMxDrS,MAAAA,OAAO,EAAEkV,IAAI,IAAIA,IAAI,CAAClV,OAAAA;EANkC,KAA9B,CAA5B,CAAA;EAQD,GA7ZoD;EAgarD;EACA;;;EACA,EAAA,SAASuV,UAAT,GAAsB;MACpBC,oBAAoB,EAAA,CAAA;EACpBpB,IAAAA,WAAW,CAAC;EAAE9B,MAAAA,YAAY,EAAE,SAAA;OAAjB,CAAX,CAFoB;EAKpB;;EACA,IAAA,IAAI1U,KAAK,CAACuU,UAAN,CAAiBvU,KAAjB,KAA2B,YAA/B,EAA6C;EAC3C,MAAA,OAAA;EACD,KARmB;EAWpB;EACA;;;EACA,IAAA,IAAIA,KAAK,CAACuU,UAAN,CAAiBvU,KAAjB,KAA2B,MAA/B,EAAuC;QACrCyW,eAAe,CAACzW,KAAK,CAACsU,aAAP,EAAsBtU,KAAK,CAACc,QAA5B,EAAsC;EACnD+W,QAAAA,8BAA8B,EAAE,IAAA;EADmB,OAAtC,CAAf,CAAA;EAGA,MAAA,OAAA;EACD,KAlBmB;EAqBpB;EACA;;;EACApB,IAAAA,eAAe,CACbxB,aAAa,IAAIjV,KAAK,CAACsU,aADV,EAEbtU,KAAK,CAACuU,UAAN,CAAiBzT,QAFJ,EAGb;QAAEgX,kBAAkB,EAAE9X,KAAK,CAACuU,UAAAA;EAA5B,KAHa,CAAf,CAAA;EAKD,GA9boD;EAicrD;EACA;;;EACA,EAAA,eAAekC,eAAf,CACEnC,aADF,EAEExT,QAFF,EAGEwW,IAHF,EAWiB;EACf;EACA;EACA;EACAlC,IAAAA,2BAA2B,IAAIA,2BAA2B,CAACrE,KAA5B,EAA/B,CAAA;EACAqE,IAAAA,2BAA2B,GAAG,IAA9B,CAAA;EACAH,IAAAA,aAAa,GAAGX,aAAhB,CAAA;MACAe,2BAA2B,GACzB,CAACiC,IAAI,IAAIA,IAAI,CAACO,8BAAd,MAAkD,IADpD,CAPe;EAWf;;MACAE,kBAAkB,CAAC/X,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACmH,OAAvB,CAAlB,CAAA;MACAgO,yBAAyB,GAAG,CAACmC,IAAI,IAAIA,IAAI,CAAC7C,kBAAd,MAAsC,IAAlE,CAAA;EAEA,IAAA,IAAIuD,WAAW,GAAGzE,kBAAkB,IAAID,UAAxC,CAAA;EACA,IAAA,IAAI2E,iBAAiB,GAAGX,IAAI,IAAIA,IAAI,CAACQ,kBAArC,CAAA;EACA,IAAA,IAAI3Q,OAAO,GAAGP,WAAW,CAACoR,WAAD,EAAclX,QAAd,EAAwBwN,IAAI,CAACxH,QAA7B,CAAzB,CAjBe;;MAoBf,IAAI,CAACK,OAAL,EAAc;EACZ,MAAA,IAAI5B,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;UAAEhT,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;EAArB,OAAN,CAAlC,CAAA;QACA,IAAI;EAAEmG,QAAAA,OAAO,EAAE+Q,eAAX;EAA4BpS,QAAAA,KAAAA;EAA5B,OAAA,GACFmO,sBAAsB,CAAC+D,WAAD,CADxB,CAFY;;QAKZG,qBAAqB,EAAA,CAAA;QACrBrB,kBAAkB,CAAChW,QAAD,EAAW;EAC3BqG,QAAAA,OAAO,EAAE+Q,eADkB;EAE3BvD,QAAAA,UAAU,EAAE,EAFe;EAG3BE,QAAAA,MAAM,EAAE;YACN,CAAC/O,KAAK,CAACO,EAAP,GAAYd,KAAAA;EADN,SAAA;EAHmB,OAAX,CAAlB,CAAA;EAOA,MAAA,OAAA;EACD,KAlCc;EAqCf;EACA;;;MACA,IACE6S,gBAAgB,CAACpY,KAAK,CAACc,QAAP,EAAiBA,QAAjB,CAAhB,IACA,EAAEwW,IAAI,IAAIA,IAAI,CAACC,UAAb,IAA2BP,gBAAgB,CAACM,IAAI,CAACC,UAAL,CAAgB9E,UAAjB,CAA7C,CAFF,EAGE;QACAqE,kBAAkB,CAAChW,QAAD,EAAW;EAAEqG,QAAAA,OAAAA;EAAF,OAAX,CAAlB,CAAA;EACA,MAAA,OAAA;EACD,KA7Cc;;;MAgDfiO,2BAA2B,GAAG,IAAI1F,eAAJ,EAA9B,CAAA;EACA,IAAA,IAAI2I,OAAO,GAAGC,uBAAuB,CACnChK,IAAI,CAAC/M,OAD8B,EAEnCT,QAFmC,EAGnCsU,2BAA2B,CAACvF,MAHO,EAInCyH,IAAI,IAAIA,IAAI,CAACC,UAJsB,CAArC,CAAA;EAMA,IAAA,IAAIgB,iBAAJ,CAAA;EACA,IAAA,IAAIb,YAAJ,CAAA;;EAEA,IAAA,IAAIJ,IAAI,IAAIA,IAAI,CAACI,YAAjB,EAA+B;EAC7B;EACA;EACA;EACA;EACAA,MAAAA,YAAY,GAAG;UACb,CAACc,mBAAmB,CAACrR,OAAD,CAAnB,CAA6BrB,KAA7B,CAAmCO,EAApC,GAAyCiR,IAAI,CAACI,YAAAA;SADhD,CAAA;EAGD,KARD,MAQO,IACLJ,IAAI,IACJA,IAAI,CAACC,UADL,IAEAP,gBAAgB,CAACM,IAAI,CAACC,UAAL,CAAgB9E,UAAjB,CAHX,EAIL;EACA;EACA,MAAA,IAAIgG,YAAY,GAAG,MAAMC,YAAY,CACnCL,OADmC,EAEnCvX,QAFmC,EAGnCwW,IAAI,CAACC,UAH8B,EAInCpQ,OAJmC,EAKnC;UAAE/E,OAAO,EAAEkV,IAAI,CAAClV,OAAAA;EAAhB,OALmC,CAArC,CAAA;;QAQA,IAAIqW,YAAY,CAACE,cAAjB,EAAiC;EAC/B,QAAA,OAAA;EACD,OAAA;;QAEDJ,iBAAiB,GAAGE,YAAY,CAACF,iBAAjC,CAAA;QACAb,YAAY,GAAGe,YAAY,CAACG,kBAA5B,CAAA;;EAEA,MAAA,IAAIrE,UAAuC,GAAA,QAAA,CAAA;EACzCvU,QAAAA,KAAK,EAAE,SADkC;EAEzCc,QAAAA,QAAAA;SACGwW,EAAAA,IAAI,CAACC,UAHiC,CAA3C,CAAA;;QAKAU,iBAAiB,GAAG1D,UAApB,CAtBA;;EAyBA8D,MAAAA,OAAO,GAAG,IAAIQ,OAAJ,CAAYR,OAAO,CAAC3U,GAApB,EAAyB;UAAEmM,MAAM,EAAEwI,OAAO,CAACxI,MAAAA;EAAlB,OAAzB,CAAV,CAAA;EACD,KAhGc;;;MAmGf,IAAI;QAAE8I,cAAF;QAAkBhE,UAAlB;EAA8BE,MAAAA,MAAAA;OAAW,GAAA,MAAMiE,aAAa,CAC9DT,OAD8D,EAE9DvX,QAF8D,EAG9DqG,OAH8D,EAI9D8Q,iBAJ8D,EAK9DX,IAAI,IAAIA,IAAI,CAACC,UALiD,EAM9DD,IAAI,IAAIA,IAAI,CAAClV,OANiD,EAO9DmW,iBAP8D,EAQ9Db,YAR8D,CAAhE,CAAA;;EAWA,IAAA,IAAIiB,cAAJ,EAAoB;EAClB,MAAA,OAAA;EACD,KAhHc;EAmHf;EACA;;;EACAvD,IAAAA,2BAA2B,GAAG,IAA9B,CAAA;EAEA0B,IAAAA,kBAAkB,CAAChW,QAAD,EAAA,QAAA,CAAA;EAChBqG,MAAAA,OAAAA;EADgB,KAAA,EAEZoR,iBAAiB,GAAG;EAAE3D,MAAAA,UAAU,EAAE2D,iBAAAA;EAAd,KAAH,GAAuC,EAF5C,EAAA;QAGhB5D,UAHgB;EAIhBE,MAAAA,MAAAA;OAJF,CAAA,CAAA,CAAA;EAMD,GA3kBoD;EA8kBrD;;;IACA,eAAe6D,YAAf,CACEL,OADF,EAEEvX,QAFF,EAGEyW,UAHF,EAIEpQ,OAJF,EAKEmQ,IALF,EAM+B;EAC7BM,IAAAA,oBAAoB,GADS;;EAI7B,IAAA,IAAIrD,UAA0C,GAAA,QAAA,CAAA;EAC5CvU,MAAAA,KAAK,EAAE,YADqC;EAE5Cc,MAAAA,QAAAA;EAF4C,KAAA,EAGzCyW,UAHyC,CAA9C,CAAA;;EAKAf,IAAAA,WAAW,CAAC;EAAEjC,MAAAA,UAAAA;OAAH,CAAX,CAT6B;;EAY7B,IAAA,IAAIxL,MAAJ,CAAA;EACA,IAAA,IAAIgQ,WAAW,GAAGC,cAAc,CAAC7R,OAAD,EAAUrG,QAAV,CAAhC,CAAA;;EAEA,IAAA,IAAI,CAACiY,WAAW,CAACjT,KAAZ,CAAkB1F,MAAvB,EAA+B;EAC7B2I,MAAAA,MAAM,GAAG;UACPkQ,IAAI,EAAErT,UAAU,CAACL,KADV;EAEPA,QAAAA,KAAK,EAAEyO,sBAAsB,CAAC,GAAD,EAAM;YACjCkF,MAAM,EAAEb,OAAO,CAACa,MADiB;YAEjClY,QAAQ,EAAEF,QAAQ,CAACE,QAFc;EAGjCmY,UAAAA,OAAO,EAAEJ,WAAW,CAACjT,KAAZ,CAAkBO,EAAAA;WAHA,CAAA;SAF/B,CAAA;EAQD,KATD,MASO;EACL0C,MAAAA,MAAM,GAAG,MAAMqQ,kBAAkB,CAC/B,QAD+B,EAE/Bf,OAF+B,EAG/BU,WAH+B,EAI/B5R,OAJ+B,EAK/BkN,MAAM,CAACvN,QALwB,CAAjC,CAAA;;EAQA,MAAA,IAAIuR,OAAO,CAACxI,MAAR,CAAeW,OAAnB,EAA4B;UAC1B,OAAO;EAAEmI,UAAAA,cAAc,EAAE,IAAA;WAAzB,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,IAAIU,gBAAgB,CAACtQ,MAAD,CAApB,EAA8B;EAC5B,MAAA,IAAI3G,OAAJ,CAAA;;EACA,MAAA,IAAIkV,IAAI,IAAIA,IAAI,CAAClV,OAAL,IAAgB,IAA5B,EAAkC;UAChCA,OAAO,GAAGkV,IAAI,CAAClV,OAAf,CAAA;EACD,OAFD,MAEO;EACL;EACA;EACA;EACAA,QAAAA,OAAO,GACL2G,MAAM,CAACjI,QAAP,KAAoBd,KAAK,CAACc,QAAN,CAAeE,QAAf,GAA0BhB,KAAK,CAACc,QAAN,CAAee,MAD/D,CAAA;EAED,OAAA;;EACD,MAAA,MAAMyX,uBAAuB,CAACtZ,KAAD,EAAQ+I,MAAR,EAAgB;UAAEwO,UAAF;EAAcnV,QAAAA,OAAAA;EAAd,OAAhB,CAA7B,CAAA;QACA,OAAO;EAAEuW,QAAAA,cAAc,EAAE,IAAA;SAAzB,CAAA;EACD,KAAA;;EAED,IAAA,IAAIY,aAAa,CAACxQ,MAAD,CAAjB,EAA2B;EACzB;EACA;EACA,MAAA,IAAIyQ,aAAa,GAAGhB,mBAAmB,CAACrR,OAAD,EAAU4R,WAAW,CAACjT,KAAZ,CAAkBO,EAA5B,CAAvC,CAHyB;EAMzB;EACA;EACA;;QACA,IAAI,CAACiR,IAAI,IAAIA,IAAI,CAAClV,OAAd,MAA2B,IAA/B,EAAqC;UACnC6S,aAAa,GAAGC,cAAa,CAAClT,IAA9B,CAAA;EACD,OAAA;;QAED,OAAO;EACL;EACAuW,QAAAA,iBAAiB,EAAE,EAFd;EAGLK,QAAAA,kBAAkB,EAAE;EAAE,UAAA,CAACY,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,GAA0B0C,MAAM,CAACxD,KAAAA;EAAnC,SAAA;SAHtB,CAAA;EAKD,KAAA;;EAED,IAAA,IAAIkU,gBAAgB,CAAC1Q,MAAD,CAApB,EAA8B;QAC5B,MAAMiL,sBAAsB,CAAC,GAAD,EAAM;EAAEiF,QAAAA,IAAI,EAAE,cAAA;EAAR,OAAN,CAA5B,CAAA;EACD,KAAA;;MAED,OAAO;EACLV,MAAAA,iBAAiB,EAAE;EAAE,QAAA,CAACQ,WAAW,CAACjT,KAAZ,CAAkBO,EAAnB,GAAwB0C,MAAM,CAACsF,IAAAA;EAAjC,OAAA;OADrB,CAAA;EAGD,GArqBoD;EAwqBrD;;;EACA,EAAA,eAAeyK,aAAf,CACET,OADF,EAEEvX,QAFF,EAGEqG,OAHF,EAIE2Q,kBAJF,EAKEP,UALF,EAMEnV,OANF,EAOEmW,iBAPF,EAQEb,YARF,EASgC;EAC9B;MACA,IAAIO,iBAAiB,GAAGH,kBAAxB,CAAA;;MACA,IAAI,CAACG,iBAAL,EAAwB;EACtB,MAAA,IAAI1D,UAAuC,GAAA,QAAA,CAAA;EACzCvU,QAAAA,KAAK,EAAE,SADkC;UAEzCc,QAFyC;EAGzC2R,QAAAA,UAAU,EAAExS,SAH6B;EAIzCyS,QAAAA,UAAU,EAAEzS,SAJ6B;EAKzC0S,QAAAA,WAAW,EAAE1S,SAL4B;EAMzC2S,QAAAA,QAAQ,EAAE3S,SAAAA;EAN+B,OAAA,EAOtCsX,UAPsC,CAA3C,CAAA;;EASAU,MAAAA,iBAAiB,GAAG1D,UAApB,CAAA;EACD,KAd6B;EAiB9B;;;MACA,IAAImF,gBAAgB,GAAGnC,UAAU,GAC7BA,UAD6B,GAE7BU,iBAAiB,CAACxF,UAAlB,IACAwF,iBAAiB,CAACvF,UADlB,IAEAuF,iBAAiB,CAACrF,QAFlB,IAGAqF,iBAAiB,CAACtF,WAHlB,GAIA;QACEF,UAAU,EAAEwF,iBAAiB,CAACxF,UADhC;QAEEC,UAAU,EAAEuF,iBAAiB,CAACvF,UAFhC;QAGEE,QAAQ,EAAEqF,iBAAiB,CAACrF,QAH9B;QAIED,WAAW,EAAEsF,iBAAiB,CAACtF,WAAAA;EAJjC,KAJA,GAUA1S,SAZJ,CAAA;EAcA,IAAA,IAAI+X,WAAW,GAAGzE,kBAAkB,IAAID,UAAxC,CAAA;EACA,IAAA,IAAI,CAACqG,aAAD,EAAgBC,oBAAhB,CAAA,GAAwCC,gBAAgB,CAC1DvL,IAAI,CAAC/M,OADqD,EAE1DvB,KAF0D,EAG1DmH,OAH0D,EAI1DuS,gBAJ0D,EAK1D5Y,QAL0D,EAM1DwU,sBAN0D,EAO1DC,uBAP0D,EAQ1DC,qBAR0D,EAS1DM,gBAT0D,EAU1DkC,WAV0D,EAW1D1J,IAAI,CAACxH,QAXqD,EAY1DyR,iBAZ0D,EAa1Db,YAb0D,CAA5D,CAjC8B;EAkD9B;EACA;;EACAS,IAAAA,qBAAqB,CAClBgB,OAAD,IACE,EAAEhS,OAAO,IAAIA,OAAO,CAAC2C,IAAR,CAAcqK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAe8S,OAAnC,CAAb,CAAA,IACCQ,aAAa,IAAIA,aAAa,CAAC7P,IAAd,CAAoBqK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAe8S,OAAzC,CAHD,CAArB,CApD8B;;MA2D9B,IAAIQ,aAAa,CAACxZ,MAAd,KAAyB,CAAzB,IAA8ByZ,oBAAoB,CAACzZ,MAArB,KAAgC,CAAlE,EAAqE;EACnE2W,MAAAA,kBAAkB,CAAChW,QAAD,EAAA,QAAA,CAAA;UAChBqG,OADgB;EAEhBwN,QAAAA,UAAU,EAAE,EAFI;EAGhB;UACAE,MAAM,EAAE6C,YAAY,IAAI,IAAA;EAJR,OAAA,EAKZa,iBAAiB,GAAG;EAAE3D,QAAAA,UAAU,EAAE2D,iBAAAA;SAAjB,GAAuC,EAL5C,CAAlB,CAAA,CAAA;QAOA,OAAO;EAAEI,QAAAA,cAAc,EAAE,IAAA;SAAzB,CAAA;EACD,KApE6B;EAuE9B;EACA;EACA;;;MACA,IAAI,CAACtD,2BAAL,EAAkC;EAChCuE,MAAAA,oBAAoB,CAACzR,OAArB,CAA8B2R,EAAD,IAAQ;UACnC,IAAIC,OAAO,GAAG/Z,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmBuJ,EAAE,CAACjZ,GAAtB,CAAd,CAAA;EACA,QAAA,IAAImZ,mBAA6C,GAAG;EAClDha,UAAAA,KAAK,EAAE,SAD2C;EAElDqO,UAAAA,IAAI,EAAE0L,OAAO,IAAIA,OAAO,CAAC1L,IAFyB;EAGlDoE,UAAAA,UAAU,EAAExS,SAHsC;EAIlDyS,UAAAA,UAAU,EAAEzS,SAJsC;EAKlD0S,UAAAA,WAAW,EAAE1S,SALqC;EAMlD2S,UAAAA,QAAQ,EAAE3S,SANwC;YAOlD,2BAA6B,EAAA,IAAA;WAP/B,CAAA;UASAD,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmBmL,EAAE,CAACjZ,GAAtB,EAA2BmZ,mBAA3B,CAAA,CAAA;SAXF,CAAA,CAAA;EAaA,MAAA,IAAIpF,UAAU,GAAG2D,iBAAiB,IAAIvY,KAAK,CAAC4U,UAA5C,CAAA;QACA4B,WAAW,CAAA,QAAA,CAAA;EACTjC,QAAAA,UAAU,EAAE0D,iBAAAA;SACRrD,EAAAA,UAAU,GACVhK,MAAM,CAACsM,IAAP,CAAYtC,UAAZ,CAAwBzU,CAAAA,MAAxB,KAAmC,CAAnC,GACE;EAAEyU,QAAAA,UAAU,EAAE,IAAA;EAAd,OADF,GAEE;EAAEA,QAAAA,UAAAA;SAHM,GAIV,EANK,EAOLgF,oBAAoB,CAACzZ,MAArB,GAA8B,CAA9B,GACA;EAAE2U,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;SADZ,GAEA,EATK,CAAX,CAAA,CAAA;EAWD,KAAA;;MAEDa,uBAAuB,GAAG,EAAED,kBAA5B,CAAA;EACAkE,IAAAA,oBAAoB,CAACzR,OAArB,CAA8B2R,EAAD,IAC3BrE,gBAAgB,CAAC9G,GAAjB,CAAqBmL,EAAE,CAACjZ,GAAxB,EAA6BuU,2BAA7B,CADF,CAAA,CAAA;MAIA,IAAI;QAAE6E,OAAF;QAAWC,aAAX;EAA0BC,MAAAA,cAAAA;EAA1B,KAAA,GACF,MAAMC,8BAA8B,CAClCpa,KAAK,CAACmH,OAD4B,EAElCA,OAFkC,EAGlCwS,aAHkC,EAIlCC,oBAJkC,EAKlCvB,OALkC,CADtC,CAAA;;EASA,IAAA,IAAIA,OAAO,CAACxI,MAAR,CAAeW,OAAnB,EAA4B;QAC1B,OAAO;EAAEmI,QAAAA,cAAc,EAAE,IAAA;SAAzB,CAAA;EACD,KAtH6B;EAyH9B;EACA;;;EACAiB,IAAAA,oBAAoB,CAACzR,OAArB,CAA8B2R,EAAD,IAAQrE,gBAAgB,CAAChF,MAAjB,CAAwBqJ,EAAE,CAACjZ,GAA3B,CAArC,EA3H8B;;EA8H9B,IAAA,IAAIgR,QAAQ,GAAGwI,YAAY,CAACJ,OAAD,CAA3B,CAAA;;EACA,IAAA,IAAIpI,QAAJ,EAAc;EACZ,MAAA,MAAMyH,uBAAuB,CAACtZ,KAAD,EAAQ6R,QAAR,EAAkB;EAAEzP,QAAAA,OAAAA;EAAF,OAAlB,CAA7B,CAAA;QACA,OAAO;EAAEuW,QAAAA,cAAc,EAAE,IAAA;SAAzB,CAAA;EACD,KAlI6B;;;MAqI9B,IAAI;QAAEhE,UAAF;EAAcE,MAAAA,MAAAA;EAAd,KAAA,GAAyByF,iBAAiB,CAC5Cta,KAD4C,EAE5CmH,OAF4C,EAG5CwS,aAH4C,EAI5CO,aAJ4C,EAK5CxC,YAL4C,EAM5CkC,oBAN4C,EAO5CO,cAP4C,EAQ5CpE,eAR4C,CAA9C,CArI8B;;EAiJ9BA,IAAAA,eAAe,CAAC5N,OAAhB,CAAwB,CAACoS,YAAD,EAAepB,OAAf,KAA2B;EACjDoB,MAAAA,YAAY,CAAC1J,SAAb,CAAwBL,OAAD,IAAa;EAClC;EACA;EACA;EACA,QAAA,IAAIA,OAAO,IAAI+J,YAAY,CAACvK,IAA5B,EAAkC;YAChC+F,eAAe,CAACtF,MAAhB,CAAuB0I,OAAvB,CAAA,CAAA;EACD,SAAA;SANH,CAAA,CAAA;OADF,CAAA,CAAA;MAWAqB,sBAAsB,EAAA,CAAA;EACtB,IAAA,IAAIC,kBAAkB,GAAGC,oBAAoB,CAAC/E,uBAAD,CAA7C,CAAA;EAEA,IAAA,OAAA,QAAA,CAAA;QACEhB,UADF;EAEEE,MAAAA,MAAAA;EAFF,KAAA,EAGM4F,kBAAkB,IAAIb,oBAAoB,CAACzZ,MAArB,GAA8B,CAApD,GACA;EAAE2U,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;EAAZ,KADA,GAEA,EALN,CAAA,CAAA;EAOD,GAAA;;IAED,SAAS6F,UAAT,CAAiC9Z,GAAjC,EAA8D;MAC5D,OAAOb,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmB1P,GAAnB,KAA2BgS,YAAlC,CAAA;EACD,GA51BoD;;;IA+1BrD,SAAS+H,KAAT,CACE/Z,GADF,EAEEsY,OAFF,EAGE3V,IAHF,EAIE8T,IAJF,EAKE;EACA,IAAA,IAAIlE,QAAJ,EAAc;EACZ,MAAA,MAAM,IAAIlP,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN,CAAA;EAKD,KAAA;;MAED,IAAIuR,gBAAgB,CAACjP,GAAjB,CAAqB3F,GAArB,CAAJ,EAA+Bga,YAAY,CAACha,GAAD,CAAZ,CAAA;EAE/B,IAAA,IAAImX,WAAW,GAAGzE,kBAAkB,IAAID,UAAxC,CAAA;MACA,IAAInM,OAAO,GAAGP,WAAW,CAACoR,WAAD,EAAcxU,IAAd,EAAoB8K,IAAI,CAACxH,QAAzB,CAAzB,CAAA;;MACA,IAAI,CAACK,OAAL,EAAc;QACZ2T,eAAe,CACbja,GADa,EAEbsY,OAFa,EAGbnF,sBAAsB,CAAC,GAAD,EAAM;EAAEhT,QAAAA,QAAQ,EAAEwC,IAAAA;EAAZ,OAAN,CAHT,CAAf,CAAA;EAKA,MAAA,OAAA;EACD,KAAA;;MAED,IAAI;QAAE7B,IAAF;EAAQ4V,MAAAA,UAAAA;EAAR,KAAA,GAAuBC,wBAAwB,CAAChU,IAAD,EAAO8T,IAAP,EAAa,IAAb,CAAnD,CAAA;EACA,IAAA,IAAI5M,KAAK,GAAGsO,cAAc,CAAC7R,OAAD,EAAUxF,IAAV,CAA1B,CAAA;MAEAwT,yBAAyB,GAAG,CAACmC,IAAI,IAAIA,IAAI,CAAC7C,kBAAd,MAAsC,IAAlE,CAAA;;MAEA,IAAI8C,UAAU,IAAIP,gBAAgB,CAACO,UAAU,CAAC9E,UAAZ,CAAlC,EAA2D;EACzDsI,MAAAA,mBAAmB,CAACla,GAAD,EAAMsY,OAAN,EAAexX,IAAf,EAAqB+I,KAArB,EAA4BvD,OAA5B,EAAqCoQ,UAArC,CAAnB,CAAA;EACA,MAAA,OAAA;EACD,KA9BD;EAiCA;;;EACAzB,IAAAA,gBAAgB,CAACnH,GAAjB,CAAqB9N,GAArB,EAA0B;QAAEsY,OAAF;EAAWxX,MAAAA,IAAAA;OAArC,CAAA,CAAA;EACAqZ,IAAAA,mBAAmB,CAACna,GAAD,EAAMsY,OAAN,EAAexX,IAAf,EAAqB+I,KAArB,EAA4BvD,OAA5B,EAAqCoQ,UAArC,CAAnB,CAAA;EACD,GAx4BoD;EA24BrD;;;EACA,EAAA,eAAewD,mBAAf,CACEla,GADF,EAEEsY,OAFF,EAGExX,IAHF,EAIE+I,KAJF,EAKEuQ,cALF,EAME1D,UANF,EAOE;MACAK,oBAAoB,EAAA,CAAA;MACpB9B,gBAAgB,CAACrF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;;EAEA,IAAA,IAAI,CAAC6J,KAAK,CAAC5E,KAAN,CAAY1F,MAAjB,EAAyB;EACvB,MAAA,IAAImF,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;UACtCkF,MAAM,EAAE3B,UAAU,CAAC9E,UADmB;EAEtCzR,QAAAA,QAAQ,EAAEW,IAF4B;EAGtCwX,QAAAA,OAAO,EAAEA,OAAAA;EAH6B,OAAN,CAAlC,CAAA;EAKA2B,MAAAA,eAAe,CAACja,GAAD,EAAMsY,OAAN,EAAe5T,KAAf,CAAf,CAAA;EACA,MAAA,OAAA;EACD,KAZD;;;MAeA,IAAI2V,eAAe,GAAGlb,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmB1P,GAAnB,CAAtB,CAAA;;EACA,IAAA,IAAIkZ,OAAoC,GAAA,QAAA,CAAA;EACtC/Z,MAAAA,KAAK,EAAE,YAAA;EAD+B,KAAA,EAEnCuX,UAFmC,EAAA;EAGtClJ,MAAAA,IAAI,EAAE6M,eAAe,IAAIA,eAAe,CAAC7M,IAHH;QAItC,2BAA6B,EAAA,IAAA;OAJ/B,CAAA,CAAA;;EAMArO,IAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwBkZ,OAAxB,CAAA,CAAA;EACAvD,IAAAA,WAAW,CAAC;EAAE1B,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;OAAb,CAAX,CAvBA;;EA0BA,IAAA,IAAIqG,eAAe,GAAG,IAAIzL,eAAJ,EAAtB,CAAA;EACA,IAAA,IAAI0L,YAAY,GAAG9C,uBAAuB,CACxChK,IAAI,CAAC/M,OADmC,EAExCI,IAFwC,EAGxCwZ,eAAe,CAACtL,MAHwB,EAIxC0H,UAJwC,CAA1C,CAAA;EAMA9B,IAAAA,gBAAgB,CAAC9G,GAAjB,CAAqB9N,GAArB,EAA0Bsa,eAA1B,CAAA,CAAA;EAEA,IAAA,IAAIE,YAAY,GAAG,MAAMjC,kBAAkB,CACzC,QADyC,EAEzCgC,YAFyC,EAGzC1Q,KAHyC,EAIzCuQ,cAJyC,EAKzC5G,MAAM,CAACvN,QALkC,CAA3C,CAAA;;EAQA,IAAA,IAAIsU,YAAY,CAACvL,MAAb,CAAoBW,OAAxB,EAAiC;EAC/B;EACA;EACA,MAAA,IAAIiF,gBAAgB,CAAClF,GAAjB,CAAqB1P,GAArB,CAAA,KAA8Bsa,eAAlC,EAAmD;UACjD1F,gBAAgB,CAAChF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;EACD,OAAA;;EACD,MAAA,OAAA;EACD,KAAA;;EAED,IAAA,IAAIwY,gBAAgB,CAACgC,YAAD,CAApB,EAAoC;QAClC5F,gBAAgB,CAAChF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;QACAgV,gBAAgB,CAACpP,GAAjB,CAAqB5F,GAArB,CAAA,CAAA;;EACA,MAAA,IAAIya,cAAwC,GAAA,QAAA,CAAA;EAC1Ctb,QAAAA,KAAK,EAAE,SAAA;EADmC,OAAA,EAEvCuX,UAFuC,EAAA;EAG1ClJ,QAAAA,IAAI,EAAEpO,SAHoC;UAI1C,2BAA6B,EAAA,IAAA;SAJ/B,CAAA,CAAA;;EAMAD,MAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwBya,cAAxB,CAAA,CAAA;EACA9E,MAAAA,WAAW,CAAC;EAAE1B,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;EAAZ,OAAD,CAAX,CAAA;EAEA,MAAA,OAAOwE,uBAAuB,CAACtZ,KAAD,EAAQqb,YAAR,EAAsB;EAClDE,QAAAA,qBAAqB,EAAE,IAAA;EAD2B,OAAtB,CAA9B,CAAA;EAGD,KAnED;;;EAsEA,IAAA,IAAIhC,aAAa,CAAC8B,YAAD,CAAjB,EAAiC;QAC/BP,eAAe,CAACja,GAAD,EAAMsY,OAAN,EAAekC,YAAY,CAAC9V,KAA5B,CAAf,CAAA;EACA,MAAA,OAAA;EACD,KAAA;;EAED,IAAA,IAAIkU,gBAAgB,CAAC4B,YAAD,CAApB,EAAoC;QAClC,MAAMrH,sBAAsB,CAAC,GAAD,EAAM;EAAEiF,QAAAA,IAAI,EAAE,cAAA;EAAR,OAAN,CAA5B,CAAA;EACD,KA7ED;EAgFA;;;MACA,IAAIhX,YAAY,GAAGjC,KAAK,CAACuU,UAAN,CAAiBzT,QAAjB,IAA6Bd,KAAK,CAACc,QAAtD,CAAA;EACA,IAAA,IAAI0a,mBAAmB,GAAGlD,uBAAuB,CAC/ChK,IAAI,CAAC/M,OAD0C,EAG/CU,YAH+C,EAI/CkZ,eAAe,CAACtL,MAJ+B,CAAjD,CAAA;EAMA,IAAA,IAAImI,WAAW,GAAGzE,kBAAkB,IAAID,UAAxC,CAAA;MACA,IAAInM,OAAO,GACTnH,KAAK,CAACuU,UAAN,CAAiBvU,KAAjB,KAA2B,MAA3B,GACI4G,WAAW,CAACoR,WAAD,EAAchY,KAAK,CAACuU,UAAN,CAAiBzT,QAA/B,EAAyCwN,IAAI,CAACxH,QAA9C,CADf,GAEI9G,KAAK,CAACmH,OAHZ,CAAA;EAKApD,IAAAA,SAAS,CAACoD,OAAD,EAAU,8CAAV,CAAT,CAAA;MAEA,IAAIsU,MAAM,GAAG,EAAE/F,kBAAf,CAAA;EACAE,IAAAA,cAAc,CAACjH,GAAf,CAAmB9N,GAAnB,EAAwB4a,MAAxB,CAAA,CAAA;;EAEA,IAAA,IAAIC,WAAqC,GAAA,QAAA,CAAA;EACvC1b,MAAAA,KAAK,EAAE,SADgC;QAEvCqO,IAAI,EAAEgN,YAAY,CAAChN,IAAAA;EAFoB,KAAA,EAGpCkJ,UAHoC,EAAA;QAIvC,2BAA6B,EAAA,IAAA;OAJ/B,CAAA,CAAA;;EAMAvX,IAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwB6a,WAAxB,CAAA,CAAA;EAEA,IAAA,IAAI,CAAC/B,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DvL,IAAI,CAAC/M,OADqD,EAE1DvB,KAF0D,EAG1DmH,OAH0D,EAI1DoQ,UAJ0D,EAK1DtV,YAL0D,EAM1DqT,sBAN0D,EAO1DC,uBAP0D,EAQ1DC,qBAR0D,EAS1DM,gBAT0D,EAU1DkC,WAV0D,EAW1D1J,IAAI,CAACxH,QAXqD,EAY1D;EAAE,MAAA,CAAC4D,KAAK,CAAC5E,KAAN,CAAYO,EAAb,GAAkBgV,YAAY,CAAChN,IAAAA;OAZyB,EAa1DpO,SAb0D;EAAA,KAA5D,CA3GA;EA4HA;EACA;;EACA2Z,IAAAA,oBAAoB,CACjB7P,MADH,CACW+P,EAAD,IAAQA,EAAE,CAACjZ,GAAH,KAAWA,GAD7B,CAAA,CAEGsH,OAFH,CAEY2R,EAAD,IAAQ;EACf,MAAA,IAAI6B,QAAQ,GAAG7B,EAAE,CAACjZ,GAAlB,CAAA;QACA,IAAIqa,eAAe,GAAGlb,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmBoL,QAAnB,CAAtB,CAAA;EACA,MAAA,IAAI3B,mBAA6C,GAAG;EAClDha,QAAAA,KAAK,EAAE,SAD2C;EAElDqO,QAAAA,IAAI,EAAE6M,eAAe,IAAIA,eAAe,CAAC7M,IAFS;EAGlDoE,QAAAA,UAAU,EAAExS,SAHsC;EAIlDyS,QAAAA,UAAU,EAAEzS,SAJsC;EAKlD0S,QAAAA,WAAW,EAAE1S,SALqC;EAMlD2S,QAAAA,QAAQ,EAAE3S,SANwC;UAOlD,2BAA6B,EAAA,IAAA;SAP/B,CAAA;EASAD,MAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmBgN,QAAnB,EAA6B3B,mBAA7B,CAAA,CAAA;EACAvE,MAAAA,gBAAgB,CAAC9G,GAAjB,CAAqBgN,QAArB,EAA+BR,eAA/B,CAAA,CAAA;OAfJ,CAAA,CAAA;EAkBA3E,IAAAA,WAAW,CAAC;EAAE1B,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;EAAZ,KAAD,CAAX,CAAA;MAEA,IAAI;QAAEmF,OAAF;QAAWC,aAAX;EAA0BC,MAAAA,cAAAA;EAA1B,KAAA,GACF,MAAMC,8BAA8B,CAClCpa,KAAK,CAACmH,OAD4B,EAElCA,OAFkC,EAGlCwS,aAHkC,EAIlCC,oBAJkC,EAKlC4B,mBALkC,CADtC,CAAA;;EASA,IAAA,IAAIL,eAAe,CAACtL,MAAhB,CAAuBW,OAA3B,EAAoC;EAClC,MAAA,OAAA;EACD,KAAA;;MAEDoF,cAAc,CAACnF,MAAf,CAAsB5P,GAAtB,CAAA,CAAA;MACA4U,gBAAgB,CAAChF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;EACA+Y,IAAAA,oBAAoB,CAACzR,OAArB,CAA8BqH,CAAD,IAAOiG,gBAAgB,CAAChF,MAAjB,CAAwBjB,CAAC,CAAC3O,GAA1B,CAApC,CAAA,CAAA;EAEA,IAAA,IAAIgR,QAAQ,GAAGwI,YAAY,CAACJ,OAAD,CAA3B,CAAA;;EACA,IAAA,IAAIpI,QAAJ,EAAc;EACZ,MAAA,OAAOyH,uBAAuB,CAACtZ,KAAD,EAAQ6R,QAAR,CAA9B,CAAA;EACD,KAtKD;;;MAyKA,IAAI;QAAE8C,UAAF;EAAcE,MAAAA,MAAAA;EAAd,KAAA,GAAyByF,iBAAiB,CAC5Cta,KAD4C,EAE5CA,KAAK,CAACmH,OAFsC,EAG5CwS,aAH4C,EAI5CO,aAJ4C,EAK5Cja,SAL4C,EAM5C2Z,oBAN4C,EAO5CO,cAP4C,EAQ5CpE,eAR4C,CAA9C,CAAA;EAWA,IAAA,IAAI6F,WAAkC,GAAG;EACvC5b,MAAAA,KAAK,EAAE,MADgC;QAEvCqO,IAAI,EAAEgN,YAAY,CAAChN,IAFoB;EAGvCoE,MAAAA,UAAU,EAAExS,SAH2B;EAIvCyS,MAAAA,UAAU,EAAEzS,SAJ2B;EAKvC0S,MAAAA,WAAW,EAAE1S,SAL0B;EAMvC2S,MAAAA,QAAQ,EAAE3S,SAN6B;QAOvC,2BAA6B,EAAA,IAAA;OAP/B,CAAA;EASAD,IAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwB+a,WAAxB,CAAA,CAAA;EAEA,IAAA,IAAInB,kBAAkB,GAAGC,oBAAoB,CAACe,MAAD,CAA7C,CA/LA;EAkMA;EACA;;MACA,IACEzb,KAAK,CAACuU,UAAN,CAAiBvU,KAAjB,KAA2B,SAA3B,IACAyb,MAAM,GAAG9F,uBAFX,EAGE;EACA5R,MAAAA,SAAS,CAACkR,aAAD,EAAgB,yBAAhB,CAAT,CAAA;EACAG,MAAAA,2BAA2B,IAAIA,2BAA2B,CAACrE,KAA5B,EAA/B,CAAA;EAEA+F,MAAAA,kBAAkB,CAAC9W,KAAK,CAACuU,UAAN,CAAiBzT,QAAlB,EAA4B;UAC5CqG,OAD4C;UAE5CwN,UAF4C;UAG5CE,MAH4C;EAI5CC,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;EAJkC,OAA5B,CAAlB,CAAA;EAMD,KAbD,MAaO;EACL;EACA;EACA;QACA0B,WAAW,CAAA,QAAA,CAAA;UACT3B,MADS;UAETF,UAAU,EAAEwC,eAAe,CACzBnX,KAAK,CAAC2U,UADmB,EAEzBA,UAFyB,EAGzBxN,OAHyB,EAIzB0N,MAJyB,CAAA;EAFlB,OAAA,EAQL4F,kBAAkB,GAAG;EAAE3F,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;SAAf,GAA2C,EARxD,CAAX,CAAA,CAAA;EAUAQ,MAAAA,sBAAsB,GAAG,KAAzB,CAAA;EACD,KAAA;EACF,GApnCoD;;;EAunCrD,EAAA,eAAe0F,mBAAf,CACEna,GADF,EAEEsY,OAFF,EAGExX,IAHF,EAIE+I,KAJF,EAKEvD,OALF,EAMEoQ,UANF,EAOE;MACA,IAAI2D,eAAe,GAAGlb,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmB1P,GAAnB,CAAtB,CADA;;EAGA,IAAA,IAAIya,cAAwC,GAAA,QAAA,CAAA;EAC1Ctb,MAAAA,KAAK,EAAE,SADmC;EAE1CyS,MAAAA,UAAU,EAAExS,SAF8B;EAG1CyS,MAAAA,UAAU,EAAEzS,SAH8B;EAI1C0S,MAAAA,WAAW,EAAE1S,SAJ6B;EAK1C2S,MAAAA,QAAQ,EAAE3S,SAAAA;EALgC,KAAA,EAMvCsX,UANuC,EAAA;EAO1ClJ,MAAAA,IAAI,EAAE6M,eAAe,IAAIA,eAAe,CAAC7M,IAPC;QAQ1C,2BAA6B,EAAA,IAAA;OAR/B,CAAA,CAAA;;EAUArO,IAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwBya,cAAxB,CAAA,CAAA;EACA9E,IAAAA,WAAW,CAAC;EAAE1B,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;OAAb,CAAX,CAdA;;EAiBA,IAAA,IAAIqG,eAAe,GAAG,IAAIzL,eAAJ,EAAtB,CAAA;EACA,IAAA,IAAI0L,YAAY,GAAG9C,uBAAuB,CACxChK,IAAI,CAAC/M,OADmC,EAExCI,IAFwC,EAGxCwZ,eAAe,CAACtL,MAHwB,CAA1C,CAAA;EAKA4F,IAAAA,gBAAgB,CAAC9G,GAAjB,CAAqB9N,GAArB,EAA0Bsa,eAA1B,CAAA,CAAA;EACA,IAAA,IAAIpS,MAAkB,GAAG,MAAMqQ,kBAAkB,CAC/C,QAD+C,EAE/CgC,YAF+C,EAG/C1Q,KAH+C,EAI/CvD,OAJ+C,EAK/CkN,MAAM,CAACvN,QALwC,CAAjD,CAxBA;EAiCA;EACA;EACA;;EACA,IAAA,IAAI2S,gBAAgB,CAAC1Q,MAAD,CAApB,EAA8B;EAC5BA,MAAAA,MAAM,GACJ,CAAC,MAAM8S,mBAAmB,CAAC9S,MAAD,EAASqS,YAAY,CAACvL,MAAtB,EAA8B,IAA9B,CAA1B,KACA9G,MAFF,CAAA;EAGD,KAxCD;EA2CA;;;EACA,IAAA,IAAI0M,gBAAgB,CAAClF,GAAjB,CAAqB1P,GAArB,CAAA,KAA8Bsa,eAAlC,EAAmD;QACjD1F,gBAAgB,CAAChF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;EACD,KAAA;;EAED,IAAA,IAAIua,YAAY,CAACvL,MAAb,CAAoBW,OAAxB,EAAiC;EAC/B,MAAA,OAAA;EACD,KAlDD;;;EAqDA,IAAA,IAAI6I,gBAAgB,CAACtQ,MAAD,CAApB,EAA8B;EAC5B,MAAA,MAAMuQ,uBAAuB,CAACtZ,KAAD,EAAQ+I,MAAR,CAA7B,CAAA;EACA,MAAA,OAAA;EACD,KAxDD;;;EA2DA,IAAA,IAAIwQ,aAAa,CAACxQ,MAAD,CAAjB,EAA2B;QACzB,IAAIyQ,aAAa,GAAGhB,mBAAmB,CAACxY,KAAK,CAACmH,OAAP,EAAgBgS,OAAhB,CAAvC,CAAA;EACAnZ,MAAAA,KAAK,CAAC8U,QAAN,CAAerE,MAAf,CAAsB5P,GAAtB,EAFyB;EAIzB;EACA;;EACA2V,MAAAA,WAAW,CAAC;EACV1B,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CADA;EAEVD,QAAAA,MAAM,EAAE;EACN,UAAA,CAAC2E,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,GAA0B0C,MAAM,CAACxD,KAAAA;EAD3B,SAAA;EAFE,OAAD,CAAX,CAAA;EAMA,MAAA,OAAA;EACD,KAAA;;MAEDxB,SAAS,CAAC,CAAC0V,gBAAgB,CAAC1Q,MAAD,CAAlB,EAA4B,iCAA5B,CAAT,CA1EA;;EA6EA,IAAA,IAAI6S,WAAkC,GAAG;EACvC5b,MAAAA,KAAK,EAAE,MADgC;QAEvCqO,IAAI,EAAEtF,MAAM,CAACsF,IAF0B;EAGvCoE,MAAAA,UAAU,EAAExS,SAH2B;EAIvCyS,MAAAA,UAAU,EAAEzS,SAJ2B;EAKvC0S,MAAAA,WAAW,EAAE1S,SAL0B;EAMvC2S,MAAAA,QAAQ,EAAE3S,SAN6B;QAOvC,2BAA6B,EAAA,IAAA;OAP/B,CAAA;EASAD,IAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwB+a,WAAxB,CAAA,CAAA;EACApF,IAAAA,WAAW,CAAC;EAAE1B,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;EAAZ,KAAD,CAAX,CAAA;EACD,GAAA;EAED;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACE,EAAA,eAAewE,uBAAf,CACEtZ,KADF,EAEE6R,QAFF,EAYE,KAAA,EAAA;EAAA,IAAA,IAAA,OAAA,CAAA;;MAAA,IATA;QACE0F,UADF;QAEEnV,OAFF;EAGEmZ,MAAAA,qBAAAA;EAHF,KASA,sBADI,EACJ,GAAA,KAAA,CAAA;;MACA,IAAI1J,QAAQ,CAAC8F,UAAb,EAAyB;EACvBrC,MAAAA,sBAAsB,GAAG,IAAzB,CAAA;EACD,KAAA;;MAED,IAAIwG,gBAAgB,GAAG/a,cAAc,CACnCf,KAAK,CAACc,QAD6B,EAEnC+Q,QAAQ,CAAC/Q,QAF0B;EAAA,IAAA,QAAA,CAAA;EAKjCmW,MAAAA,WAAW,EAAE,IAAA;EALoB,KAAA,EAM7BsE,qBAAqB,GAAG;EAAEQ,MAAAA,sBAAsB,EAAE,IAAA;OAA7B,GAAsC,EAN9B,CAArC,CAAA,CAAA;EASAhY,IAAAA,SAAS,CACP+X,gBADO,EAEP,gDAFO,CAAT,CAdA;;EAmBA,IAAA,IACE7I,kBAAkB,CAAC/I,IAAnB,CAAwB2H,QAAQ,CAAC/Q,QAAjC,CAAA,IACAoS,SADA,IAEA,mBAAOtQ,MAAP,KAAA,IAAA,GAAA,KAAA,CAAA,GAAO,QAAQ9B,QAAf,CAAA,KAA4B,WAH9B,EAIE;QACA,IAAI4C,GAAG,GAAG4K,IAAI,CAAC/M,OAAL,CAAaC,SAAb,CAAuBqQ,QAAQ,CAAC/Q,QAAhC,CAAV,CAAA;EACA,MAAA,IAAIkb,mBAAmB,GACrBjV,aAAa,CAACrD,GAAG,CAAC1C,QAAL,EAAesN,IAAI,CAACxH,QAAL,IAAiB,GAAhC,CAAb,IAAqD,IADvD,CAAA;;QAGA,IAAIlE,MAAM,CAAC9B,QAAP,CAAgB2E,MAAhB,KAA2B/B,GAAG,CAAC+B,MAA/B,IAAyCuW,mBAA7C,EAAkE;EAChE,QAAA,IAAI5Z,OAAJ,EAAa;EACXQ,UAAAA,MAAM,CAAC9B,QAAP,CAAgBsB,OAAhB,CAAwByP,QAAQ,CAAC/Q,QAAjC,CAAA,CAAA;EACD,SAFD,MAEO;EACL8B,UAAAA,MAAM,CAAC9B,QAAP,CAAgB0E,MAAhB,CAAuBqM,QAAQ,CAAC/Q,QAAhC,CAAA,CAAA;EACD,SAAA;;EACD,QAAA,OAAA;EACD,OAAA;EACF,KApCD;EAuCA;;;EACAsU,IAAAA,2BAA2B,GAAG,IAA9B,CAAA;EAEA,IAAA,IAAI6G,qBAAqB,GACvB7Z,OAAO,KAAK,IAAZ,GAAmB8S,cAAa,CAAC7S,OAAjC,GAA2C6S,cAAa,CAAClT,IAD3D,CA1CA;EA8CA;;MACA,IAAI;QAAEyQ,UAAF;QAAcC,UAAd;QAA0BC,WAA1B;EAAuCC,MAAAA,QAAAA;OAAa5S,GAAAA,KAAK,CAACuU,UAA9D,CAAA;;MACA,IAAI,CAACgD,UAAD,IAAe9E,UAAf,IAA6BC,UAA7B,IAA2CE,QAA3C,IAAuDD,WAA3D,EAAwE;EACtE4E,MAAAA,UAAU,GAAG;UACX9E,UADW;UAEXC,UAFW;UAGXC,WAHW;EAIXC,QAAAA,QAAAA;SAJF,CAAA;EAMD,KAvDD;EA0DA;EACA;;;EACA,IAAA,IACEL,iCAAiC,CAAC/L,GAAlC,CAAsCqL,QAAQ,CAACrD,MAA/C,CAAA,IACA+I,UADA,IAEAP,gBAAgB,CAACO,UAAU,CAAC9E,UAAZ,CAHlB,EAIE;EACA,MAAA,MAAMgE,eAAe,CAACwF,qBAAD,EAAwBH,gBAAxB,EAA0C;EAC7DvE,QAAAA,UAAU,eACLA,UADK,EAAA;YAER7E,UAAU,EAAEb,QAAQ,CAAC/Q,QAAAA;WAHsC,CAAA;EAK7D;EACA2T,QAAAA,kBAAkB,EAAEU,yBAAAA;EANyC,OAA1C,CAArB,CAAA;EAQD,KAbD,MAaO;EACL;EACA;EACA,MAAA,MAAMsB,eAAe,CAACwF,qBAAD,EAAwBH,gBAAxB,EAA0C;EAC7DhE,QAAAA,kBAAkB,EAAE;EAClB9X,UAAAA,KAAK,EAAE,SADW;EAElBc,UAAAA,QAAQ,EAAEgb,gBAFQ;EAGlBrJ,UAAAA,UAAU,EAAE8E,UAAU,GAAGA,UAAU,CAAC9E,UAAd,GAA2BxS,SAH/B;EAIlByS,UAAAA,UAAU,EAAE6E,UAAU,GAAGA,UAAU,CAAC7E,UAAd,GAA2BzS,SAJ/B;EAKlB0S,UAAAA,WAAW,EAAE4E,UAAU,GAAGA,UAAU,CAAC5E,WAAd,GAA4B1S,SALjC;EAMlB2S,UAAAA,QAAQ,EAAE2E,UAAU,GAAGA,UAAU,CAAC3E,QAAd,GAAyB3S,SAAAA;WAPc;EAS7D;EACAwU,QAAAA,kBAAkB,EAAEU,yBAAAA;EAVyC,OAA1C,CAArB,CAAA;EAYD,KAAA;EACF,GAAA;;IAED,eAAeiF,8BAAf,CACE8B,cADF,EAEE/U,OAFF,EAGEwS,aAHF,EAIEwC,cAJF,EAKE9D,OALF,EAME;EACA;EACA;EACA;EACA,IAAA,IAAI4B,OAAO,GAAG,MAAM1K,OAAO,CAAC6M,GAAR,CAAY,CAC9B,GAAGzC,aAAa,CAAC/Z,GAAd,CAAmB8K,KAAD,IACnB0O,kBAAkB,CAAC,QAAD,EAAWf,OAAX,EAAoB3N,KAApB,EAA2BvD,OAA3B,EAAoCkN,MAAM,CAACvN,QAA3C,CADjB,CAD2B,EAI9B,GAAGqV,cAAc,CAACvc,GAAf,CAAoByc,CAAD,IAAO;EAC3B,MAAA,IAAIA,CAAC,CAAClV,OAAF,IAAakV,CAAC,CAAC3R,KAAnB,EAA0B;EACxB,QAAA,OAAO0O,kBAAkB,CACvB,QADuB,EAEvBd,uBAAuB,CAAChK,IAAI,CAAC/M,OAAN,EAAe8a,CAAC,CAAC1a,IAAjB,EAAuB0W,OAAO,CAACxI,MAA/B,CAFA,EAGvBwM,CAAC,CAAC3R,KAHqB,EAIvB2R,CAAC,CAAClV,OAJqB,EAKvBkN,MAAM,CAACvN,QALgB,CAAzB,CAAA;EAOD,OARD,MAQO;EACL,QAAA,IAAIvB,KAAkB,GAAG;YACvB0T,IAAI,EAAErT,UAAU,CAACL,KADM;EAEvBA,UAAAA,KAAK,EAAEyO,sBAAsB,CAAC,GAAD,EAAM;cAAEhT,QAAQ,EAAEqb,CAAC,CAAC1a,IAAAA;aAApB,CAAA;WAF/B,CAAA;EAIA,QAAA,OAAO4D,KAAP,CAAA;EACD,OAAA;OAfA,CAJ2B,CAAZ,CAApB,CAAA;MAsBA,IAAI2U,aAAa,GAAGD,OAAO,CAACpW,KAAR,CAAc,CAAd,EAAiB8V,aAAa,CAACxZ,MAA/B,CAApB,CAAA;MACA,IAAIga,cAAc,GAAGF,OAAO,CAACpW,KAAR,CAAc8V,aAAa,CAACxZ,MAA5B,CAArB,CAAA;MAEA,MAAMoP,OAAO,CAAC6M,GAAR,CAAY,CAChBE,sBAAsB,CACpBJ,cADoB,EAEpBvC,aAFoB,EAGpBO,aAHoB,EAIpB7B,OAAO,CAACxI,MAJY,EAKpB,KALoB,EAMpB7P,KAAK,CAAC2U,UANc,CADN,EAShB2H,sBAAsB,CACpBJ,cADoB,EAEpBC,cAAc,CAACvc,GAAf,CAAoByc,CAAD,IAAOA,CAAC,CAAC3R,KAA5B,CAFoB,EAGpByP,cAHoB,EAIpB9B,OAAO,CAACxI,MAJY,EAKpB,IALoB,CATN,CAAZ,CAAN,CAAA;MAkBA,OAAO;QAAEoK,OAAF;QAAWC,aAAX;EAA0BC,MAAAA,cAAAA;OAAjC,CAAA;EACD,GAAA;;EAED,EAAA,SAASvC,oBAAT,GAAgC;EAC9B;MACAtC,sBAAsB,GAAG,IAAzB,CAF8B;EAK9B;;EACAC,IAAAA,uBAAuB,CAACxT,IAAxB,CAA6B,GAAGoW,qBAAqB,EAArD,EAN8B;;EAS9BrC,IAAAA,gBAAgB,CAAC3N,OAAjB,CAAyB,CAAC+C,CAAD,EAAIrK,GAAJ,KAAY;EACnC,MAAA,IAAI4U,gBAAgB,CAACjP,GAAjB,CAAqB3F,GAArB,CAAJ,EAA+B;UAC7B2U,qBAAqB,CAACzT,IAAtB,CAA2BlB,GAA3B,CAAA,CAAA;UACAga,YAAY,CAACha,GAAD,CAAZ,CAAA;EACD,OAAA;OAJH,CAAA,CAAA;EAMD,GAAA;;EAED,EAAA,SAASia,eAAT,CAAyBja,GAAzB,EAAsCsY,OAAtC,EAAuD5T,KAAvD,EAAmE;MACjE,IAAIiU,aAAa,GAAGhB,mBAAmB,CAACxY,KAAK,CAACmH,OAAP,EAAgBgS,OAAhB,CAAvC,CAAA;MACAvC,aAAa,CAAC/V,GAAD,CAAb,CAAA;EACA2V,IAAAA,WAAW,CAAC;EACV3B,MAAAA,MAAM,EAAE;EACN,QAAA,CAAC2E,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,GAA0Bd,KAAAA;SAFlB;EAIVuP,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ/U,KAAK,CAAC8U,QAAd,CAAA;EAJA,KAAD,CAAX,CAAA;EAMD,GAAA;;IAED,SAAS8B,aAAT,CAAuB/V,GAAvB,EAA0C;MACxC,IAAI4U,gBAAgB,CAACjP,GAAjB,CAAqB3F,GAArB,CAAJ,EAA+Bga,YAAY,CAACha,GAAD,CAAZ,CAAA;MAC/BiV,gBAAgB,CAACrF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;MACA+U,cAAc,CAACnF,MAAf,CAAsB5P,GAAtB,CAAA,CAAA;MACAgV,gBAAgB,CAACpF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;EACAb,IAAAA,KAAK,CAAC8U,QAAN,CAAerE,MAAf,CAAsB5P,GAAtB,CAAA,CAAA;EACD,GAAA;;IAED,SAASga,YAAT,CAAsBha,GAAtB,EAAmC;EACjC,IAAA,IAAI4O,UAAU,GAAGgG,gBAAgB,CAAClF,GAAjB,CAAqB1P,GAArB,CAAjB,CAAA;EACAkD,IAAAA,SAAS,CAAC0L,UAAD,EAA2C5O,6BAAAA,GAAAA,GAA3C,CAAT,CAAA;EACA4O,IAAAA,UAAU,CAACsB,KAAX,EAAA,CAAA;MACA0E,gBAAgB,CAAChF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;EACD,GAAA;;IAED,SAAS0b,gBAAT,CAA0BrF,IAA1B,EAA0C;EACxC,IAAA,KAAK,IAAIrW,GAAT,IAAgBqW,IAAhB,EAAsB;EACpB,MAAA,IAAI6C,OAAO,GAAGY,UAAU,CAAC9Z,GAAD,CAAxB,CAAA;EACA,MAAA,IAAI+a,WAAkC,GAAG;EACvC5b,QAAAA,KAAK,EAAE,MADgC;UAEvCqO,IAAI,EAAE0L,OAAO,CAAC1L,IAFyB;EAGvCoE,QAAAA,UAAU,EAAExS,SAH2B;EAIvCyS,QAAAA,UAAU,EAAEzS,SAJ2B;EAKvC0S,QAAAA,WAAW,EAAE1S,SAL0B;EAMvC2S,QAAAA,QAAQ,EAAE3S,SAN6B;UAOvC,2BAA6B,EAAA,IAAA;SAP/B,CAAA;EASAD,MAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwB+a,WAAxB,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,SAASpB,sBAAT,GAAwC;MACtC,IAAIgC,QAAQ,GAAG,EAAf,CAAA;;EACA,IAAA,KAAK,IAAI3b,GAAT,IAAgBgV,gBAAhB,EAAkC;QAChC,IAAIkE,OAAO,GAAG/Z,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmB1P,GAAnB,CAAd,CAAA;EACAkD,MAAAA,SAAS,CAACgW,OAAD,EAA+BlZ,oBAAAA,GAAAA,GAA/B,CAAT,CAAA;;EACA,MAAA,IAAIkZ,OAAO,CAAC/Z,KAAR,KAAkB,SAAtB,EAAiC;UAC/B6V,gBAAgB,CAACpF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;UACA2b,QAAQ,CAACza,IAAT,CAAclB,GAAd,CAAA,CAAA;EACD,OAAA;EACF,KAAA;;MACD0b,gBAAgB,CAACC,QAAD,CAAhB,CAAA;EACD,GAAA;;IAED,SAAS9B,oBAAT,CAA8B+B,QAA9B,EAAyD;MACvD,IAAIC,UAAU,GAAG,EAAjB,CAAA;;MACA,KAAK,IAAI,CAAC7b,GAAD,EAAMwF,EAAN,CAAT,IAAsBuP,cAAtB,EAAsC;QACpC,IAAIvP,EAAE,GAAGoW,QAAT,EAAmB;UACjB,IAAI1C,OAAO,GAAG/Z,KAAK,CAAC8U,QAAN,CAAevE,GAAf,CAAmB1P,GAAnB,CAAd,CAAA;EACAkD,QAAAA,SAAS,CAACgW,OAAD,EAA+BlZ,oBAAAA,GAAAA,GAA/B,CAAT,CAAA;;EACA,QAAA,IAAIkZ,OAAO,CAAC/Z,KAAR,KAAkB,SAAtB,EAAiC;YAC/B6a,YAAY,CAACha,GAAD,CAAZ,CAAA;YACA+U,cAAc,CAACnF,MAAf,CAAsB5P,GAAtB,CAAA,CAAA;YACA6b,UAAU,CAAC3a,IAAX,CAAgBlB,GAAhB,CAAA,CAAA;EACD,SAAA;EACF,OAAA;EACF,KAAA;;MACD0b,gBAAgB,CAACG,UAAD,CAAhB,CAAA;EACA,IAAA,OAAOA,UAAU,CAACvc,MAAX,GAAoB,CAA3B,CAAA;EACD,GAAA;;EAED,EAAA,SAASwc,UAAT,CAAoB9b,GAApB,EAAiC4B,EAAjC,EAAsD;MACpD,IAAIma,OAAgB,GAAG5c,KAAK,CAACgV,QAAN,CAAezE,GAAf,CAAmB1P,GAAnB,CAAA,IAA2BiS,YAAlD,CAAA;;EAEA,IAAA,IAAIkD,gBAAgB,CAACzF,GAAjB,CAAqB1P,GAArB,CAAA,KAA8B4B,EAAlC,EAAsC;EACpCuT,MAAAA,gBAAgB,CAACrH,GAAjB,CAAqB9N,GAArB,EAA0B4B,EAA1B,CAAA,CAAA;EACD,KAAA;;EAED,IAAA,OAAOma,OAAP,CAAA;EACD,GAAA;;IAED,SAASrG,aAAT,CAAuB1V,GAAvB,EAAoC;EAClCb,IAAAA,KAAK,CAACgV,QAAN,CAAevE,MAAf,CAAsB5P,GAAtB,CAAA,CAAA;MACAmV,gBAAgB,CAACvF,MAAjB,CAAwB5P,GAAxB,CAAA,CAAA;EACD,GAh/CoD;;;EAm/CrD,EAAA,SAASyV,aAAT,CAAuBzV,GAAvB,EAAoCgc,UAApC,EAAyD;EACvD,IAAA,IAAID,OAAO,GAAG5c,KAAK,CAACgV,QAAN,CAAezE,GAAf,CAAmB1P,GAAnB,CAAA,IAA2BiS,YAAzC,CADuD;EAIvD;;EACA/O,IAAAA,SAAS,CACN6Y,OAAO,CAAC5c,KAAR,KAAkB,WAAlB,IAAiC6c,UAAU,CAAC7c,KAAX,KAAqB,SAAvD,IACG4c,OAAO,CAAC5c,KAAR,KAAkB,SAAlB,IAA+B6c,UAAU,CAAC7c,KAAX,KAAqB,SADvD,IAEG4c,OAAO,CAAC5c,KAAR,KAAkB,SAAlB,IAA+B6c,UAAU,CAAC7c,KAAX,KAAqB,YAFvD,IAGG4c,OAAO,CAAC5c,KAAR,KAAkB,SAAlB,IAA+B6c,UAAU,CAAC7c,KAAX,KAAqB,WAHvD,IAIG4c,OAAO,CAAC5c,KAAR,KAAkB,YAAlB,IAAkC6c,UAAU,CAAC7c,KAAX,KAAqB,WALnD,EAAA,oCAAA,GAM8B4c,OAAO,CAAC5c,KANtC,GAAA,MAAA,GAMkD6c,UAAU,CAAC7c,KAN7D,CAAT,CAAA;EASAA,IAAAA,KAAK,CAACgV,QAAN,CAAerG,GAAf,CAAmB9N,GAAnB,EAAwBgc,UAAxB,CAAA,CAAA;EACArG,IAAAA,WAAW,CAAC;EAAExB,MAAAA,QAAQ,EAAE,IAAID,GAAJ,CAAQ/U,KAAK,CAACgV,QAAd,CAAA;EAAZ,KAAD,CAAX,CAAA;EACD,GAAA;;EAED,EAAA,SAASoB,qBAAT,CAQuB,KAAA,EAAA;MAAA,IARQ;QAC7BC,eAD6B;QAE7BpU,YAF6B;EAG7BqS,MAAAA,aAAAA;OAKqB,GAAA,KAAA,CAAA;;EACrB,IAAA,IAAI0B,gBAAgB,CAAC5E,IAAjB,KAA0B,CAA9B,EAAiC;EAC/B,MAAA,OAAA;EACD,KAHoB;EAMrB;;;EACA,IAAA,IAAI4E,gBAAgB,CAAC5E,IAAjB,GAAwB,CAA5B,EAA+B;EAC7BnQ,MAAAA,OAAO,CAAC,KAAD,EAAQ,8CAAR,CAAP,CAAA;EACD,KAAA;;MAED,IAAItB,OAAO,GAAGwP,KAAK,CAACvB,IAAN,CAAWoI,gBAAgB,CAACrW,OAAjB,EAAX,CAAd,CAAA;EACA,IAAA,IAAI,CAACwW,UAAD,EAAa2G,eAAb,CAAgCnd,GAAAA,OAAO,CAACA,OAAO,CAACQ,MAAR,GAAiB,CAAlB,CAA3C,CAAA;MACA,IAAIyc,OAAO,GAAG5c,KAAK,CAACgV,QAAN,CAAezE,GAAf,CAAmB4F,UAAnB,CAAd,CAAA;;EAEA,IAAA,IAAIyG,OAAO,IAAIA,OAAO,CAAC5c,KAAR,KAAkB,YAAjC,EAA+C;EAC7C;EACA;EACA,MAAA,OAAA;EACD,KAnBoB;EAsBrB;;;EACA,IAAA,IAAI8c,eAAe,CAAC;QAAEzG,eAAF;QAAmBpU,YAAnB;EAAiCqS,MAAAA,aAAAA;EAAjC,KAAD,CAAnB,EAAuE;EACrE,MAAA,OAAO6B,UAAP,CAAA;EACD,KAAA;EACF,GAAA;;IAED,SAASgC,qBAAT,CACE4E,SADF,EAEY;MACV,IAAIC,iBAA2B,GAAG,EAAlC,CAAA;EACAjH,IAAAA,eAAe,CAAC5N,OAAhB,CAAwB,CAAC8U,GAAD,EAAM9D,OAAN,KAAkB;EACxC,MAAA,IAAI,CAAC4D,SAAD,IAAcA,SAAS,CAAC5D,OAAD,CAA3B,EAAsC;EACpC;EACA;EACA;EACA8D,QAAAA,GAAG,CAACnM,MAAJ,EAAA,CAAA;UACAkM,iBAAiB,CAACjb,IAAlB,CAAuBoX,OAAvB,CAAA,CAAA;UACApD,eAAe,CAACtF,MAAhB,CAAuB0I,OAAvB,CAAA,CAAA;EACD,OAAA;OARH,CAAA,CAAA;EAUA,IAAA,OAAO6D,iBAAP,CAAA;EACD,GAxjDoD;EA2jDrD;;;EACA,EAAA,SAASE,uBAAT,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAIE;EACA5J,IAAAA,oBAAoB,GAAG0J,SAAvB,CAAA;EACAxJ,IAAAA,iBAAiB,GAAGyJ,WAApB,CAAA;;MACA1J,uBAAuB,GAAG2J,MAAM,KAAMvc,QAAD,IAAcA,QAAQ,CAACD,GAA5B,CAAhC,CAHA;EAMA;EACA;;;MACA,IAAI,CAAC+S,qBAAD,IAA0B5T,KAAK,CAACuU,UAAN,KAAqB/B,eAAnD,EAAoE;EAClEoB,MAAAA,qBAAqB,GAAG,IAAxB,CAAA;QACA,IAAI0J,CAAC,GAAGlG,sBAAsB,CAACpX,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACmH,OAAvB,CAA9B,CAAA;;QACA,IAAImW,CAAC,IAAI,IAAT,EAAe;EACb9G,QAAAA,WAAW,CAAC;EAAEhC,UAAAA,qBAAqB,EAAE8I,CAAAA;EAAzB,SAAD,CAAX,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,OAAO,MAAM;EACX7J,MAAAA,oBAAoB,GAAG,IAAvB,CAAA;EACAE,MAAAA,iBAAiB,GAAG,IAApB,CAAA;EACAD,MAAAA,uBAAuB,GAAG,IAA1B,CAAA;OAHF,CAAA;EAKD,GAAA;;EAED,EAAA,SAASqE,kBAAT,CACEjX,QADF,EAEEqG,OAFF,EAGQ;EACN,IAAA,IAAIsM,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;EACxE,MAAA,IAAI4J,WAAW,GAAGpW,OAAO,CAACvH,GAAR,CAAauU,CAAD,IAC5BqJ,qBAAqB,CAACrJ,CAAD,EAAInU,KAAK,CAAC2U,UAAV,CADL,CAAlB,CAAA;QAGA,IAAI9T,GAAG,GAAG6S,uBAAuB,CAAC5S,QAAD,EAAWyc,WAAX,CAAvB,IAAkDzc,QAAQ,CAACD,GAArE,CAAA;EACA4S,MAAAA,oBAAoB,CAAC5S,GAAD,CAApB,GAA4B8S,iBAAiB,EAA7C,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,SAASyD,sBAAT,CACEtW,QADF,EAEEqG,OAFF,EAGiB;EACf,IAAA,IAAIsM,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;EACxE,MAAA,IAAI4J,WAAW,GAAGpW,OAAO,CAACvH,GAAR,CAAauU,CAAD,IAC5BqJ,qBAAqB,CAACrJ,CAAD,EAAInU,KAAK,CAAC2U,UAAV,CADL,CAAlB,CAAA;QAGA,IAAI9T,GAAG,GAAG6S,uBAAuB,CAAC5S,QAAD,EAAWyc,WAAX,CAAvB,IAAkDzc,QAAQ,CAACD,GAArE,CAAA;EACA,MAAA,IAAIyc,CAAC,GAAG7J,oBAAoB,CAAC5S,GAAD,CAA5B,CAAA;;EACA,MAAA,IAAI,OAAOyc,CAAP,KAAa,QAAjB,EAA2B;EACzB,QAAA,OAAOA,CAAP,CAAA;EACD,OAAA;EACF,KAAA;;EACD,IAAA,OAAO,IAAP,CAAA;EACD,GAAA;;IAED,SAASG,kBAAT,CAA4BC,SAA5B,EAAkE;EAChEnK,IAAAA,kBAAkB,GAAGmK,SAArB,CAAA;EACD,GAAA;;EAEDrJ,EAAAA,MAAM,GAAG;EACP,IAAA,IAAIvN,QAAJ,GAAe;QACb,OAAOwH,IAAI,CAACxH,QAAZ,CAAA;OAFK;;EAIP,IAAA,IAAI9G,KAAJ,GAAY;EACV,MAAA,OAAOA,KAAP,CAAA;OALK;;EAOP,IAAA,IAAIgG,MAAJ,GAAa;EACX,MAAA,OAAOsN,UAAP,CAAA;OARK;;MAUP4C,UAVO;MAWPrF,SAXO;MAYPqM,uBAZO;MAaP7F,QAbO;MAcPuD,KAdO;MAePjD,UAfO;EAgBP;EACA;MACAtW,UAAU,EAAGT,EAAD,IAAY0N,IAAI,CAAC/M,OAAL,CAAaF,UAAb,CAAwBT,EAAxB,CAlBjB;MAmBPc,cAAc,EAAGd,EAAD,IAAY0N,IAAI,CAAC/M,OAAL,CAAaG,cAAb,CAA4Bd,EAA5B,CAnBrB;MAoBP+Z,UApBO;MAqBP/D,aArBO;MAsBPF,OAtBO;MAuBPiG,UAvBO;MAwBPpG,aAxBO;EAyBPoH,IAAAA,yBAAyB,EAAElI,gBAzBpB;EA0BPmI,IAAAA,wBAAwB,EAAE7H,eA1BnB;EA2BP;EACA;EACA0H,IAAAA,kBAAAA;KA7BF,CAAA;EAgCA,EAAA,OAAOpJ,MAAP,CAAA;EACD;EAGD;EACA;EACA;;QAEawJ,sBAAsB,GAAGC,MAAM,CAAC,UAAD,EAArC;EAEA,SAASC,mBAAT,CACL/X,MADK,EAELsR,IAFK,EAKU;IACfvT,SAAS,CACPiC,MAAM,CAAC7F,MAAP,GAAgB,CADT,EAEP,kEAFO,CAAT,CAAA;EAKA,EAAA,IAAImT,UAAU,GAAGvN,yBAAyB,CAACC,MAAD,CAA1C,CAAA;IACA,IAAIc,QAAQ,GAAG,CAACwQ,IAAI,GAAGA,IAAI,CAACxQ,QAAR,GAAmB,IAAxB,KAAiC,GAAhD,CAAA;EAEA;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;IACE,eAAekX,KAAf,CACE3F,OADF,EAG4C,MAAA,EAAA;MAAA,IAD1C;EAAE4F,MAAAA,cAAAA;EAAF,KAC0C,uBADS,EACT,GAAA,MAAA,CAAA;MAC1C,IAAIva,GAAG,GAAG,IAAIjC,GAAJ,CAAQ4W,OAAO,CAAC3U,GAAhB,CAAV,CAAA;EACA,IAAA,IAAIwV,MAAM,GAAGb,OAAO,CAACa,MAAR,CAAe5M,WAAf,EAAb,CAAA;EACA,IAAA,IAAIxL,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACoC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B,CAAA;MACA,IAAIyD,OAAO,GAAGP,WAAW,CAAC0M,UAAD,EAAaxS,QAAb,EAAuBgG,QAAvB,CAAzB,CAJ0C;;MAO1C,IAAI,CAACoX,aAAa,CAAChF,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAAzC,EAAiD;EAC/C,MAAA,IAAI3T,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;EAAEkF,QAAAA,MAAAA;EAAF,OAAN,CAAlC,CAAA;QACA,IAAI;EAAE/R,QAAAA,OAAO,EAAEgX,uBAAX;EAAoCrY,QAAAA,KAAAA;SACtCmO,GAAAA,sBAAsB,CAACX,UAAD,CADxB,CAAA;QAEA,OAAO;UACLxM,QADK;UAELhG,QAFK;EAGLqG,QAAAA,OAAO,EAAEgX,uBAHJ;EAILxJ,QAAAA,UAAU,EAAE,EAJP;EAKLC,QAAAA,UAAU,EAAE,IALP;EAMLC,QAAAA,MAAM,EAAE;YACN,CAAC/O,KAAK,CAACO,EAAP,GAAYd,KAAAA;WAPT;UASL6Y,UAAU,EAAE7Y,KAAK,CAACiJ,MATb;EAUL6P,QAAAA,aAAa,EAAE,EAVV;EAWLC,QAAAA,aAAa,EAAE,EAXV;EAYLvI,QAAAA,eAAe,EAAE,IAAA;SAZnB,CAAA;EAcD,KAlBD,MAkBO,IAAI,CAAC5O,OAAL,EAAc;EACnB,MAAA,IAAI5B,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;UAAEhT,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;EAArB,OAAN,CAAlC,CAAA;QACA,IAAI;EAAEmG,QAAAA,OAAO,EAAE+Q,eAAX;EAA4BpS,QAAAA,KAAAA;SAC9BmO,GAAAA,sBAAsB,CAACX,UAAD,CADxB,CAAA;QAEA,OAAO;UACLxM,QADK;UAELhG,QAFK;EAGLqG,QAAAA,OAAO,EAAE+Q,eAHJ;EAILvD,QAAAA,UAAU,EAAE,EAJP;EAKLC,QAAAA,UAAU,EAAE,IALP;EAMLC,QAAAA,MAAM,EAAE;YACN,CAAC/O,KAAK,CAACO,EAAP,GAAYd,KAAAA;WAPT;UASL6Y,UAAU,EAAE7Y,KAAK,CAACiJ,MATb;EAUL6P,QAAAA,aAAa,EAAE,EAVV;EAWLC,QAAAA,aAAa,EAAE,EAXV;EAYLvI,QAAAA,eAAe,EAAE,IAAA;SAZnB,CAAA;EAcD,KAAA;;EAED,IAAA,IAAIhN,MAAM,GAAG,MAAMwV,SAAS,CAAClG,OAAD,EAAUvX,QAAV,EAAoBqG,OAApB,EAA6B8W,cAA7B,CAA5B,CAAA;;EACA,IAAA,IAAIO,UAAU,CAACzV,MAAD,CAAd,EAAwB;EACtB,MAAA,OAAOA,MAAP,CAAA;EACD,KAhDyC;EAmD1C;EACA;;;EACA,IAAA,OAAA,QAAA,CAAA;QAASjI,QAAT;EAAmBgG,MAAAA,QAAAA;EAAnB,KAAA,EAAgCiC,MAAhC,CAAA,CAAA;EACD,GAAA;EAED;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;IACE,eAAe0V,UAAf,CACEpG,OADF,EAMgB,MAAA,EAAA;MAAA,IAJd;QACEc,OADF;EAEE8E,MAAAA,cAAAA;EAFF,KAIc,uBADsC,EACtC,GAAA,MAAA,CAAA;MACd,IAAIva,GAAG,GAAG,IAAIjC,GAAJ,CAAQ4W,OAAO,CAAC3U,GAAhB,CAAV,CAAA;EACA,IAAA,IAAIwV,MAAM,GAAGb,OAAO,CAACa,MAAR,CAAe5M,WAAf,EAAb,CAAA;EACA,IAAA,IAAIxL,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACoC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B,CAAA;MACA,IAAIyD,OAAO,GAAGP,WAAW,CAAC0M,UAAD,EAAaxS,QAAb,EAAuBgG,QAAvB,CAAzB,CAJc;;EAOd,IAAA,IAAI,CAACoX,aAAa,CAAChF,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAArC,IAA+CA,MAAM,KAAK,SAA9D,EAAyE;QACvE,MAAMlF,sBAAsB,CAAC,GAAD,EAAM;EAAEkF,QAAAA,MAAAA;EAAF,OAAN,CAA5B,CAAA;EACD,KAFD,MAEO,IAAI,CAAC/R,OAAL,EAAc;QACnB,MAAM6M,sBAAsB,CAAC,GAAD,EAAM;UAAEhT,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;EAArB,OAAN,CAA5B,CAAA;EACD,KAAA;;MAED,IAAI0J,KAAK,GAAGyO,OAAO,GACfhS,OAAO,CAACuX,IAAR,CAAcvK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAe8S,OAAnC,CADe,GAEfH,cAAc,CAAC7R,OAAD,EAAUrG,QAAV,CAFlB,CAAA;;EAIA,IAAA,IAAIqY,OAAO,IAAI,CAACzO,KAAhB,EAAuB;QACrB,MAAMsJ,sBAAsB,CAAC,GAAD,EAAM;UAChChT,QAAQ,EAAEF,QAAQ,CAACE,QADa;EAEhCmY,QAAAA,OAAAA;EAFgC,OAAN,CAA5B,CAAA;EAID,KALD,MAKO,IAAI,CAACzO,KAAL,EAAY;EACjB;QACA,MAAMsJ,sBAAsB,CAAC,GAAD,EAAM;UAAEhT,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;EAArB,OAAN,CAA5B,CAAA;EACD,KAAA;;EAED,IAAA,IAAI+H,MAAM,GAAG,MAAMwV,SAAS,CAC1BlG,OAD0B,EAE1BvX,QAF0B,EAG1BqG,OAH0B,EAI1B8W,cAJ0B,EAK1BvT,KAL0B,CAA5B,CAAA;;EAOA,IAAA,IAAI8T,UAAU,CAACzV,MAAD,CAAd,EAAwB;EACtB,MAAA,OAAOA,MAAP,CAAA;EACD,KAAA;;EAED,IAAA,IAAIxD,KAAK,GAAGwD,MAAM,CAAC8L,MAAP,GAAgBjK,MAAM,CAAC+T,MAAP,CAAc5V,MAAM,CAAC8L,MAArB,EAA6B,CAA7B,CAAhB,GAAkD5U,SAA9D,CAAA;;MACA,IAAIsF,KAAK,KAAKtF,SAAd,EAAyB;EACvB;EACA;EACA;EACA;EACA,MAAA,MAAMsF,KAAN,CAAA;EACD,KA7Ca;;;MAgDd,IAAIwD,MAAM,CAAC6L,UAAX,EAAuB;QACrB,OAAOhK,MAAM,CAAC+T,MAAP,CAAc5V,MAAM,CAAC6L,UAArB,CAAiC,CAAA,CAAjC,CAAP,CAAA;EACD,KAAA;;MAED,IAAI7L,MAAM,CAAC4L,UAAX,EAAuB;EAAA,MAAA,IAAA,qBAAA,CAAA;;QACrB,IAAItG,IAAI,GAAGzD,MAAM,CAAC+T,MAAP,CAAc5V,MAAM,CAAC4L,UAArB,CAAiC,CAAA,CAAjC,CAAX,CAAA;;QACA,IAAI5L,CAAAA,qBAAAA,GAAAA,MAAM,CAACgN,eAAX,KAAI,IAAA,IAAA,qBAAA,CAAyBrL,KAAK,CAAC5E,KAAN,CAAYO,EAArC,CAAJ,EAA8C;EAC5CgI,QAAAA,IAAI,CAACwP,sBAAD,CAAJ,GAA+B9U,MAAM,CAACgN,eAAP,CAAuBrL,KAAK,CAAC5E,KAAN,CAAYO,EAAnC,CAA/B,CAAA;EACD,OAAA;;EACD,MAAA,OAAOgI,IAAP,CAAA;EACD,KAAA;;EAED,IAAA,OAAOpO,SAAP,CAAA;EACD,GAAA;;IAED,eAAese,SAAf,CACElG,OADF,EAEEvX,QAFF,EAGEqG,OAHF,EAIE8W,cAJF,EAKEW,UALF,EAM2E;EACzE7a,IAAAA,SAAS,CACPsU,OAAO,CAACxI,MADD,EAEP,sEAFO,CAAT,CAAA;;MAKA,IAAI;QACF,IAAImH,gBAAgB,CAACqB,OAAO,CAACa,MAAR,CAAe5M,WAAf,EAAD,CAApB,EAAoD;UAClD,IAAIvD,MAAM,GAAG,MAAM8V,MAAM,CACvBxG,OADuB,EAEvBlR,OAFuB,EAGvByX,UAAU,IAAI5F,cAAc,CAAC7R,OAAD,EAAUrG,QAAV,CAHL,EAIvBmd,cAJuB,EAKvBW,UAAU,IAAI,IALS,CAAzB,CAAA;EAOA,QAAA,OAAO7V,MAAP,CAAA;EACD,OAAA;;EAED,MAAA,IAAIA,MAAM,GAAG,MAAM+V,aAAa,CAC9BzG,OAD8B,EAE9BlR,OAF8B,EAG9B8W,cAH8B,EAI9BW,UAJ8B,CAAhC,CAAA;EAMA,MAAA,OAAOJ,UAAU,CAACzV,MAAD,CAAV,GACHA,MADG,gBAGEA,MAHF,EAAA;EAID6L,QAAAA,UAAU,EAAE,IAJX;EAKD0J,QAAAA,aAAa,EAAE,EAAA;SALrB,CAAA,CAAA;OAlBF,CAyBE,OAAOha,CAAP,EAAU;EACV;EACA;EACA;EACA,MAAA,IAAIya,oBAAoB,CAACza,CAAD,CAAxB,EAA6B;EAC3B,QAAA,IAAIA,CAAC,CAAC2U,IAAF,KAAWrT,UAAU,CAACL,KAAtB,IAA+B,CAACyZ,kBAAkB,CAAC1a,CAAC,CAAC2a,QAAH,CAAtD,EAAoE;YAClE,MAAM3a,CAAC,CAAC2a,QAAR,CAAA;EACD,SAAA;;UACD,OAAO3a,CAAC,CAAC2a,QAAT,CAAA;EACD,OATS;EAWV;;;EACA,MAAA,IAAID,kBAAkB,CAAC1a,CAAD,CAAtB,EAA2B;EACzB,QAAA,OAAOA,CAAP,CAAA;EACD,OAAA;;EACD,MAAA,MAAMA,CAAN,CAAA;EACD,KAAA;EACF,GAAA;;IAED,eAAeua,MAAf,CACExG,OADF,EAEElR,OAFF,EAGE4R,WAHF,EAIEkF,cAJF,EAKEiB,cALF,EAM2E;EACzE,IAAA,IAAInW,MAAJ,CAAA;;EAEA,IAAA,IAAI,CAACgQ,WAAW,CAACjT,KAAZ,CAAkB1F,MAAvB,EAA+B;EAC7B,MAAA,IAAImF,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;UACtCkF,MAAM,EAAEb,OAAO,CAACa,MADsB;UAEtClY,QAAQ,EAAE,IAAIS,GAAJ,CAAQ4W,OAAO,CAAC3U,GAAhB,EAAqB1C,QAFO;EAGtCmY,QAAAA,OAAO,EAAEJ,WAAW,CAACjT,KAAZ,CAAkBO,EAAAA;EAHW,OAAN,CAAlC,CAAA;;EAKA,MAAA,IAAI6Y,cAAJ,EAAoB;EAClB,QAAA,MAAM3Z,KAAN,CAAA;EACD,OAAA;;EACDwD,MAAAA,MAAM,GAAG;UACPkQ,IAAI,EAAErT,UAAU,CAACL,KADV;EAEPA,QAAAA,KAAAA;SAFF,CAAA;EAID,KAbD,MAaO;EACLwD,MAAAA,MAAM,GAAG,MAAMqQ,kBAAkB,CAC/B,QAD+B,EAE/Bf,OAF+B,EAG/BU,WAH+B,EAI/B5R,OAJ+B,EAK/BL,QAL+B,EAM/B,IAN+B,EAO/BoY,cAP+B,EAQ/BjB,cAR+B,CAAjC,CAAA;;EAWA,MAAA,IAAI5F,OAAO,CAACxI,MAAR,CAAeW,OAAnB,EAA4B;EAC1B,QAAA,IAAI0I,MAAM,GAAGgG,cAAc,GAAG,YAAH,GAAkB,OAA7C,CAAA;EACA,QAAA,MAAM,IAAIhb,KAAJ,CAAagV,MAAb,GAAN,iBAAA,CAAA,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,IAAIG,gBAAgB,CAACtQ,MAAD,CAApB,EAA8B;EAC5B;EACA;EACA;EACA;EACA,MAAA,MAAM,IAAI6F,QAAJ,CAAa,IAAb,EAAmB;UACvBJ,MAAM,EAAEzF,MAAM,CAACyF,MADQ;EAEvBC,QAAAA,OAAO,EAAE;YACP0Q,QAAQ,EAAEpW,MAAM,CAACjI,QAAAA;EADV,SAAA;EAFc,OAAnB,CAAN,CAAA;EAMD,KAAA;;EAED,IAAA,IAAI2Y,gBAAgB,CAAC1Q,MAAD,CAApB,EAA8B;EAC5B,MAAA,IAAIxD,KAAK,GAAGyO,sBAAsB,CAAC,GAAD,EAAM;EAAEiF,QAAAA,IAAI,EAAE,cAAA;EAAR,OAAN,CAAlC,CAAA;;EACA,MAAA,IAAIiG,cAAJ,EAAoB;EAClB,QAAA,MAAM3Z,KAAN,CAAA;EACD,OAAA;;EACDwD,MAAAA,MAAM,GAAG;UACPkQ,IAAI,EAAErT,UAAU,CAACL,KADV;EAEPA,QAAAA,KAAAA;SAFF,CAAA;EAID,KAAA;;EAED,IAAA,IAAI2Z,cAAJ,EAAoB;EAClB;EACA;EACA,MAAA,IAAI3F,aAAa,CAACxQ,MAAD,CAAjB,EAA2B;UACzB,MAAMA,MAAM,CAACxD,KAAb,CAAA;EACD,OAAA;;QAED,OAAO;UACL4B,OAAO,EAAE,CAAC4R,WAAD,CADJ;EAELpE,QAAAA,UAAU,EAAE,EAFP;EAGLC,QAAAA,UAAU,EAAE;EAAE,UAAA,CAACmE,WAAW,CAACjT,KAAZ,CAAkBO,EAAnB,GAAwB0C,MAAM,CAACsF,IAAAA;WAHxC;EAILwG,QAAAA,MAAM,EAAE,IAJH;EAKL;EACA;EACAuJ,QAAAA,UAAU,EAAE,GAPP;EAQLC,QAAAA,aAAa,EAAE,EARV;EASLC,QAAAA,aAAa,EAAE,EATV;EAULvI,QAAAA,eAAe,EAAE,IAAA;SAVnB,CAAA;EAYD,KAAA;;EAED,IAAA,IAAIwD,aAAa,CAACxQ,MAAD,CAAjB,EAA2B;EACzB;EACA;QACA,IAAIyQ,aAAa,GAAGhB,mBAAmB,CAACrR,OAAD,EAAU4R,WAAW,CAACjT,KAAZ,CAAkBO,EAA5B,CAAvC,CAAA;EACA,MAAA,IAAI+Y,OAAO,GAAG,MAAMN,aAAa,CAC/BzG,OAD+B,EAE/BlR,OAF+B,EAG/B8W,cAH+B,EAI/Bhe,SAJ+B,EAK/B;EACE,QAAA,CAACuZ,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,GAA0B0C,MAAM,CAACxD,KAAAA;SANJ,CAAjC,CAJyB;;EAezB,MAAA,OAAA,QAAA,CAAA,EAAA,EACK6Z,OADL,EAAA;EAEEhB,QAAAA,UAAU,EAAEnM,oBAAoB,CAAClJ,MAAM,CAACxD,KAAR,CAApB,GACRwD,MAAM,CAACxD,KAAP,CAAaiJ,MADL,GAER,GAJN;EAKEoG,QAAAA,UAAU,EAAE,IALd;EAME0J,QAAAA,aAAa,EACPvV,QAAAA,CAAAA,EAAAA,EAAAA,MAAM,CAAC0F,OAAP,GAAiB;EAAE,UAAA,CAACsK,WAAW,CAACjT,KAAZ,CAAkBO,EAAnB,GAAwB0C,MAAM,CAAC0F,OAAAA;EAAjC,SAAjB,GAA8D,EADvD,CAAA;EANf,OAAA,CAAA,CAAA;EAUD,KAxGwE;;;MA2GzE,IAAI4Q,aAAa,GAAG,IAAIxG,OAAJ,CAAYR,OAAO,CAAC3U,GAApB,EAAyB;QAC3C+K,OAAO,EAAE4J,OAAO,CAAC5J,OAD0B;QAE3CoD,QAAQ,EAAEwG,OAAO,CAACxG,QAFyB;QAG3ChC,MAAM,EAAEwI,OAAO,CAACxI,MAAAA;EAH2B,KAAzB,CAApB,CAAA;MAKA,IAAIuP,OAAO,GAAG,MAAMN,aAAa,CAACO,aAAD,EAAgBlY,OAAhB,EAAyB8W,cAAzB,CAAjC,CAAA;EAEA,IAAA,OAAA,QAAA,CAAA,EAAA,EACKmB,OADL,EAGMrW,MAAM,CAACqV,UAAP,GAAoB;QAAEA,UAAU,EAAErV,MAAM,CAACqV,UAAAA;EAArB,KAApB,GAAwD,EAH9D,EAAA;EAIExJ,MAAAA,UAAU,EAAE;EACV,QAAA,CAACmE,WAAW,CAACjT,KAAZ,CAAkBO,EAAnB,GAAwB0C,MAAM,CAACsF,IAAAA;SALnC;EAOEiQ,MAAAA,aAAa,EACPvV,QAAAA,CAAAA,EAAAA,EAAAA,MAAM,CAAC0F,OAAP,GAAiB;EAAE,QAAA,CAACsK,WAAW,CAACjT,KAAZ,CAAkBO,EAAnB,GAAwB0C,MAAM,CAAC0F,OAAAA;EAAjC,OAAjB,GAA8D,EADvD,CAAA;EAPf,KAAA,CAAA,CAAA;EAWD,GAAA;;IAED,eAAeqQ,aAAf,CACEzG,OADF,EAEElR,OAFF,EAGE8W,cAHF,EAIEW,UAJF,EAKEhG,kBALF,EAYE;EACA,IAAA,IAAIsG,cAAc,GAAGN,UAAU,IAAI,IAAnC,CADA;;MAIA,IAAIM,cAAc,IAAI,EAACN,UAAD,IAAA,IAAA,IAACA,UAAU,CAAE9Y,KAAZ,CAAkBsO,MAAnB,CAAtB,EAAiD;QAC/C,MAAMJ,sBAAsB,CAAC,GAAD,EAAM;UAChCkF,MAAM,EAAEb,OAAO,CAACa,MADgB;UAEhClY,QAAQ,EAAE,IAAIS,GAAJ,CAAQ4W,OAAO,CAAC3U,GAAhB,EAAqB1C,QAFC;EAGhCmY,QAAAA,OAAO,EAAEyF,UAAF,IAAA,IAAA,GAAA,KAAA,CAAA,GAAEA,UAAU,CAAE9Y,KAAZ,CAAkBO,EAAAA;EAHK,OAAN,CAA5B,CAAA;EAKD,KAAA;;MAED,IAAI4U,cAAc,GAAG2D,UAAU,GAC3B,CAACA,UAAD,CAD2B,GAE3BU,6BAA6B,CAC3BnY,OAD2B,EAE3ByD,MAAM,CAACsM,IAAP,CAAY0B,kBAAkB,IAAI,EAAlC,CAAA,CAAsC,CAAtC,CAF2B,CAFjC,CAAA;EAMA,IAAA,IAAIe,aAAa,GAAGsB,cAAc,CAAClR,MAAf,CAAuBoK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQsO,MAArC,CAApB,CAlBA;;EAqBA,IAAA,IAAIuF,aAAa,CAACxZ,MAAd,KAAyB,CAA7B,EAAgC;QAC9B,OAAO;UACLgH,OADK;EAEL;EACAwN,QAAAA,UAAU,EAAExN,OAAO,CAAC6C,MAAR,CACV,CAAC8F,GAAD,EAAMqE,CAAN,KAAYvJ,MAAM,CAACpF,MAAP,CAAcsK,GAAd,EAAmB;EAAE,UAAA,CAACqE,CAAC,CAACrO,KAAF,CAAQO,EAAT,GAAc,IAAA;WAAnC,CADF,EAEV,EAFU,CAHP;UAOLwO,MAAM,EAAE+D,kBAAkB,IAAI,IAPzB;EAQLwF,QAAAA,UAAU,EAAE,GARP;EASLC,QAAAA,aAAa,EAAE,EATV;EAULtI,QAAAA,eAAe,EAAE,IAAA;SAVnB,CAAA;EAYD,KAAA;;EAED,IAAA,IAAIkE,OAAO,GAAG,MAAM1K,OAAO,CAAC6M,GAAR,CAAY,CAC9B,GAAGzC,aAAa,CAAC/Z,GAAd,CAAmB8K,KAAD,IACnB0O,kBAAkB,CAChB,QADgB,EAEhBf,OAFgB,EAGhB3N,KAHgB,EAIhBvD,OAJgB,EAKhBL,QALgB,EAMhB,IANgB,EAOhBoY,cAPgB,EAQhBjB,cARgB,CADjB,CAD2B,CAAZ,CAApB,CAAA;;EAeA,IAAA,IAAI5F,OAAO,CAACxI,MAAR,CAAeW,OAAnB,EAA4B;EAC1B,MAAA,IAAI0I,MAAM,GAAGgG,cAAc,GAAG,YAAH,GAAkB,OAA7C,CAAA;EACA,MAAA,MAAM,IAAIhb,KAAJ,CAAagV,MAAb,GAAN,iBAAA,CAAA,CAAA;EACD,KAtDD;;;EAyDA,IAAA,IAAInD,eAAe,GAAG,IAAIhB,GAAJ,EAAtB,CAAA;EACA,IAAA,IAAIqK,OAAO,GAAGG,sBAAsB,CAClCpY,OADkC,EAElCwS,aAFkC,EAGlCM,OAHkC,EAIlCrB,kBAJkC,EAKlC7C,eALkC,CAApC,CA1DA;;EAmEA,IAAA,IAAIyJ,eAAe,GAAG,IAAIrZ,GAAJ,CACpBwT,aAAa,CAAC/Z,GAAd,CAAmB8K,KAAD,IAAWA,KAAK,CAAC5E,KAAN,CAAYO,EAAzC,CADoB,CAAtB,CAAA;EAGAc,IAAAA,OAAO,CAACgB,OAAR,CAAiBuC,KAAD,IAAW;QACzB,IAAI,CAAC8U,eAAe,CAAChZ,GAAhB,CAAoBkE,KAAK,CAAC5E,KAAN,CAAYO,EAAhC,CAAL,EAA0C;UACxC+Y,OAAO,CAACzK,UAAR,CAAmBjK,KAAK,CAAC5E,KAAN,CAAYO,EAA/B,CAAA,GAAqC,IAArC,CAAA;EACD,OAAA;OAHH,CAAA,CAAA;EAMA,IAAA,OAAA,QAAA,CAAA,EAAA,EACK+Y,OADL,EAAA;QAEEjY,OAFF;EAGE4O,MAAAA,eAAe,EACbA,eAAe,CAAC3E,IAAhB,GAAuB,CAAvB,GACIxG,MAAM,CAAC6U,WAAP,CAAmB1J,eAAe,CAACpW,OAAhB,EAAnB,CADJ,GAEI,IAAA;EANR,KAAA,CAAA,CAAA;EAQD,GAAA;;IAED,OAAO;MACL2T,UADK;MAEL0K,KAFK;EAGLS,IAAAA,UAAAA;KAHF,CAAA;EAKD;EAID;EACA;EACA;;EAEA;EACA;EACA;EACA;;EACO,SAASiB,yBAAT,CACL1Z,MADK,EAELoZ,OAFK,EAGL7Z,KAHK,EAIL;IACA,IAAIoa,UAAgC,gBAC/BP,OAD+B,EAAA;EAElChB,IAAAA,UAAU,EAAE,GAFsB;EAGlCvJ,IAAAA,MAAM,EAAE;QACN,CAACuK,OAAO,CAACQ,0BAAR,IAAsC5Z,MAAM,CAAC,CAAD,CAAN,CAAUK,EAAjD,GAAsDd,KAAAA;EADhD,KAAA;KAHV,CAAA,CAAA;;EAOA,EAAA,OAAOoa,UAAP,CAAA;EACD,CAAA;;EAED,SAASE,sBAAT,CACEvI,IADF,EAEqC;EACnC,EAAA,OAAOA,IAAI,IAAI,IAAR,IAAgB,cAAcA,IAArC,CAAA;EACD;EAGD;;;EACA,SAASE,wBAAT,CACE5W,EADF,EAEE0W,IAFF,EAGEwI,SAHF,EAQE;EAAA,EAAA,IALAA,SAKA,KAAA,KAAA,CAAA,EAAA;EALAA,IAAAA,SAKA,GALY,KAKZ,CAAA;EAAA,GAAA;;EACA,EAAA,IAAIne,IAAI,GAAG,OAAOf,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAnD,CADA;;IAIA,IAAI,CAAC0W,IAAD,IAAS,CAACuI,sBAAsB,CAACvI,IAAD,CAApC,EAA4C;MAC1C,OAAO;EAAE3V,MAAAA,IAAAA;OAAT,CAAA;EACD,GAAA;;IAED,IAAI2V,IAAI,CAAC7E,UAAL,IAAmB,CAACyL,aAAa,CAAC5G,IAAI,CAAC7E,UAAN,CAArC,EAAwD;MACtD,OAAO;QACL9Q,IADK;EAEL4D,MAAAA,KAAK,EAAEyO,sBAAsB,CAAC,GAAD,EAAM;UAAEkF,MAAM,EAAE5B,IAAI,CAAC7E,UAAAA;SAArB,CAAA;OAF/B,CAAA;EAID,GAbD;;;EAgBA,EAAA,IAAI8E,UAAJ,CAAA;;IACA,IAAID,IAAI,CAAC1E,QAAT,EAAmB;EACjB2E,IAAAA,UAAU,GAAG;EACX9E,MAAAA,UAAU,EAAE6E,IAAI,CAAC7E,UAAL,IAAmB,KADpB;EAEXC,MAAAA,UAAU,EAAEqN,iBAAiB,CAACpe,IAAD,CAFlB;EAGXgR,MAAAA,WAAW,EACR2E,IAAI,IAAIA,IAAI,CAAC3E,WAAd,IAA8B,mCAJrB;QAKXC,QAAQ,EAAE0E,IAAI,CAAC1E,QAAAA;OALjB,CAAA;;EAQA,IAAA,IAAIoE,gBAAgB,CAACO,UAAU,CAAC9E,UAAZ,CAApB,EAA6C;QAC3C,OAAO;UAAE9Q,IAAF;EAAQ4V,QAAAA,UAAAA;SAAf,CAAA;EACD,KAAA;EACF,GA7BD;;;EAgCA,EAAA,IAAI1S,UAAU,GAAGjD,SAAS,CAACD,IAAD,CAA1B,CAAA;IACA,IAAIqe,YAAY,GAAGC,6BAA6B,CAAC3I,IAAI,CAAC1E,QAAN,CAAhD,CAjCA;EAmCA;EACA;;EACA,EAAA,IAAIkN,SAAS,IAAIjb,UAAU,CAAChD,MAAxB,IAAkCqe,kBAAkB,CAACrb,UAAU,CAAChD,MAAZ,CAAxD,EAA6E;EAC3Eme,IAAAA,YAAY,CAACG,MAAb,CAAoB,OAApB,EAA6B,EAA7B,CAAA,CAAA;EACD,GAAA;;IACDtb,UAAU,CAAChD,MAAX,GAAA,GAAA,GAAwBme,YAAxB,CAAA;IAEA,OAAO;EAAEre,IAAAA,IAAI,EAAEL,UAAU,CAACuD,UAAD,CAAlB;EAAgC0S,IAAAA,UAAAA;KAAvC,CAAA;EACD;EAGD;;;EACA,SAAS+H,6BAAT,CACEnY,OADF,EAEEiZ,UAFF,EAGE;IACA,IAAIC,eAAe,GAAGlZ,OAAtB,CAAA;;EACA,EAAA,IAAIiZ,UAAJ,EAAgB;EACd,IAAA,IAAItgB,KAAK,GAAGqH,OAAO,CAACmZ,SAAR,CAAmBnM,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAe+Z,UAAxC,CAAZ,CAAA;;MACA,IAAItgB,KAAK,IAAI,CAAb,EAAgB;QACdugB,eAAe,GAAGlZ,OAAO,CAACtD,KAAR,CAAc,CAAd,EAAiB/D,KAAjB,CAAlB,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAOugB,eAAP,CAAA;EACD,CAAA;;EAED,SAASxG,gBAAT,CACEtY,OADF,EAEEvB,KAFF,EAGEmH,OAHF,EAIEoQ,UAJF,EAKEzW,QALF,EAMEwU,sBANF,EAOEC,uBAPF,EAQEC,qBARF,EASEM,gBATF,EAUEkC,WAVF,EAWElR,QAXF,EAYEyR,iBAZF,EAaEb,YAbF,EAcqD;IACnD,IAAI2D,YAAY,GAAG3D,YAAY,GAC3B9M,MAAM,CAAC+T,MAAP,CAAcjH,YAAd,CAAA,CAA4B,CAA5B,CAD2B,GAE3Ba,iBAAiB,GACjB3N,MAAM,CAAC+T,MAAP,CAAcpG,iBAAd,CAAiC,CAAA,CAAjC,CADiB,GAEjBtY,SAJJ,CAAA;IAMA,IAAIsgB,UAAU,GAAGhf,OAAO,CAACC,SAAR,CAAkBxB,KAAK,CAACc,QAAxB,CAAjB,CAAA;EACA,EAAA,IAAI0f,OAAO,GAAGjf,OAAO,CAACC,SAAR,CAAkBV,QAAlB,CAAd,CAAA;EAEA,EAAA,IAAI2f,uBAAuB;EAEzBnL,EAAAA,sBAAsB;EAEtBiL,EAAAA,UAAU,CAAC9b,QAAX,EAAA,KAA0B+b,OAAO,CAAC/b,QAAR,EAF1B;EAIA8b,EAAAA,UAAU,CAAC1e,MAAX,KAAsB2e,OAAO,CAAC3e,MANhC,CAVmD;;EAmBnD,EAAA,IAAIue,UAAU,GAAG1I,YAAY,GAAG9M,MAAM,CAACsM,IAAP,CAAYQ,YAAZ,CAAA,CAA0B,CAA1B,CAAH,GAAkCzX,SAA/D,CAAA;EACA,EAAA,IAAIogB,eAAe,GAAGf,6BAA6B,CAACnY,OAAD,EAAUiZ,UAAV,CAAnD,CAAA;IAEA,IAAIM,iBAAiB,GAAGL,eAAe,CAACtW,MAAhB,CAAuB,CAACW,KAAD,EAAQ5K,KAAR,KAAkB;EAC/D,IAAA,IAAI4K,KAAK,CAAC5E,KAAN,CAAYsO,MAAZ,IAAsB,IAA1B,EAAgC;EAC9B,MAAA,OAAO,KAAP,CAAA;EACD,KAH8D;;;EAM/D,IAAA,IACEuM,WAAW,CAAC3gB,KAAK,CAAC2U,UAAP,EAAmB3U,KAAK,CAACmH,OAAN,CAAcrH,KAAd,CAAnB,EAAyC4K,KAAzC,CAAX,IACA6K,uBAAuB,CAACzL,IAAxB,CAA8BzD,EAAD,IAAQA,EAAE,KAAKqE,KAAK,CAAC5E,KAAN,CAAYO,EAAxD,CAFF,EAGE;EACA,MAAA,OAAO,IAAP,CAAA;EACD,KAX8D;EAc/D;EACA;EACA;;;EACA,IAAA,IAAIua,iBAAiB,GAAG5gB,KAAK,CAACmH,OAAN,CAAcrH,KAAd,CAAxB,CAAA;MACA,IAAI+gB,cAAc,GAAGnW,KAArB,CAAA;MAEA,OAAOoW,sBAAsB,CAACpW,KAAD,EAAA,QAAA,CAAA;QAC3B6V,UAD2B;QAE3BQ,aAAa,EAAEH,iBAAiB,CAAC/V,MAFN;QAG3B2V,OAH2B;QAI3BQ,UAAU,EAAEH,cAAc,CAAChW,MAAAA;EAJA,KAAA,EAKxB0M,UALwB,EAAA;QAM3B8D,YAN2B;EAO3BoF,MAAAA,uBAAuB,EACrBA,uBAAuB,IACvBQ,kBAAkB,CAACL,iBAAD,EAAoBC,cAApB,CAAA;OATtB,CAAA,CAAA,CAAA;KApBsB,CAAxB,CAtBmD;;IAwDnD,IAAIjH,oBAA2C,GAAG,EAAlD,CAAA;EACA9D,EAAAA,gBAAgB,CAAC3N,OAAjB,CAAyB,CAACkU,CAAD,EAAIxb,GAAJ,KAAY;EACnC;EACA,IAAA,IAAI,CAACsG,OAAO,CAAC2C,IAAR,CAAcqK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAegW,CAAC,CAAClD,OAArC,CAAL,EAAoD;EAClD,MAAA,OAAA;EACD,KAAA;;EAED,IAAA,IAAI+H,cAAc,GAAGta,WAAW,CAACoR,WAAD,EAAcqE,CAAC,CAAC1a,IAAhB,EAAsBmF,QAAtB,CAAhC,CANmC;EASnC;;MACA,IAAI,CAACoa,cAAL,EAAqB;EACnBtH,MAAAA,oBAAoB,CAAC7X,IAArB,CAAA,QAAA,CAAA;EAA4BlB,QAAAA,GAAAA;EAA5B,OAAA,EAAoCwb,CAApC,EAAA;EAAuClV,QAAAA,OAAO,EAAE,IAAhD;EAAsDuD,QAAAA,KAAK,EAAE,IAAA;EAA7D,OAAA,CAAA,CAAA,CAAA;EACA,MAAA,OAAA;EACD,KAAA;;MAED,IAAIyW,YAAY,GAAGnI,cAAc,CAACkI,cAAD,EAAiB7E,CAAC,CAAC1a,IAAnB,CAAjC,CAAA;;EAEA,IAAA,IAAI6T,qBAAqB,CAACpN,QAAtB,CAA+BvH,GAA/B,CAAJ,EAAyC;EACvC+Y,MAAAA,oBAAoB,CAAC7X,IAArB,CAAA,QAAA,CAAA;UACElB,GADF;EAEEsG,QAAAA,OAAO,EAAE+Z,cAFX;EAGExW,QAAAA,KAAK,EAAEyW,YAAAA;EAHT,OAAA,EAIK9E,CAJL,CAAA,CAAA,CAAA;EAMA,MAAA,OAAA;EACD,KAzBkC;EA4BnC;EACA;EACA;;;EACA,IAAA,IAAI+E,gBAAgB,GAAGN,sBAAsB,CAACK,YAAD,EAAA,QAAA,CAAA;QAC3CZ,UAD2C;EAE3CQ,MAAAA,aAAa,EAAE/gB,KAAK,CAACmH,OAAN,CAAcnH,KAAK,CAACmH,OAAN,CAAchH,MAAd,GAAuB,CAArC,EAAwC0K,MAFZ;QAG3C2V,OAH2C;QAI3CQ,UAAU,EAAE7Z,OAAO,CAACA,OAAO,CAAChH,MAAR,GAAiB,CAAlB,CAAP,CAA4B0K,MAAAA;EAJG,KAAA,EAKxC0M,UALwC,EAAA;QAM3C8D,YAN2C;EAO3CoF,MAAAA,uBAAAA;OAPF,CAAA,CAAA,CAAA;;EASA,IAAA,IAAIW,gBAAJ,EAAsB;EACpBxH,MAAAA,oBAAoB,CAAC7X,IAArB,CAAA,QAAA,CAAA;UACElB,GADF;EAEEsG,QAAAA,OAAO,EAAE+Z,cAFX;EAGExW,QAAAA,KAAK,EAAEyW,YAAAA;EAHT,OAAA,EAIK9E,CAJL,CAAA,CAAA,CAAA;EAMD,KAAA;KA/CH,CAAA,CAAA;EAkDA,EAAA,OAAO,CAACqE,iBAAD,EAAoB9G,oBAApB,CAAP,CAAA;EACD,CAAA;;EAED,SAAS+G,WAAT,CACEU,iBADF,EAEEC,YAFF,EAGE5W,KAHF,EAIE;EACA,EAAA,IAAI6W,KAAK;EAEP,EAAA,CAACD,YAAD;IAEA5W,KAAK,CAAC5E,KAAN,CAAYO,EAAZ,KAAmBib,YAAY,CAACxb,KAAb,CAAmBO,EAJxC,CADA;EAQA;;EACA,EAAA,IAAImb,aAAa,GAAGH,iBAAiB,CAAC3W,KAAK,CAAC5E,KAAN,CAAYO,EAAb,CAAjB,KAAsCpG,SAA1D,CATA;;IAYA,OAAOshB,KAAK,IAAIC,aAAhB,CAAA;EACD,CAAA;;EAED,SAASP,kBAAT,CACEK,YADF,EAEE5W,KAFF,EAGE;EACA,EAAA,IAAI+W,WAAW,GAAGH,YAAY,CAACxb,KAAb,CAAmBnE,IAArC,CAAA;IACA;EAEE2f,IAAAA,YAAY,CAACtgB,QAAb,KAA0B0J,KAAK,CAAC1J,QAAhC;EAEA;MACCygB,WAAW,IAAI,IAAf,IACCA,WAAW,CAAC7Y,QAAZ,CAAqB,GAArB,CADD,IAEC0Y,YAAY,CAACzW,MAAb,CAAoB,GAApB,CAAA,KAA6BH,KAAK,CAACG,MAAN,CAAa,GAAb,CAAA;EAPjC,IAAA;EASD,CAAA;;EAED,SAASiW,sBAAT,CACEY,WADF,EAEEC,GAFF,EAGE;EACA,EAAA,IAAID,WAAW,CAAC5b,KAAZ,CAAkBsb,gBAAtB,EAAwC;MACtC,IAAIQ,WAAW,GAAGF,WAAW,CAAC5b,KAAZ,CAAkBsb,gBAAlB,CAAmCO,GAAnC,CAAlB,CAAA;;EACA,IAAA,IAAI,OAAOC,WAAP,KAAuB,SAA3B,EAAsC;EACpC,MAAA,OAAOA,WAAP,CAAA;EACD,KAAA;EACF,GAAA;;IAED,OAAOD,GAAG,CAAClB,uBAAX,CAAA;EACD,CAAA;;EAED,eAAerH,kBAAf,CACEH,IADF,EAEEZ,OAFF,EAGE3N,KAHF,EAIEvD,OAJF,EAKEL,QALF,EAME+a,eANF,EAOE3C,cAPF,EAQEjB,cARF,EASuB;EAAA,EAAA,IAJrBnX,QAIqB,KAAA,KAAA,CAAA,EAAA;EAJrBA,IAAAA,QAIqB,GAJV,GAIU,CAAA;EAAA,GAAA;;EAAA,EAAA,IAHrB+a,eAGqB,KAAA,KAAA,CAAA,EAAA;EAHrBA,IAAAA,eAGqB,GAHM,KAGN,CAAA;EAAA,GAAA;;EAAA,EAAA,IAFrB3C,cAEqB,KAAA,KAAA,CAAA,EAAA;EAFrBA,IAAAA,cAEqB,GAFK,KAEL,CAAA;EAAA,GAAA;;EACrB,EAAA,IAAI4C,UAAJ,CAAA;IACA,IAAI/Y,MAAJ,CAFqB;;EAKrB,EAAA,IAAIsG,MAAJ,CAAA;EACA,EAAA,IAAIC,YAAY,GAAG,IAAIC,OAAJ,CAAY,CAACrE,CAAD,EAAIsE,CAAJ,KAAWH,MAAM,GAAGG,CAAhC,CAAnB,CAAA;;EACA,EAAA,IAAIuS,QAAQ,GAAG,MAAM1S,MAAM,EAA3B,CAAA;;EACAgJ,EAAAA,OAAO,CAACxI,MAAR,CAAenK,gBAAf,CAAgC,OAAhC,EAAyCqc,QAAzC,CAAA,CAAA;;IAEA,IAAI;EACF,IAAA,IAAIC,OAAO,GAAGtX,KAAK,CAAC5E,KAAN,CAAYmT,IAAZ,CAAd,CAAA;MACAlV,SAAS,CACPie,OADO,EAAA,qBAAA,GAEe/I,IAFf,GAAA,mBAAA,GAEsCvO,KAAK,CAAC5E,KAAN,CAAYO,EAFlD,GAAT,UAAA,CAAA,CAAA;MAKA0C,MAAM,GAAG,MAAMwG,OAAO,CAACW,IAAR,CAAa,CAC1B8R,OAAO,CAAC;QAAE3J,OAAF;QAAWxN,MAAM,EAAEH,KAAK,CAACG,MAAzB;EAAiCuU,MAAAA,OAAO,EAAEnB,cAAAA;EAA1C,KAAD,CADmB,EAE1B3O,YAF0B,CAAb,CAAf,CAAA;MAKAvL,SAAS,CACPgF,MAAM,KAAK9I,SADJ,EAEP,cAAegZ,IAAAA,IAAI,KAAK,QAAT,GAAoB,WAApB,GAAkC,UAAjD,CAAA,GAAA,aAAA,IAAA,IAAA,GACMvO,KAAK,CAAC5E,KAAN,CAAYO,EADlB,GAAA,2CAAA,GACgE4S,IADhE,GAAA,IAAA,CAAA,GAAA,4CAFO,CAAT,CAAA;KAZF,CAkBE,OAAO3U,CAAP,EAAU;MACVwd,UAAU,GAAGlc,UAAU,CAACL,KAAxB,CAAA;EACAwD,IAAAA,MAAM,GAAGzE,CAAT,CAAA;EACD,GArBD,SAqBU;EACR+T,IAAAA,OAAO,CAACxI,MAAR,CAAelK,mBAAf,CAAmC,OAAnC,EAA4Coc,QAA5C,CAAA,CAAA;EACD,GAAA;;EAED,EAAA,IAAIvD,UAAU,CAACzV,MAAD,CAAd,EAAwB;EACtB,IAAA,IAAIyF,MAAM,GAAGzF,MAAM,CAACyF,MAApB,CADsB;;EAItB,IAAA,IAAI8D,mBAAmB,CAAC9L,GAApB,CAAwBgI,MAAxB,CAAJ,EAAqC;QACnC,IAAI1N,QAAQ,GAAGiI,MAAM,CAAC0F,OAAP,CAAe8B,GAAf,CAAmB,UAAnB,CAAf,CAAA;EACAxM,MAAAA,SAAS,CACPjD,QADO,EAEP,4EAFO,CAAT,CAFmC;;EAQnC,MAAA,IAAI,CAACmS,kBAAkB,CAAC/I,IAAnB,CAAwBpJ,QAAxB,CAAL,EAAwC;EACtC,QAAA,IAAImhB,aAAa,GAAG9a,OAAO,CAACtD,KAAR,CAAc,CAAd,EAAiBsD,OAAO,CAACvD,OAAR,CAAgB8G,KAAhB,CAAA,GAAyB,CAA1C,CAApB,CAAA;EACA,QAAA,IAAI8C,cAAc,GAAGH,0BAA0B,CAAC4U,aAAD,CAA1B,CAA0CriB,GAA1C,CAClB8K,KAAD,IAAWA,KAAK,CAACI,YADE,CAArB,CAAA;EAGA,QAAA,IAAIoX,gBAAgB,GAAG5U,SAAS,CAC9BxM,QAD8B,EAE9B0M,cAF8B,EAG9B,IAAI/L,GAAJ,CAAQ4W,OAAO,CAAC3U,GAAhB,CAAA,CAAqB1C,QAHS,CAAhC,CAAA;UAKA+C,SAAS,CACPzC,UAAU,CAAC4gB,gBAAD,CADH,EAEiCphB,uCAAAA,GAAAA,QAFjC,CAAT,CAVsC;;EAgBtC,QAAA,IAAIgG,QAAJ,EAAc;EACZ,UAAA,IAAInF,IAAI,GAAGugB,gBAAgB,CAAClhB,QAA5B,CAAA;EACAkhB,UAAAA,gBAAgB,CAAClhB,QAAjB,GACEW,IAAI,KAAK,GAAT,GAAemF,QAAf,GAA0BgB,SAAS,CAAC,CAAChB,QAAD,EAAWnF,IAAX,CAAD,CADrC,CAAA;EAED,SAAA;;EAEDb,QAAAA,QAAQ,GAAGQ,UAAU,CAAC4gB,gBAAD,CAArB,CAAA;EACD,OAvBD,MAuBO,IAAI,CAACL,eAAL,EAAsB;EAC3B;EACA;EACA;UACA,IAAItB,UAAU,GAAG,IAAI9e,GAAJ,CAAQ4W,OAAO,CAAC3U,GAAhB,CAAjB,CAAA;UACA,IAAIA,GAAG,GAAG5C,QAAQ,CAAC+G,UAAT,CAAoB,IAApB,CACN,GAAA,IAAIpG,GAAJ,CAAQ8e,UAAU,CAAC4B,QAAX,GAAsBrhB,QAA9B,CADM,GAEN,IAAIW,GAAJ,CAAQX,QAAR,CAFJ,CAAA;UAGA,IAAIshB,cAAc,GAAGrb,aAAa,CAACrD,GAAG,CAAC1C,QAAL,EAAe8F,QAAf,CAAb,IAAyC,IAA9D,CAAA;;UACA,IAAIpD,GAAG,CAAC+B,MAAJ,KAAe8a,UAAU,CAAC9a,MAA1B,IAAoC2c,cAAxC,EAAwD;YACtDthB,QAAQ,GAAG4C,GAAG,CAAC1C,QAAJ,GAAe0C,GAAG,CAAC7B,MAAnB,GAA4B6B,GAAG,CAAC5B,IAA3C,CAAA;EACD,SAAA;EACF,OA3CkC;EA8CnC;EACA;EACA;;;EACA,MAAA,IAAI+f,eAAJ,EAAqB;EACnB9Y,QAAAA,MAAM,CAAC0F,OAAP,CAAeE,GAAf,CAAmB,UAAnB,EAA+B7N,QAA/B,CAAA,CAAA;EACA,QAAA,MAAMiI,MAAN,CAAA;EACD,OAAA;;QAED,OAAO;UACLkQ,IAAI,EAAErT,UAAU,CAACiM,QADZ;UAELrD,MAFK;UAGL1N,QAHK;UAIL6W,UAAU,EAAE5O,MAAM,CAAC0F,OAAP,CAAe8B,GAAf,CAAmB,oBAAnB,CAA6C,KAAA,IAAA;SAJ3D,CAAA;EAMD,KAhEqB;EAmEtB;EACA;;;EACA,IAAA,IAAI2O,cAAJ,EAAoB;EAClB;QACA,MAAM;EACJjG,QAAAA,IAAI,EAAE6I,UAAU,IAAIlc,UAAU,CAACyI,IAD3B;EAEJ4Q,QAAAA,QAAQ,EAAElW,MAAAA;SAFZ,CAAA;EAID,KAAA;;EAED,IAAA,IAAIsF,IAAJ,CAAA;MACA,IAAIgU,WAAW,GAAGtZ,MAAM,CAAC0F,OAAP,CAAe8B,GAAf,CAAmB,cAAnB,CAAlB,CA9EsB;EAgFtB;;EACA,IAAA,IAAI8R,WAAW,IAAI,uBAAA,CAAwBnY,IAAxB,CAA6BmY,WAA7B,CAAnB,EAA8D;EAC5DhU,MAAAA,IAAI,GAAG,MAAMtF,MAAM,CAACqF,IAAP,EAAb,CAAA;EACD,KAFD,MAEO;EACLC,MAAAA,IAAI,GAAG,MAAMtF,MAAM,CAACuZ,IAAP,EAAb,CAAA;EACD,KAAA;;EAED,IAAA,IAAIR,UAAU,KAAKlc,UAAU,CAACL,KAA9B,EAAqC;QACnC,OAAO;EACL0T,QAAAA,IAAI,EAAE6I,UADD;UAELvc,KAAK,EAAE,IAAIuM,aAAJ,CAAkBtD,MAAlB,EAA0BzF,MAAM,CAACgJ,UAAjC,EAA6C1D,IAA7C,CAFF;UAGLI,OAAO,EAAE1F,MAAM,CAAC0F,OAAAA;SAHlB,CAAA;EAKD,KAAA;;MAED,OAAO;QACLwK,IAAI,EAAErT,UAAU,CAACyI,IADZ;QAELA,IAFK;QAGL+P,UAAU,EAAErV,MAAM,CAACyF,MAHd;QAILC,OAAO,EAAE1F,MAAM,CAAC0F,OAAAA;OAJlB,CAAA;EAMD,GAAA;;EAED,EAAA,IAAIqT,UAAU,KAAKlc,UAAU,CAACL,KAA9B,EAAqC;MACnC,OAAO;EAAE0T,MAAAA,IAAI,EAAE6I,UAAR;EAAoBvc,MAAAA,KAAK,EAAEwD,MAAAA;OAAlC,CAAA;EACD,GAAA;;IAED,IAAIA,MAAM,YAAY+F,YAAtB,EAAoC;EAAA,IAAA,IAAA,YAAA,EAAA,aAAA,CAAA;;MAClC,OAAO;QACLmK,IAAI,EAAErT,UAAU,CAAC2c,QADZ;EAELhI,MAAAA,YAAY,EAAExR,MAFT;EAGLqV,MAAAA,UAAU,kBAAErV,MAAM,CAACuF,IAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAE,aAAaE,MAHpB;EAILC,MAAAA,OAAO,EAAE,CAAA,CAAA,aAAA,GAAA1F,MAAM,CAACuF,IAAP,KAAaG,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAAA,CAAAA,OAAb,KAAwB,IAAIC,OAAJ,CAAY3F,MAAM,CAACuF,IAAP,CAAYG,OAAxB,CAAA;OAJnC,CAAA;EAMD,GAAA;;IAED,OAAO;MAAEwK,IAAI,EAAErT,UAAU,CAACyI,IAAnB;EAAyBA,IAAAA,IAAI,EAAEtF,MAAAA;KAAtC,CAAA;EACD;EAGD;EACA;;;EACA,SAASuP,uBAAT,CACE/W,OADF,EAEET,QAFF,EAGE+O,MAHF,EAIE0H,UAJF,EAKW;EACT,EAAA,IAAI7T,GAAG,GAAGnC,OAAO,CAACC,SAAR,CAAkBue,iBAAiB,CAACjf,QAAD,CAAnC,CAA+C2D,CAAAA,QAA/C,EAAV,CAAA;EACA,EAAA,IAAI6J,IAAiB,GAAG;EAAEuB,IAAAA,MAAAA;KAA1B,CAAA;;IAEA,IAAI0H,UAAU,IAAIP,gBAAgB,CAACO,UAAU,CAAC9E,UAAZ,CAAlC,EAA2D;MACzD,IAAI;QAAEA,UAAF;QAAcE,WAAd;EAA2BC,MAAAA,QAAAA;EAA3B,KAAA,GAAwC2E,UAA5C,CAAA;EACAjJ,IAAAA,IAAI,CAAC4K,MAAL,GAAczG,UAAU,CAAC+P,WAAX,EAAd,CAAA;EACAlU,IAAAA,IAAI,CAACmU,IAAL,GACE9P,WAAW,KAAK,mCAAhB,GACIsN,6BAA6B,CAACrN,QAAD,CADjC,GAEIA,QAHN,CAAA;EAID,GAXQ;;;EAcT,EAAA,OAAO,IAAIiG,OAAJ,CAAYnV,GAAZ,EAAiB4K,IAAjB,CAAP,CAAA;EACD,CAAA;;EAED,SAAS2R,6BAAT,CAAuCrN,QAAvC,EAA4E;EAC1E,EAAA,IAAIoN,YAAY,GAAG,IAAI0C,eAAJ,EAAnB,CAAA;;IAEA,KAAK,IAAI,CAAC7hB,GAAD,EAAMmD,KAAN,CAAT,IAAyB4O,QAAQ,CAACjT,OAAT,EAAzB,EAA6C;EAC3C;EACAqgB,IAAAA,YAAY,CAACG,MAAb,CAAoBtf,GAApB,EAAyBmD,KAAK,YAAY2e,IAAjB,GAAwB3e,KAAK,CAAC4e,IAA9B,GAAqC5e,KAA9D,CAAA,CAAA;EACD,GAAA;;EAED,EAAA,OAAOgc,YAAP,CAAA;EACD,CAAA;;EAED,SAAST,sBAAT,CACEpY,OADF,EAEEwS,aAFF,EAGEM,OAHF,EAIEvC,YAJF,EAKE3B,eALF,EAWE;EACA;IACA,IAAIpB,UAAqC,GAAG,EAA5C,CAAA;IACA,IAAIE,MAAoC,GAAG,IAA3C,CAAA;EACA,EAAA,IAAIuJ,UAAJ,CAAA;IACA,IAAIyE,UAAU,GAAG,KAAjB,CAAA;EACA,EAAA,IAAIxE,aAAsC,GAAG,EAA7C,CANA;;EASApE,EAAAA,OAAO,CAAC9R,OAAR,CAAgB,CAACY,MAAD,EAASjJ,KAAT,KAAmB;MACjC,IAAIuG,EAAE,GAAGsT,aAAa,CAAC7Z,KAAD,CAAb,CAAqBgG,KAArB,CAA2BO,EAApC,CAAA;MACAtC,SAAS,CACP,CAACsV,gBAAgB,CAACtQ,MAAD,CADV,EAEP,qDAFO,CAAT,CAAA;;EAIA,IAAA,IAAIwQ,aAAa,CAACxQ,MAAD,CAAjB,EAA2B;EACzB;EACA;EACA,MAAA,IAAIyQ,aAAa,GAAGhB,mBAAmB,CAACrR,OAAD,EAAUd,EAAV,CAAvC,CAAA;EACA,MAAA,IAAId,KAAK,GAAGwD,MAAM,CAACxD,KAAnB,CAJyB;EAMzB;EACA;;EACA,MAAA,IAAImS,YAAJ,EAAkB;UAChBnS,KAAK,GAAGqF,MAAM,CAAC+T,MAAP,CAAcjH,YAAd,CAAA,CAA4B,CAA5B,CAAR,CAAA;EACAA,QAAAA,YAAY,GAAGzX,SAAf,CAAA;EACD,OAAA;;EAED4U,MAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB,CAbyB;;QAgBzB,IAAIA,MAAM,CAAC2E,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,CAAN,IAAkC,IAAtC,EAA4C;UAC1CwO,MAAM,CAAC2E,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,CAAN,GAAiCd,KAAjC,CAAA;EACD,OAlBwB;;;EAqBzBoP,MAAAA,UAAU,CAACtO,EAAD,CAAV,GAAiBpG,SAAjB,CArByB;EAwBzB;;QACA,IAAI,CAAC4iB,UAAL,EAAiB;EACfA,QAAAA,UAAU,GAAG,IAAb,CAAA;EACAzE,QAAAA,UAAU,GAAGnM,oBAAoB,CAAClJ,MAAM,CAACxD,KAAR,CAApB,GACTwD,MAAM,CAACxD,KAAP,CAAaiJ,MADJ,GAET,GAFJ,CAAA;EAGD,OAAA;;QACD,IAAIzF,MAAM,CAAC0F,OAAX,EAAoB;EAClB4P,QAAAA,aAAa,CAAChY,EAAD,CAAb,GAAoB0C,MAAM,CAAC0F,OAA3B,CAAA;EACD,OAAA;EACF,KAlCD,MAkCO;EACL,MAAA,IAAIgL,gBAAgB,CAAC1Q,MAAD,CAApB,EAA8B;EAC5BgN,QAAAA,eAAe,CAACpH,GAAhB,CAAoBtI,EAApB,EAAwB0C,MAAM,CAACwR,YAA/B,CAAA,CAAA;UACA5F,UAAU,CAACtO,EAAD,CAAV,GAAiB0C,MAAM,CAACwR,YAAP,CAAoBlM,IAArC,CAAA;EACD,OAHD,MAGO;EACLsG,QAAAA,UAAU,CAACtO,EAAD,CAAV,GAAiB0C,MAAM,CAACsF,IAAxB,CAAA;EACD,OANI;EASL;;;EACA,MAAA,IACEtF,MAAM,CAACqV,UAAP,IAAqB,IAArB,IACArV,MAAM,CAACqV,UAAP,KAAsB,GADtB,IAEA,CAACyE,UAHH,EAIE;UACAzE,UAAU,GAAGrV,MAAM,CAACqV,UAApB,CAAA;EACD,OAAA;;QACD,IAAIrV,MAAM,CAAC0F,OAAX,EAAoB;EAClB4P,QAAAA,aAAa,CAAChY,EAAD,CAAb,GAAoB0C,MAAM,CAAC0F,OAA3B,CAAA;EACD,OAAA;EACF,KAAA;EACF,GA7DD,EATA;EAyEA;EACA;;EACA,EAAA,IAAIiJ,YAAJ,EAAkB;EAChB7C,IAAAA,MAAM,GAAG6C,YAAT,CAAA;MACA/C,UAAU,CAAC/J,MAAM,CAACsM,IAAP,CAAYQ,YAAZ,CAAA,CAA0B,CAA1B,CAAD,CAAV,GAA2CzX,SAA3C,CAAA;EACD,GAAA;;IAED,OAAO;MACL0U,UADK;MAELE,MAFK;MAGLuJ,UAAU,EAAEA,UAAU,IAAI,GAHrB;EAILC,IAAAA,aAAAA;KAJF,CAAA;EAMD,CAAA;;EAED,SAAS/D,iBAAT,CACEta,KADF,EAEEmH,OAFF,EAGEwS,aAHF,EAIEM,OAJF,EAKEvC,YALF,EAMEkC,oBANF,EAOEO,cAPF,EAQEpE,eARF,EAYE;IACA,IAAI;MAAEpB,UAAF;EAAcE,IAAAA,MAAAA;EAAd,GAAA,GAAyB0K,sBAAsB,CACjDpY,OADiD,EAEjDwS,aAFiD,EAGjDM,OAHiD,EAIjDvC,YAJiD,EAKjD3B,eALiD,CAAnD,CADA;;EAUA,EAAA,KAAK,IAAIjW,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG8Z,oBAAoB,CAACzZ,MAAjD,EAAyDL,KAAK,EAA9D,EAAkE;MAChE,IAAI;QAAEe,GAAF;EAAO6J,MAAAA,KAAAA;OAAUkP,GAAAA,oBAAoB,CAAC9Z,KAAD,CAAzC,CAAA;EACAiE,IAAAA,SAAS,CACPoW,cAAc,KAAKla,SAAnB,IAAgCka,cAAc,CAACra,KAAD,CAAd,KAA0BG,SADnD,EAEP,2CAFO,CAAT,CAAA;EAIA,IAAA,IAAI8I,MAAM,GAAGoR,cAAc,CAACra,KAAD,CAA3B,CANgE;;EAShE,IAAA,IAAIyZ,aAAa,CAACxQ,MAAD,CAAjB,EAA2B;EACzB,MAAA,IAAIyQ,aAAa,GAAGhB,mBAAmB,CAACxY,KAAK,CAACmH,OAAP,EAAgBuD,KAAhB,oBAAgBA,KAAK,CAAE5E,KAAP,CAAaO,EAA7B,CAAvC,CAAA;;EACA,MAAA,IAAI,EAAEwO,MAAM,IAAIA,MAAM,CAAC2E,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,CAAlB,CAAJ,EAAiD;EAC/CwO,QAAAA,MAAM,gBACDA,MADC,EAAA;EAEJ,UAAA,CAAC2E,aAAa,CAAC1T,KAAd,CAAoBO,EAArB,GAA0B0C,MAAM,CAACxD,KAAAA;WAFnC,CAAA,CAAA;EAID,OAAA;;EACDvF,MAAAA,KAAK,CAAC8U,QAAN,CAAerE,MAAf,CAAsB5P,GAAtB,CAAA,CAAA;EACD,KATD,MASO,IAAIwY,gBAAgB,CAACtQ,MAAD,CAApB,EAA8B;EACnC;EACA;EACAhF,MAAAA,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAAT,CAAA;EACD,KAJM,MAIA,IAAI0V,gBAAgB,CAAC1Q,MAAD,CAApB,EAA8B;EACnC;EACA;EACAhF,MAAAA,SAAS,CAAC,KAAD,EAAQ,iCAAR,CAAT,CAAA;EACD,KAJM,MAIA;EACL,MAAA,IAAI6X,WAAkC,GAAG;EACvC5b,QAAAA,KAAK,EAAE,MADgC;UAEvCqO,IAAI,EAAEtF,MAAM,CAACsF,IAF0B;EAGvCoE,QAAAA,UAAU,EAAExS,SAH2B;EAIvCyS,QAAAA,UAAU,EAAEzS,SAJ2B;EAKvC0S,QAAAA,WAAW,EAAE1S,SAL0B;EAMvC2S,QAAAA,QAAQ,EAAE3S,SAN6B;UAOvC,2BAA6B,EAAA,IAAA;SAP/B,CAAA;EASAD,MAAAA,KAAK,CAAC8U,QAAN,CAAenG,GAAf,CAAmB9N,GAAnB,EAAwB+a,WAAxB,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;IAED,OAAO;MAAEjH,UAAF;EAAcE,IAAAA,MAAAA;KAArB,CAAA;EACD,CAAA;;EAED,SAASsC,eAAT,CACExC,UADF,EAEEmO,aAFF,EAGE3b,OAHF,EAIE0N,MAJF,EAKa;IACX,IAAIkO,gBAAgB,GAAQD,QAAAA,CAAAA,EAAAA,EAAAA,aAAR,CAApB,CAAA;;EACA,EAAA,KAAK,IAAIpY,KAAT,IAAkBvD,OAAlB,EAA2B;EACzB,IAAA,IAAId,EAAE,GAAGqE,KAAK,CAAC5E,KAAN,CAAYO,EAArB,CAAA;;EACA,IAAA,IAAIyc,aAAa,CAACE,cAAd,CAA6B3c,EAA7B,CAAJ,EAAsC;EACpC,MAAA,IAAIyc,aAAa,CAACzc,EAAD,CAAb,KAAsBpG,SAA1B,EAAqC;EACnC8iB,QAAAA,gBAAgB,CAAC1c,EAAD,CAAhB,GAAuByc,aAAa,CAACzc,EAAD,CAApC,CAAA;EACD,OAIA;EACF,KARD,MAQO,IAAIsO,UAAU,CAACtO,EAAD,CAAV,KAAmBpG,SAAnB,IAAgCyK,KAAK,CAAC5E,KAAN,CAAYsO,MAAhD,EAAwD;EAC7D;EACA;EACA2O,MAAAA,gBAAgB,CAAC1c,EAAD,CAAhB,GAAuBsO,UAAU,CAACtO,EAAD,CAAjC,CAAA;EACD,KAAA;;MAED,IAAIwO,MAAM,IAAIA,MAAM,CAACmO,cAAP,CAAsB3c,EAAtB,CAAd,EAAyC;EACvC;EACA,MAAA,MAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAO0c,gBAAP,CAAA;EACD;EAGD;EACA;;;EACA,SAASvK,mBAAT,CACErR,OADF,EAEEgS,OAFF,EAG0B;EACxB,EAAA,IAAI8J,eAAe,GAAG9J,OAAO,GACzBhS,OAAO,CAACtD,KAAR,CAAc,CAAd,EAAiBsD,OAAO,CAACmZ,SAAR,CAAmBnM,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAe8S,OAAxC,CAAmD,GAAA,CAApE,CADyB,GAEzB,CAAC,GAAGhS,OAAJ,CAFJ,CAAA;EAGA,EAAA,OACE8b,eAAe,CAACC,OAAhB,GAA0BxE,IAA1B,CAAgCvK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQqd,gBAAR,KAA6B,IAAnE,KACAhc,OAAO,CAAC,CAAD,CAFT,CAAA;EAID,CAAA;;EAED,SAAS8M,sBAAT,CAAgCjO,MAAhC,EAGE;EACA;IACA,IAAIF,KAAK,GAAGE,MAAM,CAAC0Y,IAAP,CAAalP,CAAD,IAAOA,CAAC,CAAC1P,KAAF,IAAW,CAAC0P,CAAC,CAAC7N,IAAd,IAAsB6N,CAAC,CAAC7N,IAAF,KAAW,GAApD,CAA4D,IAAA;MACtE0E,EAAE,EAAA,sBAAA;KADJ,CAAA;IAIA,OAAO;EACLc,IAAAA,OAAO,EAAE,CACP;EACE0D,MAAAA,MAAM,EAAE,EADV;EAEE7J,MAAAA,QAAQ,EAAE,EAFZ;EAGE8J,MAAAA,YAAY,EAAE,EAHhB;EAIEhF,MAAAA,KAAAA;EAJF,KADO,CADJ;EASLA,IAAAA,KAAAA;KATF,CAAA;EAWD,CAAA;;EAED,SAASkO,sBAAT,CACExF,MADF,EAaE,MAAA,EAAA;IAAA,IAXA;MACExN,QADF;MAEEmY,OAFF;MAGED,MAHF;EAIED,IAAAA,IAAAA;EAJF,GAWA,uBADI,EACJ,GAAA,MAAA,CAAA;IACA,IAAIlH,UAAU,GAAG,sBAAjB,CAAA;IACA,IAAIqR,YAAY,GAAG,iCAAnB,CAAA;;IAEA,IAAI5U,MAAM,KAAK,GAAf,EAAoB;EAClBuD,IAAAA,UAAU,GAAG,aAAb,CAAA;;EACA,IAAA,IAAImH,MAAM,IAAIlY,QAAV,IAAsBmY,OAA1B,EAAmC;EACjCiK,MAAAA,YAAY,GACV,aAAclK,GAAAA,MAAd,sBAAoClY,QAApC,GAAA,SAAA,IAAA,yCAAA,GAC2CmY,OAD3C,GADF,MAAA,CAAA,GAAA,2CAAA,CAAA;EAID,KALD,MAKO,IAAIF,IAAI,KAAK,cAAb,EAA6B;EAClCmK,MAAAA,YAAY,GAAG,qCAAf,CAAA;EACD,KAAA;EACF,GAVD,MAUO,IAAI5U,MAAM,KAAK,GAAf,EAAoB;EACzBuD,IAAAA,UAAU,GAAG,WAAb,CAAA;EACAqR,IAAAA,YAAY,GAAajK,UAAAA,GAAAA,OAAb,GAA6CnY,0BAAAA,GAAAA,QAA7C,GAAZ,IAAA,CAAA;EACD,GAHM,MAGA,IAAIwN,MAAM,KAAK,GAAf,EAAoB;EACzBuD,IAAAA,UAAU,GAAG,WAAb,CAAA;MACAqR,YAAY,GAAA,yBAAA,GAA4BpiB,QAA5B,GAAZ,IAAA,CAAA;EACD,GAHM,MAGA,IAAIwN,MAAM,KAAK,GAAf,EAAoB;EACzBuD,IAAAA,UAAU,GAAG,oBAAb,CAAA;;EACA,IAAA,IAAImH,MAAM,IAAIlY,QAAV,IAAsBmY,OAA1B,EAAmC;QACjCiK,YAAY,GACV,aAAclK,GAAAA,MAAM,CAACsJ,WAAP,EAAd,GAAkDxhB,gBAAAA,GAAAA,QAAlD,GAC4CmY,SAAAA,IAAAA,0CAAAA,GAAAA,OAD5C,GADF,MAAA,CAAA,GAAA,2CAAA,CAAA;OADF,MAKO,IAAID,MAAJ,EAAY;EACjBkK,MAAAA,YAAY,GAA8BlK,2BAAAA,GAAAA,MAAM,CAACsJ,WAAP,EAA9B,GAAZ,IAAA,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAO,IAAI1Q,aAAJ,CACLtD,MAAM,IAAI,GADL,EAELuD,UAFK,EAGL,IAAI7N,KAAJ,CAAUkf,YAAV,CAHK,EAIL,IAJK,CAAP,CAAA;EAMD;;;EAGD,SAAS/I,YAAT,CAAsBJ,OAAtB,EAAyE;EACvE,EAAA,KAAK,IAAI7S,CAAC,GAAG6S,OAAO,CAAC9Z,MAAR,GAAiB,CAA9B,EAAiCiH,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;EAC5C,IAAA,IAAI2B,MAAM,GAAGkR,OAAO,CAAC7S,CAAD,CAApB,CAAA;;EACA,IAAA,IAAIiS,gBAAgB,CAACtQ,MAAD,CAApB,EAA8B;EAC5B,MAAA,OAAOA,MAAP,CAAA;EACD,KAAA;EACF,GAAA;EACF,CAAA;;EAED,SAASgX,iBAAT,CAA2Bpe,IAA3B,EAAqC;EACnC,EAAA,IAAIkD,UAAU,GAAG,OAAOlD,IAAP,KAAgB,QAAhB,GAA2BC,SAAS,CAACD,IAAD,CAApC,GAA6CA,IAA9D,CAAA;IACA,OAAOL,UAAU,cAAMuD,UAAN,EAAA;EAAkB/C,IAAAA,IAAI,EAAE,EAAA;KAAzC,CAAA,CAAA,CAAA;EACD,CAAA;;EAED,SAASsW,gBAAT,CAA0BlP,CAA1B,EAAuCC,CAAvC,EAA6D;IAC3D,OACED,CAAC,CAAClI,QAAF,KAAemI,CAAC,CAACnI,QAAjB,IAA6BkI,CAAC,CAACrH,MAAF,KAAasH,CAAC,CAACtH,MAA5C,IAAsDqH,CAAC,CAACpH,IAAF,KAAWqH,CAAC,CAACrH,IADrE,CAAA;EAGD,CAAA;;EAED,SAAS2X,gBAAT,CAA0B1Q,MAA1B,EAAwE;EACtE,EAAA,OAAOA,MAAM,CAACkQ,IAAP,KAAgBrT,UAAU,CAAC2c,QAAlC,CAAA;EACD,CAAA;;EAED,SAAShJ,aAAT,CAAuBxQ,MAAvB,EAAkE;EAChE,EAAA,OAAOA,MAAM,CAACkQ,IAAP,KAAgBrT,UAAU,CAACL,KAAlC,CAAA;EACD,CAAA;;EAED,SAAS8T,gBAAT,CAA0BtQ,MAA1B,EAAyE;IACvE,OAAO,CAACA,MAAM,IAAIA,MAAM,CAACkQ,IAAlB,MAA4BrT,UAAU,CAACiM,QAA9C,CAAA;EACD,CAAA;;EAED,SAAS2M,UAAT,CAAoBxa,KAApB,EAAmD;EACjD,EAAA,OACEA,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAACwK,MAAb,KAAwB,QADxB,IAEA,OAAOxK,KAAK,CAAC+N,UAAb,KAA4B,QAF5B,IAGA,OAAO/N,KAAK,CAACyK,OAAb,KAAyB,QAHzB,IAIA,OAAOzK,KAAK,CAACye,IAAb,KAAsB,WALxB,CAAA;EAOD,CAAA;;EAED,SAASzD,kBAAT,CAA4BjW,MAA5B,EAA6D;EAC3D,EAAA,IAAI,CAACyV,UAAU,CAACzV,MAAD,CAAf,EAAyB;EACvB,IAAA,OAAO,KAAP,CAAA;EACD,GAAA;;EAED,EAAA,IAAIyF,MAAM,GAAGzF,MAAM,CAACyF,MAApB,CAAA;IACA,IAAI1N,QAAQ,GAAGiI,MAAM,CAAC0F,OAAP,CAAe8B,GAAf,CAAmB,UAAnB,CAAf,CAAA;IACA,OAAO/B,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAA3B,IAAkC1N,QAAQ,IAAI,IAArD,CAAA;EACD,CAAA;;EAED,SAASie,oBAAT,CAA8BsE,GAA9B,EAAmE;IACjE,OACEA,GAAG,IACH7E,UAAU,CAAC6E,GAAG,CAACpE,QAAL,CADV,KAECoE,GAAG,CAACpK,IAAJ,KAAarT,UAAU,CAACyI,IAAxB,IAAgCzI,UAAU,CAACL,KAF5C,CADF,CAAA;EAKD,CAAA;;EAED,SAAS2Y,aAAT,CAAuBhF,MAAvB,EAA6D;EAC3D,EAAA,OAAO7G,mBAAmB,CAAC7L,GAApB,CAAwB0S,MAAxB,CAAP,CAAA;EACD,CAAA;;EAED,SAASlC,gBAAT,CAA0BkC,MAA1B,EAAyE;EACvE,EAAA,OAAO/G,oBAAoB,CAAC3L,GAArB,CAAyB0S,MAAzB,CAAP,CAAA;EACD,CAAA;;EAED,eAAeoD,sBAAf,CACEJ,cADF,EAEEvC,aAFF,EAGEM,OAHF,EAIEpK,MAJF,EAKEiQ,SALF,EAMEuB,iBANF,EAOE;EACA,EAAA,KAAK,IAAIvhB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGma,OAAO,CAAC9Z,MAApC,EAA4CL,KAAK,EAAjD,EAAqD;EACnD,IAAA,IAAIiJ,MAAM,GAAGkR,OAAO,CAACna,KAAD,CAApB,CAAA;EACA,IAAA,IAAI4K,KAAK,GAAGiP,aAAa,CAAC7Z,KAAD,CAAzB,CAFmD;EAInD;EACA;;MACA,IAAI,CAAC4K,KAAL,EAAY;EACV,MAAA,SAAA;EACD,KAAA;;EAED,IAAA,IAAI4W,YAAY,GAAGpF,cAAc,CAACwC,IAAf,CAChBvK,CAAD,IAAOA,CAAC,CAACrO,KAAF,CAAQO,EAAR,KAAeqE,KAAK,CAAE5E,KAAP,CAAaO,EADlB,CAAnB,CAAA;MAGA,IAAIid,oBAAoB,GACtBhC,YAAY,IAAI,IAAhB,IACA,CAACL,kBAAkB,CAACK,YAAD,EAAe5W,KAAf,CADnB,IAEA,CAAC2W,iBAAiB,IAAIA,iBAAiB,CAAC3W,KAAK,CAAC5E,KAAN,CAAYO,EAAb,CAAvC,MAA6DpG,SAH/D,CAAA;;MAKA,IAAIwZ,gBAAgB,CAAC1Q,MAAD,CAAhB,KAA6B+W,SAAS,IAAIwD,oBAA1C,CAAJ,EAAqE;EACnE;EACA;EACA;EACA,MAAA,MAAMzH,mBAAmB,CAAC9S,MAAD,EAAS8G,MAAT,EAAiBiQ,SAAjB,CAAnB,CAA+C3P,IAA/C,CAAqDpH,MAAD,IAAY;EACpE,QAAA,IAAIA,MAAJ,EAAY;YACVkR,OAAO,CAACna,KAAD,CAAP,GAAiBiJ,MAAM,IAAIkR,OAAO,CAACna,KAAD,CAAlC,CAAA;EACD,SAAA;EACF,OAJK,CAAN,CAAA;EAKD,KAAA;EACF,GAAA;EACF,CAAA;;EAED,eAAe+b,mBAAf,CACE9S,MADF,EAEE8G,MAFF,EAGE0T,MAHF,EAIoD;EAAA,EAAA,IADlDA,MACkD,KAAA,KAAA,CAAA,EAAA;EADlDA,IAAAA,MACkD,GADzC,KACyC,CAAA;EAAA,GAAA;;IAClD,IAAI/S,OAAO,GAAG,MAAMzH,MAAM,CAACwR,YAAP,CAAoBrJ,WAApB,CAAgCrB,MAAhC,CAApB,CAAA;;EACA,EAAA,IAAIW,OAAJ,EAAa;EACX,IAAA,OAAA;EACD,GAAA;;EAED,EAAA,IAAI+S,MAAJ,EAAY;MACV,IAAI;QACF,OAAO;UACLtK,IAAI,EAAErT,UAAU,CAACyI,IADZ;EAELA,QAAAA,IAAI,EAAEtF,MAAM,CAACwR,YAAP,CAAoBlJ,aAAAA;SAF5B,CAAA;OADF,CAKE,OAAO/M,CAAP,EAAU;EACV;QACA,OAAO;UACL2U,IAAI,EAAErT,UAAU,CAACL,KADZ;EAELA,QAAAA,KAAK,EAAEjB,CAAAA;SAFT,CAAA;EAID,KAAA;EACF,GAAA;;IAED,OAAO;MACL2U,IAAI,EAAErT,UAAU,CAACyI,IADZ;EAELA,IAAAA,IAAI,EAAEtF,MAAM,CAACwR,YAAP,CAAoBlM,IAAAA;KAF5B,CAAA;EAID,CAAA;;EAED,SAAS6R,kBAAT,CAA4Bre,MAA5B,EAAqD;EACnD,EAAA,OAAO,IAAI6gB,eAAJ,CAAoB7gB,MAApB,CAAA,CAA4B2hB,MAA5B,CAAmC,OAAnC,CAA4C1Z,CAAAA,IAA5C,CAAkDkH,CAAD,IAAOA,CAAC,KAAK,EAA9D,CAAP,CAAA;EACD;EAGD;;;EACA,SAASwM,qBAAT,CACE9S,KADF,EAEEiK,UAFF,EAGmB;IACjB,IAAI;MAAE7O,KAAF;MAAS9E,QAAT;EAAmB6J,IAAAA,MAAAA;EAAnB,GAAA,GAA8BH,KAAlC,CAAA;IACA,OAAO;MACLrE,EAAE,EAAEP,KAAK,CAACO,EADL;MAELrF,QAFK;MAGL6J,MAHK;EAILwD,IAAAA,IAAI,EAAEsG,UAAU,CAAC7O,KAAK,CAACO,EAAP,CAJX;MAKLod,MAAM,EAAE3d,KAAK,CAAC2d,MAAAA;KALhB,CAAA;EAOD,CAAA;;EAED,SAASzK,cAAT,CACE7R,OADF,EAEErG,QAFF,EAGE;EACA,EAAA,IAAIe,MAAM,GACR,OAAOf,QAAP,KAAoB,QAApB,GAA+Bc,SAAS,CAACd,QAAD,CAAT,CAAoBe,MAAnD,GAA4Df,QAAQ,CAACe,MADvE,CAAA;;EAEA,EAAA,IACEsF,OAAO,CAACA,OAAO,CAAChH,MAAR,GAAiB,CAAlB,CAAP,CAA4B2F,KAA5B,CAAkChG,KAAlC,IACAogB,kBAAkB,CAACre,MAAM,IAAI,EAAX,CAFpB,EAGE;EACA;EACA,IAAA,OAAOsF,OAAO,CAACA,OAAO,CAAChH,MAAR,GAAiB,CAAlB,CAAd,CAAA;EACD,GATD;EAWA;;;EACA,EAAA,IAAIujB,WAAW,GAAGrW,0BAA0B,CAAClG,OAAD,CAA5C,CAAA;EACA,EAAA,OAAOuc,WAAW,CAACA,WAAW,CAACvjB,MAAZ,GAAqB,CAAtB,CAAlB,CAAA;EACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}