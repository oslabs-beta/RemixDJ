{"version":3,"file":"index.js","sources":["../src/normalize-options.ts","../src/index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  allExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  isTSX?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  const allExtensions = v.validateBooleanOption(\n    TopLevelOptions.allExtensions,\n    options.allExtensions,\n    false,\n  );\n\n  const isTSX = v.validateBooleanOption(\n    TopLevelOptions.isTSX,\n    options.isTSX,\n    false,\n  );\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    v.invariant(\n      allExtensions,\n      \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n    );\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  return {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport normalizeOptions from \"./normalize-options\";\nimport type { Options } from \"./normalize-options\";\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  return {\n    overrides: allExtensions\n      ? [\n          {\n            plugins: [\n              [\n                transformTypeScript,\n                pluginOptions(isTSX, disallowAmbiguousJSXLike),\n              ],\n            ],\n          },\n        ]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called`\n        [\n          {\n            test: /\\.ts$/,\n            plugins: [[transformTypeScript, pluginOptions(false, false)]],\n          },\n          {\n            test: /\\.mts$/,\n            sourceType: \"module\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.cts$/,\n            sourceType: \"script\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.tsx$/,\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: [[transformTypeScript, pluginOptions(true, false)]],\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","allExtensions","disallowAmbiguousJSXLike","isTSX","jsxPragmaFrag","optimizeConstEnums","validateStringOption","validateBooleanOption","invariant","declarePreset","api","opts","assertVersion","pluginOptions","allowDeclareFields","overrides","plugins","transformTypeScript","test","sourceType"],"mappings":"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"}